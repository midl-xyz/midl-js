/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/addresses/{address}/runes/balances": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune Balances by Address
		 * @description Returns total rune balances held in UTxOs controlled by the provided address, sorted by rune ID.
		 */
		get: operations["addresses_all_rune_balances"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes/balances/{rune}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune Balance by Address and Rune
		 * @description Returns the total amount of the provided rune kind held in UTxOs controlled by the provided address.
		 */
		get: operations["addresses_specific_rune_balance"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes/txs/{txid}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Rune Edicts by Address and Transaction */
		get: operations["addresses_runes_by_tx"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune UTxOs by Address
		 * @description Returns all UTxOs controlled by the provided address which contain runes, sorted by height.
		 */
		get: operations["addresses_all_rune_utxos"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes/utxos/{rune}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune UTxOs by Address and Rune
		 * @description Returns UTxOs controlled by the provided address which contain the provided rune, sorted by height.
		 */
		get: operations["addresses_specific_rune_utxos"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/tx_count": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Count by Address
		 * @description Returns the number of transactions in which the address controlled an input or output
		 */
		get: operations["addresses_tx_count_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * UTxOs by Address
		 * @description Returns UTxOs controlled by the provided address, sorted by height.
		 */
		get: operations["addresses_utxos_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/runes/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Info by Rune (Batch)
		 * @description Given a list of rune identifiers (name or id), returns a map of identifiers to rune info (or null if no info found).
		 */
		post: operations["runes_rune_info_batch"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/{rune}/utxos/{utxo}/balance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune Balance by UTXO and Rune
		 * @description Returns the amount of the specified rune contained in the provided UTXO. If the rune is not
		 *     present in the UTXO, `0` is returned.
		 */
		get: operations["rune_balance_at_utxo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		AddressUtxo: {
			/** Format: int64 */
			height: number;
			/** Format: int32 */
			output_index: number;
			satoshis: string;
			tx_hash: string;
		};
		ChainTip: {
			/** @description The hash of the block */
			block_hash: string;
			/**
			 * Format: int64
			 * @description The height of the block in the blockchain
			 */
			block_height: number;
		};
		EstimatedBlock: {
			/** Format: int64 */
			block_height: number;
		};
		IndexerInfo: {
			/** @description Most recent *mined* block in the indexed mainchain, any estimated blocks will be descendants of this block */
			chain_tip: components["schemas"]["ChainTip"];
			/** @description Information about any estimated blocks from the mempool that were indexed in addition to the mainchain */
			estimated_blocks: components["schemas"]["EstimatedBlock"][];
			/** @description Timestamp of the indexed mempool snapshot, if any estimated blocks from the mempool have been indexed */
			mempool_timestamp?: string | null;
		};
		MempoolParam: {
			mempool?: boolean;
		};
		RuneAndAmount: {
			amount: string;
			id: string;
		};
		RuneEdict: {
			amount: string;
			/** Format: int64 */
			block_height: number;
			/** Format: int32 */
			output?: number | null;
			rune_id: string;
		};
		RuneInfo: {
			/** Format: int32 */
			divisibility: number;
			/** Format: int64 */
			etching_height: number;
			etching_tx: string;
			id: string;
			name: string;
			premine: string;
			spaced_name: string;
			symbol?: string | null;
			terms?: null | components["schemas"]["RuneTerms"];
		};
		RuneTerms: {
			amount?: string | null;
			cap?: string | null;
			/** Format: int64 */
			end_height?: number | null;
			/** Format: int64 */
			start_height?: number | null;
		};
		RuneUtxo: {
			/** Format: int64 */
			height: number;
			/** Format: int32 */
			output_index: number;
			runes: components["schemas"]["RuneAndAmount"][];
			satoshis: string;
			tx_hash: string;
		};
		ServeResponse_AddressUtxo: {
			data: {
				/** Format: int64 */
				height: number;
				/** Format: int32 */
				output_index: number;
				satoshis: string;
				tx_hash: string;
			};
			indexer_info: components["schemas"]["IndexerInfo"];
		};
		ServeResponse_HashMap_String_Option_RuneInfo: {
			data: {
				[key: string]: null | {
					/** Format: int32 */
					divisibility: number;
					/** Format: int64 */
					etching_height: number;
					etching_tx: string;
					id: string;
					name: string;
					premine: string;
					spaced_name: string;
					symbol?: string | null;
					terms?: null | components["schemas"]["RuneTerms"];
				};
			};
			indexer_info: components["schemas"]["IndexerInfo"];
		};
		ServeResponse_String: {
			data: string;
			indexer_info: components["schemas"]["IndexerInfo"];
		};
		ServeResponse_Vec_AddressUtxo: {
			data: {
				/** Format: int64 */
				height: number;
				/** Format: int32 */
				output_index: number;
				satoshis: string;
				tx_hash: string;
			}[];
			indexer_info: components["schemas"]["IndexerInfo"];
		};
		ServeResponse_Vec_RuneAndAmount: {
			data: {
				amount: string;
				id: string;
			}[];
			indexer_info: components["schemas"]["IndexerInfo"];
		};
		ServeResponse_Vec_RuneEdict: {
			data: {
				amount: string;
				/** Format: int64 */
				block_height: number;
				/** Format: int32 */
				output?: number | null;
				rune_id: string;
			}[];
			indexer_info: components["schemas"]["IndexerInfo"];
		};
		ServeResponse_Vec_RuneUtxo: {
			data: {
				/** Format: int64 */
				height: number;
				/** Format: int32 */
				output_index: number;
				runes: components["schemas"]["RuneAndAmount"][];
				satoshis: string;
				tx_hash: string;
			}[];
			indexer_info: components["schemas"]["IndexerInfo"];
		};
		ServeResponse_u64: {
			/** Format: int64 */
			data: number;
			indexer_info: components["schemas"]["IndexerInfo"];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	addresses_all_rune_balances: {
		parameters: {
			query?: {
				/** @description Mempool-aware (default: false) */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address
				 * @example tb1qphcdyah2e4vtpxn56hsz3p6kapg90pl4x525kc
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "id": "30562:50",
					 *           "amount": "100000000"
					 *         },
					 *         {
					 *           "id": "65103:2",
					 *           "amount": "300000"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_Vec_RuneAndAmount"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	addresses_specific_rune_balance: {
		parameters: {
			query?: {
				/** @description Mempool-aware */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address
				 * @example tb1qphcdyah2e4vtpxn56hsz3p6kapg90pl4x525kc
				 */
				address: string;
				/**
				 * @description Rune ID or name (spaced or unspaced)
				 * @example BITCOIN•PIZZAS
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": "100000000",
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_String"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	addresses_runes_by_tx: {
		parameters: {
			query?: {
				/** @description Mempool-aware */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address
				 * @example tb1qphcdyah2e4vtpxn56hsz3p6kapg90pl4x525kc
				 */
				address: string;
				/**
				 * @description Transaction ID
				 * @example c0345bb5906257a05cdc2d11b6580ce75fdfe8b7ac09b7b2711d435e2ba0a9b3
				 */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "rune_id": "30562:50",
					 *           "amount": "100000000",
					 *           "output": 1,
					 *           "block_height": 30562
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_Vec_RuneEdict"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	addresses_all_rune_utxos: {
		parameters: {
			query?: {
				/** @description Mempool-aware (default: false) */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address
				 * @example tb1qphcdyah2e4vtpxn56hsz3p6kapg90pl4x525kc
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "tx_hash": "63937d48e35d15a7c5530469210c202104cc94a945cc848554f336b3f4f24121",
					 *           "output_index": 1,
					 *           "height": 30562,
					 *           "satoshis": "10000",
					 *           "runes": [
					 *             {
					 *               "id": "30562:50",
					 *               "amount": "100000000"
					 *             }
					 *           ]
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_Vec_RuneUtxo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	addresses_specific_rune_utxos: {
		parameters: {
			query?: {
				/** @description Mempool-aware */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address
				 * @example tb1qphcdyah2e4vtpxn56hsz3p6kapg90pl4x525kc
				 */
				address: string;
				/**
				 * @description Rune ID or name (spaced or unspaced)
				 * @example BITCOIN•PIZZAS
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "tx_hash": "63937d48e35d15a7c5530469210c202104cc94a945cc848554f336b3f4f24121",
					 *           "output_index": 1,
					 *           "height": 30562,
					 *           "satoshis": "10000",
					 *           "runes": [
					 *             {
					 *               "id": "30562:50",
					 *               "amount": "100000000"
					 *             }
					 *           ]
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_Vec_RuneUtxo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	addresses_tx_count_by_address: {
		parameters: {
			query?: {
				/** @description Mempool-aware */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address
				 * @example tb1qphcdyah2e4vtpxn56hsz3p6kapg90pl4x525kc
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": 21086,
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "0000000004af5483f4e54ebf8f1d728b003d19ebc184761b82c50b8e86ec2a0a",
					 *           "block_height": 91625
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_u64"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	addresses_utxos_by_address: {
		parameters: {
			query?: {
				/** @description Mempool-aware */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address
				 * @example tb1qphcdyah2e4vtpxn56hsz3p6kapg90pl4x525kc
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "tx_hash": "63937d48e35d15a7c5530469210c202104cc94a945cc848554f336b3f4f24121",
					 *           "output_index": 1,
					 *           "height": 30562,
					 *           "satoshis": "10000"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_Vec_AddressUtxo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	runes_rune_info_batch: {
		parameters: {
			query?: {
				/** @description Mempool-aware */
				mempool?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				/** @example [
				 *       "BESTINSLOTXYZ",
				 *       "ABCDEF"
				 *     ] */
				"application/json": string[];
			};
		};
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "30562:50": {
					 *           "id": "30562:50",
					 *           "name": "BESTINSLOTXYZ",
					 *           "spaced_name": "BESTINSLOT•XYZ",
					 *           "symbol": "ʃ",
					 *           "divisibility": 8,
					 *           "etching_tx": "63937d48e35d15a7c5530469210c202104cc94a945cc848554f336b3f4f24121",
					 *           "etching_height": 30562,
					 *           "terms": {
					 *             "amount": "100000000",
					 *             "cap": "3402823669209384634633746074316",
					 *             "start_height": null,
					 *             "end_height": null
					 *           },
					 *           "premine": "100000000"
					 *         },
					 *         "ABCDEF": null
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_HashMap_String_Option_RuneInfo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rune_balance_at_utxo: {
		parameters: {
			query?: {
				/** @description Mempool-aware */
				mempool?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description UTXO reference in format txid:index
				 * @example c0345bb5906257a05cdc2d11b6580ce75fdfe8b7ac09b7b2711d435e2ba0a9b3:1
				 */
				utxo: string;
				/**
				 * @description Rune ID or name (spaced or unspaced)
				 * @example BITCOIN•PIZZAS
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": "100000000",
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000108a4cd9755381003a01bea7998ca2d770fe09b576753ac7ef",
					 *           "block_height": 31633
					 *         },
					 *         "mempool_timestamp": null,
					 *         "estimated_blocks": []
					 *       }
					 *     } */
					"application/json": components["schemas"]["ServeResponse_String"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested rune or UTXO not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
