/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/addresses/{address}/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Satoshi Activity by Address
		 * @description Returns all transactions for a given address or script pubkey, allowing insight into when the balance increased, decreased, or remained the same. This endpoint supports customization to narrow results by time, transaction type, or ordering, enabling tailored historical views.
		 */
		get: operations["satoshi_activity_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/balance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Satoshi Balance by Address
		 * @description Returns the total balance in satoshis held at the specified address or script pubkey by summing all unspent outputs (UTXOs). This is a direct snapshot of the address's spendable funds and does not include mempool transactions.
		 */
		get: operations["satoshi_balance_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/balance/historical": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Historical Satoshi Balance by Address
		 * @description Returns the historical satoshi balances, itemized by block and including USD price.
		 */
		get: operations["historical_satoshi_balance_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/brc20": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * BRC20 by Address
		 * @description Returns a collection of BRC20 tokens associated with the address, showing both the total and available (transferable) balances. This is essential for building BRC20 token wallets and dashboards.
		 */
		get: operations["brc20_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/brc20/transfer_inscriptions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * BRC20 Transfer Inscriptions by Address
		 * @description Returns all unspent BRC20 transfer inscriptions residing at the address. This endpoint is critical for applications facilitating token transfers, as it identifies transfer-eligible inscriptions.
		 */
		get: operations["brc20_transfer_inscriptions_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/inscriptions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inscriptions by Address
		 * @description Retrieves all inscriptions currently controlled by a specific address. Useful for wallet UIs and inscription portfolio views.
		 */
		get: operations["inscriptions_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/inscriptions/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inscription Activity by Address
		 * @description Returns all inscription-related transactions involving a specific address. Can be filtered by activity type (send, receive, self-transfer), narrowed to a specific inscription, and sorted chronologically. Useful for building dashboards, tracking user behavior, or filtering unwanted spam activity.
		 */
		get: operations["inscription_activity_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Runes by Address
		 * @description Provides a list of all Rune assets held by the specified address. It returns both total and available balances, allowing for token inventory management and portfolio tracking.
		 */
		get: operations["runes_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune Activity by Address
		 * @description Return all transactions where the specified address has rune activity, with the option to filter by a specific rune kind.
		 */
		get: operations["rune_activity_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune UTxOs by Address
		 * @description Lists all UTXOs at the address or script pubkey that contains Rune tokens, with optional refinement based on Rune type or metadata. Helpful for spend analysis or wallet state audits.
		 */
		get: operations["rune_utxos_by_address_v2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/runes/{rune}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * (deprecated) Rune UTxOs by Address and Rune
		 * @deprecated
		 * @description Return all UTxOs controlled by the specified address or script pubkey which contain runes, with the option to filter by a specific rune kind.
		 */
		get: operations["rune_utxos_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/statistics": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Address Statistics
		 * @description Returns all current statistics of the address: total txs the address was involved in, total unspent outputs controlled by the address, current satoshi, control of any runes and inscription balance.
		 */
		get: operations["address_statistics"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/txs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transactions by Address
		 * @description List of all transactions which consumed or produced a UTxO controlled by the specified address or script pubkey.
		 */
		get: operations["txs_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/addresses/{address}/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * UTxOs by Address
		 * @description Retrieves all UTXOs associated with a Bitcoin address or script pubkey. Ideal for wallet views, dust filtering, or balance calculations. Can be tailored to exclude certain categories of UTXOs such as those used in metaprotocols.
		 */
		get: operations["utxos_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/brc20": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List BRC20
		 * @description Retrieves a list of tickers of all deployed BRC20 assets.
		 */
		get: operations["list_brc20s"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/brc20/{ticker}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * BRC20 Info
		 * @description Information about a BRC20 tokenâ€™s metadata and current state, including its symbol, deployment details, minting rules, total holders, and minted supply.
		 */
		get: operations["brc20_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/brc20/{ticker}/holders": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * BRC20 Holders
		 * @description Retrieves a list of script pubkeys or addresses that hold the specified BRC20 asset and corresponding total balances.
		 */
		get: operations["brc20_holders_by_ticker"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/collections/{collection_symbol}/inscriptions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inscription IDs by Collection Symbol
		 * @description List of all inscriptions in the collection represented by the queried symbol.
		 */
		get: operations["inscriptions_by_collection_symbol"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/collections/{collection_symbol}/metadata": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Collection Metadata by Collection Symbol
		 * @description Provides metadata for a given inscription collection symbol, including its name, image, supply, and external links. This is useful for rendering collection summaries or for display in marketplaces and aggregators.
		 */
		get: operations["collection_metadata_by_collection_symbol"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/collections/{collection_symbol}/stats": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Collection Stats by Collection Symbol
		 * @description Provides stats for a given inscription: total volume (in sats), floor price (in sats), and total listed. This is useful for rendering collection summaries or for display in marketplaces and aggregators.
		 */
		get: operations["collection_stats_by_collection_symbol"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/inscriptions/{inscription_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inscription Info
		 * @description Delivers information about a specific inscription, including its type, current location (UTXO and address), associated collection, and metadata like size and content preview (if text-based). Supports resolution of any inscription for wallet or explorer views.
		 *     A preview of the content body is given only if its type is `"text/plain"`. For the whole content, use the complementary endpoint, namely `/assets/inscriptions/{inscription_id}/content_body`.
		 */
		get: operations["inscription_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/inscriptions/{inscription_id}/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Activity by Inscription
		 * @description Lists all transactions that have involved the given inscription, starting from its origin (reveal transaction) and including all transfers.
		 */
		get: operations["activity_by_inscription"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/inscriptions/{inscription_id}/collection": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Collection Metadata by Inscription
		 * @description Returns metadata of a collection for a given inscription ID, including its name, image, supply and external links.
		 */
		get: operations["collection_metadata_by_inscription"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/inscriptions/{inscription_id}/content_body": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Content by Inscription ID
		 * @description Retrieves the content body byte array of an inscription. This endpoint is complementary to the `/assets/inscriptions/{inscription_id}` (Inscription Information) endpoint.
		 */
		get: operations["content_by_inscription_id"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/inscriptions/{inscription_id}/metadata": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Token Metadata by Inscription
		 * @description Metadata specific to inscription.
		 */
		get: operations["token_metadata_by_inscription"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/runes": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Runes
		 * @description Lists all Rune tokens deployed, including names and IDs.
		 */
		get: operations["list_runes"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/runes/{rune}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Runes Info
		 * @description Returns full details for a specific Rune token, such as its etching (origin) transaction, supply, number of holders.
		 */
		get: operations["info_by_rune"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/runes/{rune}/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Activity by Rune
		 * @description Returns all transactions where the Rune was used or transferred, beginning with the etching (origin) transaction. Useful for auditing or building live token feeds.
		 */
		get: operations["activity_by_rune"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/runes/{rune}/holders": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Holders by Rune
		 * @description Lists all addresses currently holding a given Rune, with corresponding balances. Helps visualize token distribution and adoption.
		 */
		get: operations["holders_by_rune"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/assets/runes/{rune}/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * UTxOs by Runes
		 * @description Returns all UTXOs containing the specified Rune. Useful for raw state tracking and detailed token flow visualization.
		 */
		get: operations["utxos_by_rune"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/blocks/{height_or_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Info
		 * @description Fetches full details of a block using its hash. Returns information such as height, timestamp, transaction count, miner, and size. Can be used to explore block metadata or confirm inclusion of transactions.
		 */
		get: operations["block_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/blocks/{height_or_hash}/inscriptions/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inscription Activity by Block
		 * @description List of all inscription activity in the block, ordered by transaction index in the block and by output index in the transaction.
		 */
		get: operations["inscription_activity_by_block"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/blocks/{height_or_hash}/transactions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transactions by Block
		 * @description Returns a list of all transaction hashes included in the specified block. Supports pagination for blocks with a large number of transactions.
		 */
		get: operations["txs_by_block"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transactions/{tx_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Info
		 * @description Returns a full breakdown of a Bitcoin transaction by its hash. Includes inputs, outputs, fees, block confirmation details, and protocol-specific data (e.g., Ordinals, Runes, BRC20). This is useful for explorers, audit tools, or any application requiring full visibility into how funds and inscriptions are moved.
		 */
		get: operations["tx_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transactions/{tx_hash}/inscriptions/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inscription Activity by Transaction
		 * @description List of all inscription activity in the transaction, including their satoshi-level positioning within transactions, ordered by transaction output index. The list of inscriptions is truncated to a maximum of 10,000 inscriptions.
		 */
		get: operations["inscription_activity_by_tx"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transactions/{tx_hash}/metaprotocols": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Info with Metaprotocols
		 * @description Returns an enhanced view of the transaction, including info about metaprotocols in both inputs and outputs. Useful for deep inspection tools.
		 */
		get: operations["tx_info_with_metaprotocols"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transactions/{tx_hash}/outputs/{output_index}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Output Info
		 * @description Provides detailed information for a single transaction output, including its value, spend status, and any attached metadata such as Ordinal inscriptions, Runes, or BRC20 data.
		 */
		get: operations["tx_output_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/addresses/{address}/balance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Satoshi Balance by Address (Mempool-aware)
		 * @description Returns the total balance in satoshis held at the specified address or script pubkey by summing all unspent outputs (UTXOs).
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_satoshi_balance_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/addresses/{address}/runes": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Runes by Address (Mempool-aware)
		 * @description Provides a list of all Rune assets held by the specified address. It returns both total and available balances, allowing for token inventory management and portfolio tracking.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_runes_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/addresses/{address}/runes/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune UTxOs by Address (mempool-aware)
		 * @description Lists all UTXOs at the address or script pubkey that contains Rune tokens, with optional refinement based on Rune type or metadata. Helpful for spend analysis or wallet state audits.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_rune_utxos_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/addresses/{address}/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * UTxOs by Address (Mempool-aware)
		 * @description Retrieves all UTXOs associated with a Bitcoin address or script pubkey. Ideal for wallet views, dust filtering, or balance calculations. Can be tailored to exclude certain categories of UTXOs such as those used in metaprotocols.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_utxos_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/assets/runes/{rune}/holders": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Holders by Rune (Mempool-aware)
		 * @description Lists all addresses currently holding a given Rune, with corresponding balances. Helps visualize token distribution and adoption.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_holders_by_rune"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/fee_rates": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Block Fee Rates
		 * @description Statistics regarding fee rates of transactions within estimated mempool blocks.
		 */
		get: operations["fee_rates"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions/{tx_hash}/metaprotocols": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Info with Metaprotocols (Mempool-aware)
		 * @description Returns an enhanced view of the transaction, including info about metaprotocols in both inputs and outputs. Useful for deep inspection tools.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["tx_info_with_metaprotocols1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions/{tx_hash}/outputs/{output_index}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Output Info (Mempool-aware)
		 * @description Provides detailed information for a single transaction output, including its value, spend status, and any attached metadata such as Ordinal inscriptions, Runes, or BRC20 data.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_tx_output_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/wallet/addresses/{address}/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Wallet Satoshi Activity by Address (Mempool-aware)
		 * @description Returns all transactions for a given address or script pubkey, allowing insight into when the balance increased, decreased, or remained the same. Mempool data is included by default. This endpoint supports customization to narrow results by time, transaction type, or ordering, enabling tailored historical views.
		 */
		get: operations["wallet_satoshi_activity_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/wallet/addresses/{address}/activity/metaprotocols": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Metaprotocol Activity by Address
		 * @description Return all transactions where the specified address has satoshi and/or metaprotocols activity. Supported metaprotocols: runes, inscriptions.
		 */
		get: operations["wallet_metaprotocol_activity_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/wallet/addresses/{address}/balance/historical": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Historical Satoshi Balance by Address
		 * @description Returns the historical satoshi balances, itemized by block and including USD price.
		 */
		get: operations["wallet_historical_satoshi_balance_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/wallet/addresses/{address}/inscriptions/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inscription Activity by Address (Mempool-aware)
		 * @description Returns all inscription-related transactions involving a specific address. Can be filtered by activity type (send, receive, self-transfer), narrowed to a specific inscription, and sorted chronologically. Mempool data is included by default. Useful for building dashboards, tracking user behavior, or filtering unwanted spam activity.
		 */
		get: operations["wallet_inscription_activity_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/wallet/addresses/{address}/runes/activity": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune Activity by Address (Mempool-aware)
		 * @description Return all transactions where the specified address has rune activity, with the option to filter by a specific rune kind. Mempool data is included by default.
		 */
		get: operations["wallet_rune_activity_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/wallet/addresses/{address}/statistics": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Address Statistics (Mempool-aware)
		 * @description Returns all current statistics of the address: total txs the address was involved in, total unspent outputs controlled by the address, current satoshi, control of any runes and inscription balance, distinguishing between confirmed and pending (still in the mempool) data.
		 */
		get: operations["wallet_address_statistics"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/block/latest": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Latest Block
		 * @description Returns the most recent block on the Bitcoin blockchain.
		 *     Useful for syncing frontends, indexing latest chain state, or watching for new block activity. Set `verbose=true` for full TX data without need for separate calls.
		 */
		get: operations["rpc_latest_block"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/block/range/{start_height}/{end_height}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Range Info
		 * @description Fetches basic info for a contiguous block range (start and end height).
		 */
		get: operations["rpc_block_range_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/block/recent": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Block Info
		 * @description Returns the most recent blocks from the tip going backward. Useful to view or stream recent blockchain activity.
		 */
		get: operations["rpc_recent_blocks_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/block/recent/{count}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Block Info Count
		 * @description Returns a list of the most recently mined blocks, limited by count. It provides a snapshot of the latest blockchain activity, starting from the current chain tip and going backward.
		 */
		get: operations["rpc_recent_blocks_info_count"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/block/{height_or_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Info
		 * @description Retrieve full or summary information for a specific block.
		 *     Useful for analyzing individual blocks or resolving TX data inline.
		 */
		get: operations["rpc_block_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/block/{height_or_hash}/miner": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Miner Info
		 * @description Returns metadata about the miner for a specific block.
		 *     Includes name, known addresses, icon, and associated tags.
		 *     Useful for research or visual analytics on pool distribution.
		 */
		get: operations["rpc_block_miner_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/block/{height_or_hash}/volume": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Volume
		 * @description Returns total transaction output volume (in satoshis) for a block.
		 *     This provides insight into economic activity, not just block size.
		 */
		get: operations["rpc_block_volume"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/general/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Blockchain Info
		 * @description Returns global node and chain info: block count, difficulty, pruning, fork status, etc.
		 *     Useful for diagnostics, UI status panels, or infrastructure monitoring.
		 */
		get: operations["rpc_chain_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/mempool/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Info
		 * @description Returns size, memory usage, fee thresholds, and Replace-By-Fee (RBF) state.
		 *     Useful for gauging current congestion and planning fees accordingly.
		 */
		get: operations["rpc_mempool_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/mempool/transactions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transactions
		 * @description Returns a list of transaction IDs currently in the mempool.
		 */
		get: operations["rpc_mempool_transactions"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/mempool/transactions/{tx_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transaction Info
		 * @description Returns full information for a mempool transaction: fees, inputs, Replace-By-Fee (RBF) flags, unconfirmed descendants, etc.
		 *     Useful for inspecting transactions or verifying status.
		 */
		get: operations["rpc_mempool_transaction_details"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/mempool/transactions/{tx_hash}/ancestors": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transaction Ancestors
		 * @description Lists ancestor TXs for a mempool TX, by a TX hash.
		 *     Useful for evaluating chains of unconfirmed transactions and replacability via Replace-By-Fee (RBF).
		 */
		get: operations["rpc_mempool_transaction_ancestors"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/mempool/transactions/{tx_hash}/descendants": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transaction Descendants
		 * @description Lists descendant TXs for a mempool TX, by a TX hash.
		 *     Useful for evaluating chains of unconfirmed transactions and replacability via Replace-By-Fee (RBF).
		 */
		get: operations["rpc_mempool_transaction_descendants"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/batch": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Transaction Info Batch
		 * @description Takes up to 50 TX hashes and returns verbose TX data in a single call. Useful for dashboards or syncing nodes without hitting rate limits.
		 */
		post: operations["rpc_transaction_info_batch"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/decode": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Decode Transaction
		 * @description Takes a raw TX hex and returns structured JSON.
		 *     Useful when building or validating raw transactions.
		 */
		post: operations["rpc_transaction_decode"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/estimatefee/{blocks}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Estimate Fee
		 * @description Estimate approximate fee per kilobyte (kB) needed for a transaction.
		 *     Useful for setting dynamic fee rates in wallets or broadcast tools.
		 */
		get: operations["rpc_estimate_smart_fee"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/hex": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Transaction Info Hex
		 * @description Same as `/transaction/decode` in that it takes a raw TX hex and returns structured JSON, but it also fetches blockchain metadata such as confirmations and block height.
		 */
		post: operations["rpc_transaction_info_hex"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/psbt/decode": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Decode PSBT
		 * @description Takes a signed PSBT hex and returns the internal structure. Covers UTXO metadata, BIP32 deriv paths, inputs/outputs, etc.
		 *     Useful for hardware wallet or multisig integrations.
		 */
		post: operations["rpc_psbt_decode"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/recent": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Transactions
		 * @description Returns a list of recent on-chain transactions.
		 *     Useful for retrieving lastest transactions or monitoring new, on-chain activity by block height.
		 */
		get: operations["rpc_transaction_recent"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/recent/{count}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Transactions Count
		 * @description Returns a list of recent on-chain transactions, specified by count.
		 *     Useful for retrieving lastest transactions or monitoring new, on-chain activity by block height.
		 */
		get: operations["rpc_transaction_recent_count"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/submit": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Send Transaction
		 * @description Pushes a signed raw transaction to the network.
		 */
		post: operations["rpc_submit_transaction"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/rpc/transaction/{tx_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Info
		 * @description This endpoint returns detailed information for a specific Bitcoin transaction, by its unique transaction hash.
		 */
		get: operations["rpc_transaction_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/eventmanager/healthcheck": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Healthcheck
		 * @description Healthcheck
		 */
		get: operations["EventManagerService_Healthcheck"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/eventmanager/triggers": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Triggers
		 * @description List all triggers
		 *
		 *      Returns all individual triggers associated with your event managers.
		 */
		get: operations["EventManagerService_ListTriggers"];
		put?: never;
		/**
		 * Create Trigger
		 * @description Create a new trigger
		 *
		 *      Adds a trigger to a manager to listen for specific blockchain activity.
		 */
		post: operations["EventManagerService_CreateTrigger"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/eventmanager/triggers/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Trigger
		 * @description Fetch trigger details
		 *
		 *      Returns metadata and configuration for a specific trigger identified by its unique `id`.
		 */
		get: operations["EventManagerService_GetTrigger"];
		/**
		 * Update Trigger
		 * @description Update a trigger
		 *
		 *      Allows modification of a trigger's properties identified by its unique `id`.
		 */
		put: operations["EventManagerService_UpdateTrigger"];
		post?: never;
		/**
		 * Delete Trigger
		 * @description Remove a trigger
		 *
		 *      Deletes a specific trigger identified by its unique `id`, leaving the event manager intact.
		 */
		delete: operations["EventManagerService_DeleteTrigger"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/eventmanager/triggers/trigger-condition-options": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Trigger Condition Options
		 * @description Fetch picklist options by name
		 *
		 *      Returns a list of picklist options identified by its unique `name`.
		 */
		get: operations["EventManagerService_GetTriggerConditionOptions"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/eventmanager/logs/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Event Log
		 * @description Fetch a single event log by ID
		 *
		 *      Returns the payload, status, and response of a specific event log identified by its unique `id`.
		 */
		get: operations["EventManagerService_GetEventLog"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/eventmanager/logs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Event Logs
		 * @description Fetch all event logs
		 *
		 *      Returns a list of event logs that have been generated from event manager triggers. Each log captures a payload, response status, and other metadata.
		 */
		get: operations["EventManagerService_ListEventLogs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/dexs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Supported DEX options
		 * @description Retrieves a list of all options for decentralized exchanges (DEXs) currently indexed and supported by the API. This serves as the discovery endpoint for clients to programmatically identify valid DEX identifiers used in other endpoints like trades or OHLC queries. The all option represents all DEXs combined
		 */
		get: operations["mkt-dexs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/dexs/ohlc/{dex}/{symbol}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune OHLC data
		 * @description Returns candlestick-formatted market data (Open, High, Low, Close, Volume) for a specific DEX and Rune pair, segmented by time intervals. This is ideal for price charting, trend analysis, and historical performance. Data is sourced from both confirmed blocks and optionally from the mempool, depending on configuration.
		 */
		get: operations["mkt-dex-ohlc"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/dexs/trades/{dex}/{symbol}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune Trades for DEX
		 * @description Provides a time-series list of individual trades for a specified Rune pair on a given DEX, including granular data such as trade price (in satoshis), volume, block height, and buy/sell direction. Especially useful for high-frequency strategies or price feed services.
		 */
		get: operations["mkt-dex-trades"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/prices/batch": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * BTC prices by timestamp
		 * @description Returns BTC-USD prices for the provided list of UTC timestamps. Timestamps are matched against minute-aligned entries in the database.
		 */
		post: operations["mkt-btc-prices-by-timestamps"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/prices/runes/batch": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Rune prices by timestamp
		 * @description Returns Rune prices in USD and satoshi for the provided list of Rune ID <> UTC timestamps pairs.
		 */
		post: operations["mkt-rune-prices-by-timestamps"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/prices/runes/{rune_id}/{timestamp}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune price by timestamp
		 * @description Returns Rune price in USD and satoshi for the provided UTC timestamp.
		 */
		get: operations["mkt-rune-price-by-timestamp"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/prices/{timestamp}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * BTC price by timestamp
		 * @description Returns BTC-USD price for the provided UTC timestamp.
		 */
		get: operations["mkt-btc-price-by-timestamp"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/markets/runes": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune Registry
		 * @description Returns metadata for Rune assets registered and etched into the Bitcoin blockchain. This includes human-readable name, symbol, divisibility (decimals), and genesis transaction. Filtering by `rune_id` narrows the query to a specific asset.
		 */
		get: operations["mkt-dex"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/address/{address}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Address
		 * @description Returns details about an address. Available fields: address, chain_stats, and mempool_stats. chain_stats and mempool_stats each contain an object with tx_count, funded_txo_count, funded_txo_sum, spent_txo_count, and spent_txo_sum.
		 */
		get: operations["esplora_address_details"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/address/{address}/txs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Address Transactions
		 * @description Get transaction history for the specified address/scripthash, sorted with newest first. Returns up to 50 mempool transactions plus the first 25 confirmed transactions. You can request more confirmed transactions using an after_txid query parameter.
		 */
		get: operations["esplora_address_transactions"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/address/{address}/txs/chain": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Address Transactions Chain
		 * @description Get confirmed transaction history for the specified address/scripthash, sorted with newest first. Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.
		 */
		get: operations["esplora_address_transactions_chain"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/address/{address}/txs/mempool": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Address Transactions Mempool
		 * @description Get unconfirmed transaction history for the specified address/scripthash. Returns up to 50 transactions (no paging).
		 */
		get: operations["esplora_address_transactions_mempool"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/address/{address}/utxo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Address UTXOs
		 * @description Get the list of unspent transaction outputs associated with the address/scripthash. Available fields: txid, vout, value, and status (with the status of the funding tx).
		 */
		get: operations["esplora_address_utxos"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block/{hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block
		 * @description Returns details about a block.
		 */
		get: operations["esplora_block_details"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block/{hash}/header": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Header
		 * @description Returns the hex-encoded block header.
		 */
		get: operations["esplora_block_header"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block/{hash}/status": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Status
		 * @description Returns the confirmation status of a block. Available fields: in_best_chain (boolean, false for orphaned blocks), next_best (the hash of the next block, only available for blocks in the best chain).
		 */
		get: operations["esplora_block_status"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block/{hash}/txs/{start_index}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get block transactions
		 * @description Returns a list of transactions in the block (up to 25 transactions beginning at start_index). Transactions returned here do not have the status field, since all the transactions share the same block and confirmation status.
		 */
		get: operations["esplora_block_transactions"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block/{hash}/txids": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Transaction IDs
		 * @description Returns a list of all txids in the block.
		 */
		get: operations["esplora_block_txids"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block/{hash}/txid/{index}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Transaction ID
		 * @description Returns the transaction at index :index within the specified block.
		 */
		get: operations["esplora_block_txid_by_index"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block/{hash}/raw": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Raw
		 * @description Returns the raw block representation in binary.
		 */
		get: operations["esplora_block_raw"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/blocks/{start_height}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Blocks
		 * @description Returns details on the past 10 blocks. If :startHeight is specified, the 10 blocks before (and including) :startHeight are returned.
		 */
		get: operations["esplora_blocks"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/block-height/{height}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Height
		 * @description Returns the hash of the block currently at :height.
		 */
		get: operations["esplora_block_hash_by_height"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/blocks/tip/height": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Tip Height
		 * @description Returns the height of the last block.
		 */
		get: operations["esplora_block_tip_height"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/blocks/tip/hash": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Tip Hash
		 * @description Returns the hash of the last block.
		 */
		get: operations["esplora_block_tip_hash"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/mempool": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool
		 * @description Returns current mempool backlog statistics.
		 */
		get: operations["esplora_mempool_stats"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/mempool/txids": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transaction IDs
		 * @description Get the full list of txids in the mempool as an array. The order of the txids is arbitrary and does not match bitcoind.
		 */
		get: operations["esplora_mempool_txids"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/mempool/recent": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Recent
		 * @description Get a list of the last 10 transactions to enter the mempool. Each transaction object contains simplified overview data, with the following fields: txid, fee, vsize, and value.
		 */
		get: operations["esplora_mempool_recent"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction
		 * @description Returns details about a transaction. Available fields: txid, version, locktime, size, weight, fee, vin, vout, and status.
		 */
		get: operations["esplora_transaction_details"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/hex": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Hex
		 * @description Returns a transaction serialized as hex.
		 */
		get: operations["esplora_transaction_hex"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/merkleblock-proof": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Merkleblock Proof
		 * @description Returns a merkle inclusion proof for the transaction using bitcoind's merkleblock format.
		 */
		get: operations["esplora_transaction_merkleblock_proof"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/merkle-proof": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Merkle Proof
		 * @description Returns a merkle inclusion proof for the transaction using Electrum's blockchain.transaction.get_merkle format.
		 */
		get: operations["esplora_transaction_merkle_proof"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/outspend/{vout}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Outspend
		 * @description Returns the spending status of a transaction output. Available fields: spent (boolean), txid (optional), vin (optional), and status (optional, the status of the spending tx).
		 */
		get: operations["esplora_transaction_outspend"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/outspends": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Outspends
		 * @description Returns the spending status of all transaction outputs.
		 */
		get: operations["esplora_transaction_outspends"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/raw": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Raw
		 * @description Returns a transaction as binary data.
		 */
		get: operations["esplora_transaction_raw"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/rbf": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction RBF Timeline
		 * @description Returns the RBF tree timeline of a transaction.
		 */
		get: operations["esplora_transaction_rbf_timeline"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx/{txid}/status": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Status
		 * @description Returns the confirmation status of a transaction. Available fields: confirmed (boolean), block_height (optional), and block_hash (optional).
		 */
		get: operations["esplora_transaction_status"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/esplora/tx": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Transaction
		 * @description Broadcast a raw transaction to the network. The transaction should be provided as hex in the request body. The txid will be returned on success.
		 */
		post: operations["esplora_broadcast_transaction"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		ActivityByAddress: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Height of block containing the satoshi activity.
			 */
			height: number;
			sat_activity: components["schemas"]["SatActivity"];
			/** @description Hash of transaction containing the satoshi activity. */
			tx_hash: string;
		};
		/** @enum {string} */
		ActivityKindByAddress: "self_transfer" | "increase" | "decrease";
		AddressAndRuneAmount: {
			/** @description Address-encoding of the script pubkey. */
			address?: string | null;
			/** @description Amount of runes. */
			amount: string;
			/** @description Script pubkey. */
			script_pubkey: string;
		};
		AddressStatistics: {
			/** @description Existence of runes controlled by the address. */
			runes: boolean;
			/** @description Current satoshi balance controlled by the address. */
			sat_balance: string;
			/**
			 * Format: int64
			 * @description Total number of inputs (spent outputs) controlled by the address.
			 */
			total_inputs: number;
			/**
			 * Format: int64
			 * @description Total number of inscriptions currently controlled by the address.
			 */
			total_inscriptions: number;
			/**
			 * Format: int64
			 * @description Total number of spent or unspent outputs controlled by the address.
			 */
			total_outputs: number;
			/** @description Total number of sats in inputs controlled by the address. */
			total_sat_in_inputs: number;
			/** @description Total number of sats in spent or unspent outputs controlled by the address. */
			total_sat_in_outputs: number;
			/**
			 * Format: int64
			 * @description Total number of transactions where the address controlled at least an input or an output.
			 */
			total_txs: number;
			/**
			 * Format: int64
			 * @description Total number of unspent outputs (UTxOs) controlled by the address.
			 */
			total_utxos: number;
		};
		BlockInfo: {
			/**
			 * @description Base64-encoding of script pubkey used in coinbase transaction input.
			 * @example A8tlDQgvVmlhQlRDLyz6vm1tPXaDOuJgXZs6zuF9J7o+V55Fu/UWyF9S+hZG5d/z+c8QAAAAAAAAABDThC4BY8HxNM7fc9SQsQ8AAAAAAA==
			 */
			coinbase_tag: string;
			/**
			 * @description Block hash.
			 * @example 0000000000000000000290db65621592a96224ecbe92ae22532a35dc40213471
			 */
			hash: string;
			/**
			 * Format: int64
			 * @description Block height.
			 * @example 875075
			 */
			height: number;
			/** @description Whether any of the transactions in the block involved metaprotocols. */
			metaprotocols: components["schemas"]["Metaprotocol"][];
			/**
			 * @description Miner name.
			 * @example ViaBTC
			 */
			miner_name?: string | null;
			/**
			 * Format: int64
			 * @description Block size in bytes.
			 * @example 1865672
			 */
			size: number;
			/**
			 * @description The timestamp of the block, as claimed by the miner, in UTC format.
			 * @example 2024-12-16 22:48:06
			 */
			timestamp: string;
			/**
			 * @description Total fees paid by all transactions in the block, in satoshis.
			 * @example 2110512
			 */
			total_fees: string;
			/**
			 * Format: int32
			 * @description Total number of transactions.
			 * @example 1849
			 */
			total_txs: number;
			/**
			 * @description Total number of satoshis that went through this block, minus fees.
			 * @example 240371600038
			 */
			total_volume: string;
			/**
			 * Format: int32
			 * @description The timestamp of the block, as claimed by the miner.
			 * @example 1734389286
			 */
			unix_timestamp: number;
			/**
			 * Format: int64
			 * @description Number of weight units (WU) of the block.
			 * @example 3993329
			 */
			weight_units: number;
		};
		/** @description For transactions within a block, these are the lowest, median and highest
		 *     satoshis per virtual-byte values. */
		BlockSatsPerVb: {
			/**
			 * Format: int64
			 * @description Highest sat/vB value of the transactions within the block
			 * @example 255
			 */
			max: number;
			/**
			 * Format: int64
			 * @description Median sat/vB value of the transactions within the block
			 * @example 15
			 */
			median: number;
			/**
			 * Format: int64
			 * @description Lowest sat/vB value of the transactions within the block
			 * @example 11
			 */
			min: number;
		};
		Brc20Holder: {
			address?: string | null;
			balance: string;
			script_pubkey: string;
		};
		Brc20Info: {
			deploy_inscription: string;
			/** Format: int64 */
			holders: number;
			minted_supply: string;
			terms: components["schemas"]["Brc20Terms"];
			ticker: string;
			ticker_hex: string;
		};
		Brc20Terms: {
			/** Format: int32 */
			dec: number;
			limit: string;
			max: string;
			self_mint: boolean;
		};
		Brc20Ticker: string;
		ChainTip: {
			/**
			 * @description The hash of the block
			 * @example 0000000000000000000a7f3b7b6b6e1d9a18db65a3b4a3f4f3bcb2e1f1b2d3e7
			 */
			block_hash: string;
			/**
			 * Format: int64
			 * @description The height of the block in the blockchain
			 * @example 707000
			 */
			block_height: number;
		};
		ContentBody: {
			/** @description Base64-encoded representation of a slice of the inscription content body. All types supported. */
			content_body_page: string;
			/**
			 * Format: int64
			 * @description Number of bytes remaining in the inscription content body.
			 */
			remaining_bytes: number;
			/**
			 * Format: int64
			 * @description Number of bytes in entire inscription content body.
			 */
			total_length: number;
		};
		DeprecatedRuneUtxoByAddress: {
			/** Format: int64 */
			confirmations: number;
			/** Format: int64 */
			height: number;
			rune_amount: string;
			satoshis: string;
			txid: string;
			/** Format: int32 */
			vout: number;
		};
		DotswapRuneTrades: {
			/**
			 * Format: int64
			 * @description Block height.
			 */
			block_height: number;
			/**
			 * Format: int32
			 * @description Trade tx index in the block.
			 */
			trade_index: number;
			/** @description List of trades in the tx. */
			trades: components["schemas"]["Trade"][];
			/** @description Transaction hash. */
			tx_hash: string;
		};
		EstimatedBlock: {
			/**
			 * Format: int64
			 * @description Height of the estimated block
			 * @example 707001
			 */
			block_height: number;
			sats_per_vb: components["schemas"]["BlockSatsPerVb"];
		};
		EtchAndPremine: {
			/** @description Amount of premined runes. */
			premined_amount?: string | null;
			/** @description Rune ID. */
			rune_id: string;
		};
		FromInscriptionLocation: {
			/** @description Address-encoding of the script pubkey at which the input containing the inscription resides. */
			address?: string | null;
			/**
			 * Format: int32
			 * @description Index of the input containing the inscription.
			 */
			input_index: number;
			/**
			 * Format: int64
			 * @description Offset of the inscribed satoshi within the input.
			 */
			sat_offset: number;
			/** @description Script pubkey at which the input containing the inscription resides. */
			script_pubkey: string;
		};
		HistoricalSatBalanceByAddress: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Block height.
			 */
			height: number;
			/** @description Satoshi balance of the address at the end of this block. */
			sat_balance: string;
			/** @description The timestamp of the block, as claimed by the miner, in UTC format. */
			timestamp: string;
			/**
			 * Format: int32
			 * @description The timestamp of the block, as claimed by the miner, in UNIX format.
			 */
			unix_timestamp: number;
			/** @description USD balance if sat balance was exchanged. The exchange rate is that between USD and BTC at the time the block was mined. */
			usd_balance: string;
		};
		InscriptionActivity: {
			/** @description List of inscriptions which the script gained control over. */
			received: components["schemas"]["InscriptionActivityByTx"][];
			/** @description List of inscriptions that were self-transferred in the transaction. */
			self_transferred: components["schemas"]["InscriptionActivityByTx"][];
			/** @description List of inscriptions which the script lost control of. */
			sent: components["schemas"]["InscriptionActivityByTx"][];
		};
		InscriptionActivityByAddress: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Height of block containing the inscription activity.
			 */
			height: number;
			inscription_activity: components["schemas"]["InscriptionActivity"];
			/** @description Hash of transaction containing the inscription activity. */
			tx_hash: string;
		};
		InscriptionActivityByBlock: {
			from?: components["schemas"]["FromInscriptionLocation"] | null;
			/** @description String representation of the inscription ID, whose first coordinate is the reveal transaction hash, and the second coordinate is the index of inscription in the reveal transaction. */
			inscription_id: string;
			to: components["schemas"]["ToInscriptionLocation"];
			/** @description Transaction in which the activity occurred */
			tx_hash: string;
		};
		InscriptionActivityByTx: {
			from?: components["schemas"]["FromInscriptionLocation"] | null;
			/** @description String representation of the inscription ID, whose first coordinate is the reveal transaction hash, and the second coordinate is the index of inscription in the reveal transaction. */
			inscription_id: string;
			to: components["schemas"]["ToInscriptionLocation"];
		};
		/** @enum {string} */
		InscriptionActivityKindByAddress: "self_transfer" | "send" | "receive";
		InscriptionAndOffset: {
			inscription_id: string;
			/** Format: int64 */
			offset: number;
		};
		InscriptionByAddress: {
			/** @description String representation of the inscription ID, whose first coordinate is the reveal
			 *     transaction hash, and the second coordinate is the index of inscription in the reveal
			 *     transaction. */
			inscription_id: string;
			/** @description Total number of satoshis in the UTxO containing the inscription. */
			satoshis: string;
			/**
			 * Format: int64
			 * @description Block height of the UTxO containing the inscription.
			 */
			utxo_block_height: number;
			/**
			 * Format: int64
			 * @description Number of confirmations of the block where the UTxO containing the inscription was created.
			 */
			utxo_confirmations: number;
			/**
			 * Format: int64
			 * @description Inscribed sat offset in the UTxO containing it.
			 */
			utxo_sat_offset: number;
			/** @description Transaction ID of the UTxO containing the inscription. */
			utxo_txid: string;
			/**
			 * Format: int32
			 * @description Output index of the UTxO containing the inscription.
			 */
			utxo_vout: number;
		};
		InscriptionInfo: {
			/** @description Symbol of collection that the inscription belongs to. */
			collection_symbol?: string | null;
			/** @description Preview of inscription content body raw data. Max: 100 bytes.
			 *     Supported types: "text/plain", "text/plain;charset=utf-8", "application/json". */
			content_body_preview?: string | null;
			/**
			 * Format: int64
			 * @description Length of entire inscription content body bytes array.
			 */
			content_length: number;
			/** @description Type of the content body. */
			content_type?: string | null;
			/**
			 * Format: int64
			 * @description Block height of the reveal transaction.
			 */
			created_at: number;
			current_location: components["schemas"]["InscriptionLocation"];
			/** @description String representation of the inscription ID, whose first coordinate is the reveal
			 *     transaction hash, and the second coordinate is the index of inscription in the reveal
			 *     transaction. */
			inscription_id: string;
			/**
			 * Format: int64
			 * @description Global inscription number.
			 */
			inscription_number?: number | null;
		};
		InscriptionLocation: {
			/** @description Address-encoding of the script pubkey currenty controlling the inscription. */
			address?: string | null;
			/** @description Script pubkey currently controlling the inscription. */
			script_pubkey: string;
			/**
			 * Format: int64
			 * @description Inscribed sat offset in the UTxO containing the inscription.
			 */
			utxo_sat_offset: number;
			/** @description Transaction ID of the UTxO containing the inscription. */
			utxo_txid: string;
			/**
			 * Format: int32
			 * @description Output index of the UTxO containing the inscription.
			 */
			utxo_vout: number;
		};
		/** @enum {string} */
		InscriptionTxKind:
			| "inscribe"
			| "transfer"
			| "inscribe_and_spent_as_fee"
			| "spent_as_fee";
		InvolvedTransaction: {
			/**
			 * Format: int64
			 * @description Height of the block which included the transaction
			 */
			height: number;
			/** @description Address/pubkey controlled an input UTxO */
			input: boolean;
			/** @description Address/pubkey controlled an output UTxO */
			output: boolean;
			/** @description The transaction's txid */
			tx_hash: string;
		};
		MagicEdenCollection: {
			chain: string;
			createdAt: string;
			description: string;
			discordLink: string;
			imageURI: string;
			inscriptionIcon: string;
			labels: string[];
			max_inscription_number: string;
			min_inscription_number: string;
			name: string;
			supply: unknown;
			symbol: string;
			twitterLink: string;
			websiteLink: string;
		};
		MagicEdenCollectionStats: {
			floorPrice: string;
			inscriptionNumberMax: string;
			inscriptionNumberMin: string;
			owners: string;
			pendingTransactions: string;
			supply: string;
			symbol: string;
			totalListed: string;
			totalVolume: string;
		};
		MagicEdenRuneTrades: {
			/**
			 * Format: int64
			 * @description Block height.
			 */
			block_height: number;
			/** @description Whether the tx was mempool-protected. */
			mempool_protected?: boolean | null;
			/**
			 * Format: int64
			 * @description Service fees for this trade.
			 */
			service_fee?: number | null;
			/**
			 * Format: int32
			 * @description Trade tx index in the block.
			 */
			trade_index: number;
			/** @description List of trades in the tx. */
			trades: components["schemas"]["Trade"][];
			/** @description Transaction hash. */
			tx_hash: string;
		};
		MagicEdenToken: {
			chain: string;
			collection: components["schemas"]["MagicEdenTokenCollection"];
			collectionSymbol: string;
			contentPreviewURI: string;
			contentType: string;
			contentURI: string;
			displayName: string;
			genesisTransaction: string;
			genesisTransactionBlockHash: string;
			/** Format: int64 */
			genesisTransactionBlockHeight: number;
			genesisTransactionBlockTime: string;
			id: string;
			/** Format: int64 */
			inscriptionNumber: number;
			itemType: string;
			/** Format: int64 */
			lastSalePrice: number;
			listed: boolean;
			listedAt: string;
			listedForMint: boolean;
			/** Format: int32 */
			listedMakerFeeBp: number;
			/** Format: int64 */
			listedPrice: number;
			listedSellerReceiveAddress: string;
			location: string;
			locationBlockHash: string;
			/** Format: int64 */
			locationBlockHeight: number;
			locationBlockTime: string;
			meta: components["schemas"]["MagicEdenTokenMeta"];
			output: string;
			/** Format: int64 */
			outputValue: number;
			owner: string;
			sacAddress: string;
			/** Format: int64 */
			sat: number;
			/** Format: int64 */
			satBlockHeight: number;
			satBlockTime: string;
			satName: string;
			satRarity: string;
			satributes: string[];
			updatedAt: string;
		};
		MagicEdenTokenCollection: {
			chain: string;
			createdAt: string;
			creatorTipsAddress: string;
			description: string;
			disableRichThumbnailGeneration: boolean;
			discordLink: string;
			enableCollectionOffer: boolean;
			imageURI: string;
			inscriptionIcon: string;
			labels: string[];
			name: string;
			overrideContentType: string;
			/** Format: int64 */
			supply: number;
			symbol: string;
			twitterLink: string;
			websiteLink: string;
		};
		MagicEdenTokenMeta: {
			attributes?:
				| components["schemas"]["MagicEdenTokenMetaAttribute"][]
				| null;
			name: string;
		};
		MagicEdenTokenMetaAttribute: {
			trait_type: string;
			value: string;
		};
		MempoolLastUpdated: {
			chain_tip: components["schemas"]["ChainTip"];
			/** @description Information about any estimated blocks from the mempool that were indexed in addition to the mainchain */
			estimated_blocks: components["schemas"]["EstimatedBlock"][];
			/** @description Timestamp of the indexed mempool snapshot, if any estimated blocks from the mempool have been indexed */
			mempool_timestamp?: string | null;
		};
		/** @enum {string} */
		Metaprotocol: "inscriptions" | "runes" | "brc20";
		/**
		 * @default height
		 * @enum {string}
		 */
		OrderBy: "height" | "amount";
		/**
		 * @default asc
		 * @enum {string}
		 */
		OrderParam: "asc" | "desc";
		PaginatedActivityByAddress: {
			data: components["schemas"]["ActivityByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedBrc20Holder: {
			data: components["schemas"]["Brc20Holder"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedBrc20Ticker: {
			data: components["schemas"]["Brc20Ticker"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedContentBody: {
			data: components["schemas"]["ContentBody"];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedDeprecatedRuneUtxoByAddress: {
			data: components["schemas"]["DeprecatedRuneUtxoByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedDotswapRuneTrades: {
			data: components["schemas"]["DotswapRuneTrades"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedHistoricalSatBalanceByAddress: {
			data: components["schemas"]["HistoricalSatBalanceByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedInscriptionActivityByAddress: {
			data: components["schemas"]["InscriptionActivityByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedInscriptionActivityByBlock: {
			data: components["schemas"]["InscriptionActivityByBlock"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedInscriptionActivityByTx: {
			data: components["schemas"]["InscriptionActivityByTx"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedInscriptionByAddress: {
			data: components["schemas"]["InscriptionByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedInscriptionsByCollectionSymbol: {
			data: string[];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedInvolvedTransaction: {
			data: components["schemas"]["InvolvedTransaction"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedMagicEdenRuneTrades: {
			data: components["schemas"]["MagicEdenRuneTrades"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedRuneActivityByAddress: {
			data: components["schemas"]["RuneActivityByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedRuneHolder: {
			data: components["schemas"]["RuneHolder"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedRuneIdAndName: {
			data: components["schemas"]["RuneIdAndName"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedRuneUtxo: {
			data: components["schemas"]["RuneUtxo"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedRuneUtxoByAddress: {
			data: components["schemas"]["RuneUtxoByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedTransferInscriptionByAddress: {
			data: components["schemas"]["TransferInscriptionByAddress"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedTxByInscription: {
			data: components["schemas"]["TxByInscription"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedTxsByBlock: {
			data: components["schemas"]["TxByBlock"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedTxsByRune: {
			data: components["schemas"]["TxByRune"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		PaginatedUtxo: {
			data: components["schemas"]["Utxo"][];
			last_updated: components["schemas"]["ChainTip"];
			next_cursor?: string | null;
		};
		RuneActivity: {
			/** @description List of runes and amounts, corresponding to decreased balances for this address. */
			decreased_balances: components["schemas"]["RuneAndAmount"][];
			etched_rune?: components["schemas"]["EtchAndPremine"] | null;
			/** @description List of runes and amounts, corresponding to increased balances for this address. */
			increased_balances: components["schemas"]["RuneAndAmount"][];
			minted?: components["schemas"]["RuneAndAmount"] | null;
			/** @description List of runes that were self-transferred. */
			self_transfers: components["schemas"]["RuneAndAmount"][];
		};
		RuneActivityByAddress: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Height of block containing the rune activity.
			 */
			height: number;
			rune_activity: components["schemas"]["RuneActivity"];
			/** @description Hash of transaction containing the rune activity. */
			tx_hash: string;
		};
		/** @enum {string} */
		RuneActivityKindByAddress: "self_transfer" | "increase" | "decrease";
		RuneAndAmount: {
			amount: string;
			rune_id: string;
		};
		RuneHolder: {
			address?: string | null;
			balance: string;
			script_pubkey: string;
		};
		RuneIdAndName: {
			id: string;
			spaced_name: string;
		};
		RuneInfo: {
			circulating_supply: string;
			/**
			 * Format: int32
			 * @description If no divisibility was specified, then this equals 0
			 */
			divisibility: number;
			etching_cenotaph: boolean;
			/** Format: int64 */
			etching_height: number;
			etching_tx: string;
			id: string;
			max_supply: string;
			/** Format: int64 */
			mints: number;
			name: string;
			premine?: string | null;
			spaced_name: string;
			symbol?: string | null;
			terms: components["schemas"]["Terms"];
			/** Format: int64 */
			unique_holders: number;
		};
		RuneUtxo: {
			address?: string | null;
			/** Format: int64 */
			confirmations: number;
			/** Format: int64 */
			height: number;
			rune_amount: string;
			satoshis: string;
			script_pubkey: string;
			txid: string;
			/** Format: int32 */
			vout: number;
		};
		RuneUtxoByAddress: {
			/** Format: int64 */
			confirmations: number;
			/** Format: int64 */
			height: number;
			runes: components["schemas"]["RuneAndAmount"][];
			satoshis: string;
			txid: string;
			/** Format: int32 */
			vout: number;
		};
		SatActivity: {
			/** @description Amount of satoshis involved in the activity. */
			amount: string;
			kind: components["schemas"]["ActivityKindByAddress"];
		};
		Terms: {
			amount_per_mint?: string | null;
			end_height?: string | null;
			end_offset?: string | null;
			mint_txs_cap?: string | null;
			start_height?: string | null;
			start_offset?: string | null;
		};
		TimestampedAddressStatistics: {
			data: components["schemas"]["AddressStatistics"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedBlock: {
			data: components["schemas"]["BlockInfo"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedBrc20Info: {
			data: components["schemas"]["Brc20Info"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedBrc20Quantities: {
			data: {
				[key: string]: string;
			};
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedCollectionMetadataByInscription: {
			data: components["schemas"]["MagicEdenCollection"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedCollectionMetadataBySymbol: {
			data: components["schemas"]["MagicEdenCollection"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedCollectionStatsBySymbol: {
			data: components["schemas"]["MagicEdenCollectionStats"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedInscriptionInfo: {
			data: components["schemas"]["InscriptionInfo"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedRuneInfo: {
			data: components["schemas"]["RuneInfo"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedRuneQuantities: {
			data: {
				[key: string]: string;
			};
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedSatoshis: {
			data: string;
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedTokenMetadataByInscription: {
			data: components["schemas"]["MagicEdenToken"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedTxInfo: {
			data: components["schemas"]["TxInfo"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedTxInfoMetaprotocols: {
			data: components["schemas"]["TxInfoMetaprotocols"];
			last_updated: components["schemas"]["ChainTip"];
		};
		TimestampedTxOutMetaprotocols: {
			data: components["schemas"]["TxOutMetaprotocols"];
			last_updated: components["schemas"]["ChainTip"];
		};
		ToInscriptionLocation: {
			/** @description Address-encoding of the script pubkey at which the output containing the inscription resides. */
			address?: string | null;
			/** @description Hash of tx producing the output containing the inscription. If this is the hash of the coinbase tx of the block, then the inscription was spent as fee in a tx in the block and therefore sent to the output of the coinbase tx controlled by the block miner. */
			output_txid: string;
			/**
			 * Format: int32
			 * @description Index of the output containing the inscription.
			 */
			output_vout: number;
			/**
			 * Format: int64
			 * @description Offset of the inscribed satoshi within the output.
			 */
			sat_offset: number;
			/** @description Script pubkey at which the output containing the inscription resides. */
			script_pubkey: string;
		};
		Trade: {
			/** @description Buyer address. */
			buyer_address?: string | null;
			/** @description Buyer script pubkey. */
			buyer_script_pubkey: string;
			/** @description Price for the runes exchanged in this trade, in sats. */
			price: string;
			/** @description Whether this trade was taken from a "sell" or a "buy" tx. */
			sell_tx?: boolean | null;
			/** @description Seller address. */
			seller_address?: string | null;
			/** @description Seller script pubkey. */
			seller_script_pubkey: string;
			/** @description Amount of runes exchanged in this trade. */
			traded_amount: string;
			/** @description Traded rune ID, in (etching block, etching tx) format. */
			traded_rune_id: string;
		};
		TransferInscriptionByAddress: {
			/** @description String representation of the inscription ID, whose first coordinate is the reveal transaction hash, and the second coordinate is the index of inscription in the reveal transaction. */
			inscription_id: string;
			/** @description Number of sats locked in the UTxO. */
			satoshis: string;
			ticker: string;
			/** @description Number of tokens locked in the UTxO. */
			token_amount: string;
			/**
			 * Format: int64
			 * @description Block height of the UTxO containing the inscription.
			 */
			utxo_block_height: number;
			/**
			 * Format: int64
			 * @description Number of confirmations of the block where the UTxO containing the inscription was created.
			 */
			utxo_confirmations: number;
			/**
			 * Format: int64
			 * @description Offset of inscribed sat in the UTxO containing it.
			 */
			utxo_sat_offset: number;
			/** @description Transaction ID of the UTxO containing the inscription. */
			utxo_txid: string;
			/**
			 * Format: int32
			 * @description Output index of the UTxO containing the inscription.
			 */
			utxo_vout: number;
		};
		TxByBlock: {
			/**
			 * @description Fees paid to the miner.
			 * @example 2504
			 */
			fees: string;
			/** @description Summary of the inputs of the transaction. Maximum 10 returned inputs. */
			inputs: components["schemas"]["TxInByBlock"][];
			/**
			 * @description List of supported metaprotocols involved in one or more transactions within the block.
			 * @example ["inscriptions", "runes"]
			 */
			metaprotocols: string;
			/** @description Summary of the outputs of the transaction. Maximum 10 returned outputs. */
			outputs: components["schemas"]["TxOutByBlock"][];
			/**
			 * Format: int64
			 * @description sats per vB of the transaction.
			 * @example 15
			 */
			sats_per_vb: number;
			/**
			 * Format: int64
			 * @description Total number of inputs. No inputs means this is the coinbase transaction.
			 * @example 5
			 */
			total_inputs: number;
			/**
			 * Format: int64
			 * @description Total number of outputs.
			 * @example 2
			 */
			total_outputs: number;
			/**
			 * @description Transaction hash.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			tx_hash: string;
			/**
			 * Format: int32
			 * @description Transaction index in block.
			 * @example 0
			 */
			tx_index: number;
			/**
			 * @description Total number of satoshis that went through this transaction, minus fees.
			 * @example 12345678
			 */
			volume: string;
		};
		TxByInscription: {
			from?: components["schemas"]["FromInscriptionLocation"] | null;
			/**
			 * Format: int64
			 * @description Height of block containing transaction that the inscription took part in.
			 */
			height: number;
			to: components["schemas"]["ToInscriptionLocation"];
			/** @description Transaction hash. */
			tx_hash: string;
			/**
			 * Format: int32
			 * @description Index of transaction (in block) that the inscription took part in.
			 */
			tx_index: number;
			type: components["schemas"]["InscriptionTxKind"];
		};
		TxByRune: {
			/** @description Number of runes burned in this transaction. */
			burned?: string | null;
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/** @description Whether this is the etching transaction of the rune. */
			etching_tx: boolean;
			/**
			 * Format: int64
			 * @description Height of block containing the rune activity.
			 */
			height: number;
			/** @description Number of runes minted in this transaction. */
			minted?: string | null;
			/** @description List of addresses that see their rune balances increase after the tx, and the corresponding amount. */
			receivers: components["schemas"]["AddressAndRuneAmount"][];
			/** @description List of addresses and the corresponding amount, of addresses whose rune balances do not change after the tx, as they are only involved in self-transfers. */
			self_transfers: components["schemas"]["AddressAndRuneAmount"][];
			/** @description List of addresses that see their rune balances decrease after the tx, and the corresponding amount. */
			senders: components["schemas"]["AddressAndRuneAmount"][];
			/** @description Hash of transaction containing the rune activity. */
			tx_hash: string;
		};
		TxIn: {
			/**
			 * @description Address-encoding of the script pubkey at which the input resides.
			 * @example bc1p5u4y8vdhn46adxhfv5scfv4c8myykw6r5uyzlavm42k4wgjewktq7xqcyr
			 */
			address?: string | null;
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the input resides.
			 * @example 5120a72a43b1b79d75d69ae9652184b2b83ec84b3b43a7082ff59baaad5722597596
			 */
			script_pubkey: string;
			/**
			 * @description Transaction hash of the UTxO.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			txid: string;
			/**
			 * Format: int32
			 * @description Output index of the UTxO.
			 * @example 0
			 */
			vout: number;
		};
		TxInByBlock: {
			/**
			 * @description Address-encoding of the script pubkey at which the input resides.
			 * @example bc1p5u4y8vdhn46adxhfv5scfv4c8myykw6r5uyzlavm42k4wgjewktq7xqcyr
			 */
			address?: string | null;
			/**
			 * @description Number of inscriptions in the UTxO.
			 * @example 1234567
			 */
			inscriptions: number;
			/**
			 * @description Number of rune kinds in the UTxO.
			 * @example 1234567
			 */
			runes: number;
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the input resides.
			 * @example 5120a72a43b1b79d75d69ae9652184b2b83ec84b3b43a7082ff59baaad5722597596
			 */
			script_pubkey: string;
			/**
			 * @description Transaction hash of the UTxO.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			txid: string;
			/**
			 * Format: int32
			 * @description Output index of the UTxO.
			 * @example 0
			 */
			vout: number;
		};
		TxInMetaprotocols: {
			/**
			 * @description Address-encoding of the script pubkey at which the input resides.
			 * @example bc1p5u4y8vdhn46adxhfv5scfv4c8myykw6r5uyzlavm42k4wgjewktq7xqcyr
			 */
			address?: string | null;
			/** @description List of inscription IDs and their offsets in this input. */
			inscriptions: components["schemas"]["InscriptionAndOffset"][];
			/** @description List of rune IDs and their amount in this input. */
			runes: components["schemas"]["RuneAndAmount"][];
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the input resides.
			 * @example 5120a72a43b1b79d75d69ae9652184b2b83ec84b3b43a7082ff59baaad5722597596
			 */
			script_pubkey: string;
			/**
			 * @description Transaction hash of the UTxO.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			txid: string;
			/**
			 * Format: int32
			 * @description Output index of the UTxO.
			 * @example 0
			 */
			vout: number;
		};
		TxInfo: {
			/**
			 * @description Block hash.
			 * @example 0000000000000000000290db65621592a96224ecbe92ae22532a35dc40213471
			 */
			block_hash: string;
			/**
			 * Format: int64
			 * @description Number of confirmations of the block.
			 * @example 3
			 */
			confirmations: number;
			/**
			 * @description Fees paid to the miner.
			 * @example 2504
			 */
			fees: string;
			/**
			 * Format: int64
			 * @description Block height.
			 * @example 875075
			 */
			height: number;
			/** @description List of inputs, in the same order as the transaction. */
			inputs: components["schemas"]["TxIn"][];
			/** @description List of supported metaprotocols involved in the transaction. Runes: etching, mint or edicts. Inscriptions: create or transfer. BRC-20 tokens: deploy, mint, transfer init or transfer. */
			metaprotocols: components["schemas"]["Metaprotocol"][];
			/** @description List of outputs, in the same order as the transaction. */
			outputs: components["schemas"]["TxOut"][];
			/**
			 * Format: int64
			 * @description sats per vB of the transaction.
			 * @example 15
			 */
			sats_per_vb: number;
			/**
			 * @description The timestamp of the block, as claimed by the miner, in UTC format.
			 * @example 2024-12-16 22:48:06
			 */
			timestamp: string;
			/**
			 * Format: int32
			 * @description Index of transaction in block.
			 * @example 123
			 */
			tx_index: number;
			/**
			 * Format: int32
			 * @description The timestamp of the block, as claimed by the miner.
			 * @example 1734389286
			 */
			unix_timestamp: number;
			/**
			 * @description Total number of satoshis that went through this transaction, minus fees.
			 * @example 12345678
			 */
			volume: string;
		};
		TxInfoMetaprotocols: {
			/**
			 * @description Block hash.
			 * @example 0000000000000000000290db65621592a96224ecbe92ae22532a35dc40213471
			 */
			block_hash: string;
			/**
			 * Format: int64
			 * @description Number of confirmations of the block.
			 * @example 3
			 */
			confirmations: number;
			/**
			 * @description Fees paid to the miner.
			 * @example 2504
			 */
			fees: string;
			/**
			 * Format: int64
			 * @description Block height.
			 * @example 875075
			 */
			height: number;
			/** @description List of inputs, in the same order as the transaction. */
			inputs: components["schemas"]["TxInMetaprotocols"][];
			/** @description Whether any of the transactions in the block involved metaprotocols. */
			metaprotocols: components["schemas"]["Metaprotocol"][];
			/** @description List of outputs, in the same order as the transaction. */
			outputs: components["schemas"]["TxOutMetaprotocols"][];
			/**
			 * Format: int64
			 * @description sats per vB of the transaction.
			 * @example 15
			 */
			sats_per_vb: number;
			/**
			 * @description The timestamp of the block, as claimed by the miner, in UTC format.
			 * @example 2024-12-16 22:48:06
			 */
			timestamp: string;
			/**
			 * Format: int32
			 * @description Index of transaction in block.
			 * @example 123
			 */
			tx_index: number;
			/**
			 * Format: int32
			 * @description The timestamp of the block, as claimed by the miner.
			 * @example 1734389286
			 */
			unix_timestamp: number;
			/**
			 * @description Total number of satoshis that went through this transaction, minus fees.
			 * @example 12345678
			 */
			volume: string;
		};
		TxOut: {
			/**
			 * @description Address-encoding of the script pubkey at which the output containing the inscription resides.
			 * @example bc1ppth27qnr74qhusy9pmcyeaelgvsfky6qzquv9nf56gqmte59vfhqwkqguh
			 */
			address?: string | null;
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the output containing the inscription resides.
			 * @example 51200aeeaf0263f5417e40850ef04cf73f43209b13401038c2cd34d201b5e685626e
			 */
			script_pubkey: string;
			/**
			 * @description If this output is known to have been spent, hash of the transaction that spent it.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			spending_tx?: string | null;
		};
		TxOutByBlock: {
			/**
			 * @description Address-encoding of the script pubkey at which the input resides.
			 * @example bc1p5u4y8vdhn46adxhfv5scfv4c8myykw6r5uyzlavm42k4wgjewktq7xqcyr
			 */
			address?: string | null;
			/**
			 * @description Number of inscriptions in the UTxO.
			 * @example 1234567
			 */
			inscriptions: number;
			/**
			 * @description Number of rune kinds in the UTxO.
			 * @example 1234567
			 */
			runes: number;
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the input resides.
			 * @example 5120a72a43b1b79d75d69ae9652184b2b83ec84b3b43a7082ff59baaad5722597596
			 */
			script_pubkey: string;
			/**
			 * @description If this output is known to have been spent, hash of the transaction that spent it.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			spending_tx?: string | null;
			/**
			 * Format: int32
			 * @description Output index of the UTxO.
			 * @example 0
			 */
			vout: number;
		};
		TxOutMetaprotocols: {
			/**
			 * @description Address-encoding of the script pubkey at which the output containing the inscription resides.
			 * @example bc1ppth27qnr74qhusy9pmcyeaelgvsfky6qzquv9nf56gqmte59vfhqwkqguh
			 */
			address?: string | null;
			/** @description List of inscription IDs and their offsets in this input. */
			inscriptions: components["schemas"]["InscriptionAndOffset"][];
			/** @description List of rune IDs and their amount in this input. */
			runes: components["schemas"]["RuneAndAmount"][];
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the output containing the inscription resides.
			 * @example 51200aeeaf0263f5417e40850ef04cf73f43209b13401038c2cd34d201b5e685626e
			 */
			script_pubkey: string;
			/**
			 * @description If this output is known to have been spent, hash of the transaction that spent it.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			spending_tx?: string | null;
		};
		Utxo: {
			address?: string | null;
			/** Format: int64 */
			confirmations: number;
			/** Format: int64 */
			height: number;
			inscriptions: components["schemas"]["InscriptionAndOffset"][];
			runes: components["schemas"]["RuneAndAmount"][];
			satoshis: string;
			script_pubkey: string;
			txid: string;
			/** Format: int32 */
			vout: number;
		};
		MempoolPaginatedRuneHolder: {
			data: components["schemas"]["RuneHolder"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolPaginatedRuneUtxoByAddress: {
			data: components["schemas"]["RuneUtxoByAddress"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolPaginatedUtxo: {
			data: components["schemas"]["MempoolUtxo"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolTimestampedFeeRates: {
			data: components["schemas"]["EstimatedBlock"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedRuneQuantities: {
			data: {
				[key: string]: string;
			};
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedSatoshis: {
			data: string;
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedTxInfoMetaprotocols: {
			data: components["schemas"]["MempoolTxInfoMetaprotocols"];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedTxOutMetaprotocols: {
			data: components["schemas"]["TxOutMetaprotocols"];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTxInfoMetaprotocols: {
			/**
			 * @description Fees paid to the miner.
			 * @example 2504
			 */
			fees: string;
			/**
			 * Format: int64
			 * @description Block height.
			 * @example 875075
			 */
			height: number;
			/** @description List of inputs, in the same order as the transaction. */
			inputs: components["schemas"]["TxInMetaprotocols"][];
			/** @description Whether any of the transactions in the block involved metaprotocols. */
			metaprotocols: components["schemas"]["Metaprotocol"][];
			/** @description List of outputs, in the same order as the transaction. */
			outputs: components["schemas"]["TxOutMetaprotocols"][];
			/**
			 * Format: int64
			 * @description sats per vB of the transaction.
			 * @example 15
			 */
			sats_per_vb: number;
			/**
			 * @description Total number of satoshis that went through this transaction, minus fees.
			 * @example 12345678
			 */
			volume: string;
		};
		MempoolUtxo: {
			address?: string | null;
			/** Format: int64 */
			height: number;
			inscriptions: components["schemas"]["InscriptionAndOffset"][];
			mempool: boolean;
			runes: components["schemas"]["RuneAndAmount"][];
			satoshis: string;
			script_pubkey: string;
			txid: string;
			/** Format: int32 */
			vout: number;
		};
		MempoolWalletPaginatedActivityByAddress: {
			data: components["schemas"]["WalletActivityByAddress"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolWalletPaginatedActivityByAddressWithMetaprotocols: {
			data: components["schemas"]["WalletActivityByAddressWithMetaprotocols"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolWalletPaginatedInscriptionActivityByAddress: {
			data: components["schemas"]["WalletInscriptionActivityByAddress"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolWalletPaginatedRuneActivityByAddress: {
			data: components["schemas"]["WalletRuneActivityByAddress"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolWalletTimestampedAddressStatistics: {
			data: components["schemas"]["WalletAddressStatistics"];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		PendingAddressStatistics: {
			/**
			 * Format: int64
			 * @description Estimated number of outputs spent in the mempool.
			 */
			inputs: number;
			/**
			 * Format: int64
			 * @description Estimated number of new outputs (spent or unspent) in the mempool.
			 */
			outputs: number;
			/** @description Estimated sat balance difference between mempool and confirmed data. */
			sat_balance: string;
			/** @description Estimated number of sats in outputs spent in the mempool. */
			sat_in_inputs: number;
			/** @description Estimated number of sats in new outputs (spent or unspent) in the mempool. */
			sat_in_outputs: number;
			/**
			 * Format: int64
			 * @description Estimated number of new txs in the mempool where the address controls at least an input or an output.
			 */
			txs: number;
			/** @description Estimated USD balance difference between mempool and confirmed data, if sat balance was exchanged. The exchange rate is that between USD and BTC at the time the block at the tip of the chain was mined. */
			usd_balance: string;
			/**
			 * Format: int64
			 * @description Estimated number of new unspent outputs in the mempool.
			 */
			utxos: number;
		};
		WalletActivityByAddress: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Height of block containing the satoshi activity.
			 */
			height: number;
			/** @description Whether the data is pending (true) or confirmed (false). */
			mempool: boolean;
			sat_activity: components["schemas"]["WalletSatActivity"];
			/** @description Hash of transaction containing the satoshi activity. */
			tx_hash: string;
		};
		WalletActivityByAddressWithMetaprotocols: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Height of block containing the satoshi activity.
			 */
			height: number;
			inscription_activity?:
				| components["schemas"]["InscriptionActivity"]
				| null;
			/** @description Whether the data is pending (true) or confirmed (false). */
			mempool: boolean;
			rune_activity?: components["schemas"]["WalletRuneActivity"] | null;
			sat_activity: components["schemas"]["WalletSatActivity"];
			/** @description Hash of transaction containing the satoshi activity. */
			tx_hash: string;
		};
		WalletAddressStatistics: {
			pending: components["schemas"]["PendingAddressStatistics"];
			/** @description Existence of runes controlled by the address. */
			runes: boolean;
			/** @description Current confirmed sat balance (sat in unspent outputs) controlled by the address. */
			sat_balance: string;
			/**
			 * Format: int64
			 * @description Total number of confirmed inputs (i.e., number of all confirmed spending of outputs).
			 */
			total_inputs: number;
			/**
			 * Format: int64
			 * @description Total number of inscriptions currently controlled by the address.
			 */
			total_inscriptions: number;
			/**
			 * Format: int64
			 * @description Total number of confirmed spent or unspent outputs.
			 */
			total_outputs: number;
			/** @description Total number of sats in confirmed inputs. */
			total_sat_in_inputs: number;
			/** @description Total number of sats in confirmed spent or unspent outputs. */
			total_sat_in_outputs: number;
			/**
			 * Format: int64
			 * @description Total number of confirmed transactions where the address controlled at least an input or an output.
			 */
			total_txs: number;
			/**
			 * Format: int64
			 * @description Total number of confirmed unspent outputs.
			 */
			total_utxos: number;
			/** @description Confirmed USD balance if sat balance was exchanged. The exchange rate is that between USD and BTC at the time the block at the tip of the chain was mined. */
			usd_balance: string;
		};
		WalletInscriptionActivityByAddress: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Height of block containing the inscription activity.
			 */
			height: number;
			inscription_activity: components["schemas"]["InscriptionActivity"];
			/** @description Whether the data is pending (true) or confirmed (false). */
			mempool: boolean;
			/** @description Hash of transaction containing the inscription activity. */
			tx_hash: string;
		};
		WalletRuneActivity: {
			/** @description List of runes and amounts, corresponding to decreased balances for this address. */
			decreased_balances: components["schemas"]["WalletRuneAndAmount"][];
			etched_rune?: components["schemas"]["EtchAndPremine"] | null;
			/** @description List of runes and amounts, corresponding to increased balances for this address. */
			increased_balances: components["schemas"]["WalletRuneAndAmount"][];
			minted?: components["schemas"]["WalletRuneAndAmount"] | null;
			/** @description List of runes that were self-transferred. */
			self_transfers: components["schemas"]["WalletRuneAndAmount"][];
		};
		WalletRuneActivityByAddress: {
			/**
			 * Format: int64
			 * @description Number of confirmation blocks.
			 */
			confirmations: number;
			/**
			 * Format: int64
			 * @description Height of block containing the rune activity.
			 */
			height: number;
			/** @description Whether the data is pending (true) or confirmed (false). */
			mempool: boolean;
			rune_activity: components["schemas"]["WalletRuneActivity"];
			/** @description Hash of transaction containing the rune activity. */
			tx_hash: string;
		};
		WalletRuneAndAmount: {
			amount: string;
			rune_id: string;
			/** @description USD price for amounts of runes at the time the block containing this activity was mined. */
			usd_amount: string;
		};
		WalletSatActivity: {
			/** @description Amount of satoshis involved in the activity. */
			amount: string;
			kind: components["schemas"]["ActivityKindByAddress"];
			/** @description USD amount if sat amount was exchanged to USD. If the block is confirmed, the exchange rate is that between USD and BTC at the time the block was mined. If the block is pending (mempool transaction), then the exchange rate is that between USD and BTC at the time the block at the tip of the chain was mined. */
			usd_amount: string;
		};
		"api_bitcoin.APIError": {
			/**
			 * @description Error returned from the API request
			 * @example Bad Request
			 */
			error?: string;
		};
		"api_bitcoin.BatchTxsRequest": {
			tx_ids: string[];
		};
		"api_bitcoin.Bip9": {
			bit?: number;
			since?: number;
			start_time?: number;
			statistics?: components["schemas"]["api_bitcoin.Statistics"];
			status?: string;
			timeout?: number;
		};
		"api_bitcoin.BitcoinBlock": {
			bits?: string;
			chainwork?: string;
			confirmations?: number;
			difficulty?: number;
			hash?: string;
			height?: number;
			mediantime?: number;
			merkleroot?: string;
			miner?: components["schemas"]["api_bitcoin.MinerInfo"];
			nTx?: number;
			nonce?: number;
			previousblockhash?: string;
			size?: number;
			strippedsize?: number;
			time?: number;
			tx?: string[];
			version?: number;
			versionHex?: string;
			weight?: number;
		};
		"api_bitcoin.BitcoinBlockResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinBlock"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinBlockVerbose": {
			bits?: string;
			chainwork?: string;
			confirmations?: number;
			difficulty?: number;
			hash?: string;
			height?: number;
			mediantime?: number;
			merkleroot?: string;
			miner?: components["schemas"]["api_bitcoin.MinerInfo"];
			nTx?: number;
			nonce?: number;
			previousblockhash?: string;
			size?: number;
			strippedsize?: number;
			time?: number;
			tx?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"][];
			version?: number;
			versionHex?: string;
			weight?: number;
		};
		"api_bitcoin.BitcoinBlockVerboseResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinBlockVerbose"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinBlocksResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinBlock"][];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinDecodedTransaction": {
			hash?: string;
			hex?: string;
			locktime?: number;
			size?: number;
			txid?: string;
			version?: number;
			vin?: components["schemas"]["api_bitcoin.Vin"][];
			vout?: components["schemas"]["api_bitcoin.Vout"][];
			vsize?: number;
			weight?: number;
		};
		"api_bitcoin.BitcoinDecodedTransactionResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinDecodedTransaction"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinTransactionVerbose": {
			blockhash?: string;
			blockheight?: number;
			blocktime?: number;
			confirmations?: number;
			hash?: string;
			hex?: string;
			input_addresses?: string[];
			locktime?: number;
			output_addresses?: string[];
			size?: number;
			time?: number;
			total_fees?: number;
			total_input_volume?: number;
			total_output_volume?: number;
			txid?: string;
			version?: number;
			vin?: components["schemas"]["api_bitcoin.VinVerbose"][];
			vout?: components["schemas"]["api_bitcoin.VoutVerbose"][];
			vsize?: number;
			weight?: number;
		};
		"api_bitcoin.BitcoinTransactionVerboseResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinTransactionsBatchResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"][];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinTransactionsVerboseResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"][];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BlockMinerResponseBody": {
			data?: components["schemas"]["api_bitcoin.MinerInfo"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BlockVolume": {
			total_output_satoshis?: number;
		};
		"api_bitcoin.BlockVolumeResponseBody": {
			data?: components["schemas"]["api_bitcoin.BlockVolume"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BlockchainInfo": {
			automatic_pruning?: boolean;
			bestblockhash?: string;
			blocks?: number;
			chain?: string;
			chainwork?: string;
			difficulty?: number;
			headers?: number;
			initialblockdownload?: boolean;
			mediantime?: number;
			prune_target_size?: number;
			pruned?: boolean;
			pruneheight?: number;
			size_on_disk?: number;
			softforks?: {
				[key: string]: components["schemas"]["api_bitcoin.Softfork"];
			};
			verificationprogress?: number;
			warnings?: string;
		};
		"api_bitcoin.BlockchainInfoResponseBody": {
			data?: components["schemas"]["api_bitcoin.BlockchainInfo"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.EstimateSmartFee": {
			blocks?: number;
			feerate?: number;
		};
		"api_bitcoin.EstimateSmartFeeResponseBody": {
			data?: components["schemas"]["api_bitcoin.EstimateSmartFee"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.LastUpdatedBlock": {
			block_hash?: string;
			block_height?: number;
		};
		"api_bitcoin.MempoolInfoResponseBody": {
			data?: components["schemas"]["api_bitcoin.MempoolInfoResult"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolInfoResult": {
			/** @description Total memory usage for the mempool (in bytes) */
			bytes?: number;
			/** @description Whether full replace-by-fee (RBF) is enabled */
			fullrbf?: boolean;
			/** @description The incremental relay fee setting (in BTC) */
			incrementalrelayfee?: number;
			/** @description Whether the mempool is fully loaded */
			loaded?: boolean;
			/** @description Maximum memory usage for the mempool (in bytes) */
			maxmempool?: number;
			/** @description The minimum fee rate (in BTC/kB) for mempool transactions */
			mempoolminfee?: number;
			/** @description The minimum fee rate (in BTC/kB) for relaying transactions */
			minrelaytxfee?: number;
			/** @description Number of transactions in the mempool */
			size?: number;
			/** @description The total fees (in BTC) in the mempool */
			total_fee?: number;
			/** @description Number of transactions that have not been broadcast */
			unbroadcastcount?: number;
			/** @description Total usage of the mempool (in bytes) */
			usage?: number;
		};
		"api_bitcoin.MempoolTxAncestorsResponseBody": {
			data?: string[];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxDescendantsResponseBody": {
			data?: string[];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxDetailsResponseBody": {
			data?: components["schemas"]["api_bitcoin.MempoolTxDetailsResult"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxDetailsResult": {
			ancestorcount?: number;
			ancestorsize?: number;
			"bip125-replaceable"?: boolean;
			depends?: string[];
			descendantcount?: number;
			descendantsize?: number;
			fees?: components["schemas"]["api_bitcoin.TxFees"];
			height?: number;
			spentby?: string[];
			time?: number;
			unbroadcast?: boolean;
			vsize?: number;
			weight?: number;
			wtxid?: string;
		};
		"api_bitcoin.MempoolTxsResponseBody": {
			data?: components["schemas"]["api_bitcoin.MempoolTxsResult"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxsResult": {
			/** @description Sequence number of the mempool */
			mempool_sequence?: number;
			/** @description List of transaction IDs */
			txids?: string[];
		};
		"api_bitcoin.MinerInfo": {
			addresses?: string[];
			icon_url?: string;
			name?: string;
			tags?: string[];
			url?: string;
		};
		"api_bitcoin.NodeRPCError": {
			/**
			 * @description Error code returned from the API request
			 * @example 0
			 */
			code?: number;
			/**
			 * @description Error returned from the API request
			 * @example node rpc error
			 */
			"node rpc error"?: string;
		};
		"api_bitcoin.PSBT": {
			fee?: number;
			global_xpubs?: unknown[];
			inputs?: {
				bip32_derivs?: {
					master_fingerprint?: string;
					path?: string;
					pubkey?: string;
				}[];
				non_witness_utxo?: {
					hash?: string;
					locktime?: number;
					size?: number;
					txid?: string;
					version?: number;
					vin?: {
						scriptSig?: {
							asm?: string;
							hex?: string;
						};
						sequence?: number;
						txid?: string;
						vout?: number;
					}[];
					vout?: {
						n?: number;
						scriptPubKey?: {
							address?: string;
							asm?: string;
							desc?: string;
							hex?: string;
							type?: string;
						};
						value?: number;
					}[];
					vsize?: number;
					weight?: number;
				};
				witness_utxo?: {
					amount?: number;
					scriptPubKey?: {
						address?: string;
						asm?: string;
						desc?: string;
						hex?: string;
						type?: string;
					};
				};
			}[];
			outputs?: {
				bip32_derivs?: {
					master_fingerprint?: string;
					path?: string;
					pubkey?: string;
				}[];
			}[];
			proprietary?: unknown[];
			psbt_version?: number;
			tx?: {
				hash?: string;
				locktime?: number;
				size?: number;
				txid?: string;
				version?: number;
				vin?: {
					scriptSig?: {
						asm?: string;
						hex?: string;
					};
					sequence?: number;
					txid?: string;
					vout?: number;
				}[];
				vout?: {
					n?: number;
					scriptPubKey?: {
						address?: string;
						asm?: string;
						desc?: string;
						hex?: string;
						type?: string;
					};
					value?: number;
				}[];
				vsize?: number;
				weight?: number;
			};
			unknown?: Record<string, never>;
		};
		"api_bitcoin.PSBTResponseBody": {
			data?: components["schemas"]["api_bitcoin.PSBT"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.Softfork": {
			active?: boolean;
			bip9?: components["schemas"]["api_bitcoin.Bip9"];
			height?: number;
			type?: string;
		};
		"api_bitcoin.Statistics": {
			count?: number;
			elapsed?: number;
			period?: number;
			possible?: boolean;
			threshold?: number;
		};
		"api_bitcoin.TxFees": {
			ancestor?: number;
			base?: number;
			descendant?: number;
			modified?: number;
		};
		"api_bitcoin.Vin": {
			coinbase?: string;
			scriptSig?: {
				asm?: string;
				hex?: string;
			};
			sequence?: number;
			txid?: string;
			txinwitness?: string[];
			vout?: number;
		};
		"api_bitcoin.VinVerbose": {
			address?: string;
			coinbase?: string;
			scriptSig?: {
				asm?: string;
				hex?: string;
			};
			script_type?: string;
			sequence?: number;
			txid?: string;
			txinwitness?: string[];
			value?: number;
			vout?: number;
		};
		"api_bitcoin.Vout": {
			n?: number;
			scriptPubKey?: {
				address?: string;
				asm?: string;
				desc?: string;
				hex?: string;
				type?: string;
			};
			value?: number;
		};
		"api_bitcoin.VoutVerbose": {
			address?: string;
			n?: number;
			scriptPubKey?: {
				address?: string;
				asm?: string;
				desc?: string;
				hex?: string;
				type?: string;
			};
			script_type?: string;
			value?: number;
		};
		/**
		 * NullValue
		 * @description `NullValue` is a singleton enumeration to represent the null value for the
		 *      `Value` type union.
		 *
		 *      The JSON representation for `NullValue` is JSON `null`.
		 * @enum {string}
		 */
		"google.protobuf.NullValue": "NULL_VALUE";
		/**
		 * ListValue
		 * @description `ListValue` is a wrapper around a repeated field of values.
		 *
		 *      The JSON representation for `ListValue` is JSON array.
		 */
		"google.protobuf.ListValue": {
			/**
			 * values
			 * @description Repeated field of dynamically typed values.
			 */
			values?: components["schemas"]["google.protobuf.Value"][];
		};
		/** @description `Struct` represents a structured data value, consisting of fields
		 *      which map to dynamically typed values. In some languages, `Struct`
		 *      might be supported by a native representation. For example, in
		 *      scripting languages like JS a struct is represented as an
		 *      object. The details of that representation are described together
		 *      with the proto support for the language.
		 *
		 *      The JSON representation for `Struct` is JSON object. */
		"google.protobuf.Struct": {
			[key: string]: components["schemas"]["google.protobuf.Value"];
		};
		/** FieldsEntry */
		"google.protobuf.Struct.FieldsEntry": {
			/** key */
			key?: string;
			/** value */
			value?: components["schemas"]["google.protobuf.Value"];
		};
		/** @description `Value` represents a dynamically typed value which can be either
		 *      null, a number, a string, a boolean, a recursive struct value, or a
		 *      list of values. A producer of value is expected to set one of these
		 *      variants. Absence of any variant indicates an error.
		 *
		 *      The JSON representation for `Value` is JSON value. */
		"google.protobuf.Value":
			| null
			| number
			| string
			| boolean
			| unknown[]
			| {
					[key: string]: unknown;
			  };
		/** CreateTriggerRequest */
		"public.event_manager.v1.CreateTriggerRequest": {
			/** name */
			name?: string;
			/**
			 * chain
			 * @description Blockchain to listen on (bitcoin)
			 * @example bitcoin
			 * @enum {string}
			 */
			chain?: "bitcoin";
			/**
			 * network
			 * @description Network environment to listen on (mainnet)
			 * @example mainnet
			 * @enum {string}
			 */
			network?: "mainnet" | "testnet";
			/**
			 * type
			 * @description Trigger type, e.g., transaction
			 * @example transaction
			 * @enum {string}
			 */
			type?: "transaction";
			/**
			 * webhook_url
			 * Format: uri
			 * @description Webhook URL to receive events
			 * @example https://webhook.site/your-endpoint
			 */
			webhook_url?: string;
			/** filters */
			filters?: components["schemas"]["public.event_manager.v1.Filter"][];
			/**
			 * confirmations
			 * Format: int32
			 * @description Number of confirmations required for the transaction to be matched by this trigger
			 * @example 5
			 */
			confirmations?: number;
		};
		/** CreateTriggerResponse */
		"public.event_manager.v1.CreateTriggerResponse": {
			/** data */
			data?: components["schemas"]["public.event_manager.v1.Trigger"];
		};
		/** DeleteTriggerRequest */
		"public.event_manager.v1.DeleteTriggerRequest": {
			/** id */
			id?: string;
		};
		/** DeleteTriggerResponse */
		"public.event_manager.v1.DeleteTriggerResponse": Record<string, never>;
		/** EventLog */
		"public.event_manager.v1.EventLog": {
			/** id */
			id?: string;
			/** trigger_id */
			trigger_id?: string;
			/** payload */
			payload?: components["schemas"]["google.protobuf.Struct"];
			/** response */
			response?: string;
			/**
			 * response_status
			 * Format: int32
			 */
			response_status?: number;
			/** status */
			status?: string;
		};
		/**
		 * Filter
		 * @description For key in [sender, receiver, sender_or_receiver, transaction_id], operator must be '=':
		 *     ```
		 *     !(this.key in ['sender', 'receiver', 'sender_or_receiver', 'transaction_id']) || this.operator == '='
		 *     ```
		 *
		 *
		 */
		"public.event_manager.v1.Filter": {
			/**
			 * key
			 * @description Condition to match on: sender, receiver, sender_or_receiver (addresses), transaction_id, total_input_volume, fee, size, weight
			 * @example sender
			 * @enum {string}
			 */
			key?:
				| "sender"
				| "receiver"
				| "sender_or_receiver"
				| "transaction_id"
				| "total_input_volume"
				| "fee"
				| "size"
				| "weight";
			/**
			 * operator
			 * @description Condition operation: =, >, >=, <, <=. Fields like receiver and transaction_id can only be exact (=)
			 * @example =
			 * @enum {string}
			 */
			operator?: "=" | ">" | ">=" | "<" | "<=";
			/** value */
			value?: string;
		};
		/** GetEventLogRequest */
		"public.event_manager.v1.GetEventLogRequest": {
			/** id */
			id?: string;
		};
		/** GetEventLogResponse */
		"public.event_manager.v1.GetEventLogResponse": {
			/** data */
			data?: components["schemas"]["public.event_manager.v1.EventLog"];
		};
		/** GetTriggerConditionOptionsRequest */
		"public.event_manager.v1.GetTriggerConditionOptionsRequest": {
			/**
			 * trigger_type
			 * @description Condition key
			 * @example transaction
			 * @enum {string}
			 */
			trigger_type?: "transaction";
		};
		/** GetTriggerConditionOptionsResponse */
		"public.event_manager.v1.GetTriggerConditionOptionsResponse": {
			/** data */
			data?: components["schemas"]["public.event_manager.v1.TriggerConditionOption"][];
		};
		/** GetTriggerRequest */
		"public.event_manager.v1.GetTriggerRequest": {
			/** id */
			id?: string;
		};
		/** GetTriggerResponse */
		"public.event_manager.v1.GetTriggerResponse": {
			/** data */
			data?: components["schemas"]["public.event_manager.v1.Trigger"];
		};
		/** HealthcheckRequest */
		"public.event_manager.v1.HealthcheckRequest": Record<string, never>;
		/** HealthcheckResponse */
		"public.event_manager.v1.HealthcheckResponse": {
			/** status */
			status?: string;
		};
		/** ListEventLogsRequest */
		"public.event_manager.v1.ListEventLogsRequest": {
			/**
			 * page
			 * Format: int32
			 * @description Page number for paginated results (starts from 1)
			 * @example 1
			 */
			page?: number;
			/**
			 * limit
			 * Format: int32
			 * @description Number of items per page
			 * @example 20
			 */
			limit?: number;
			/**
			 * trigger_id
			 * @description Filter logs by trigger ID
			 * @example trigger123
			 */
			trigger_id?: string | null;
			/**
			 * chain
			 * @description Filter logs by chain
			 * @example bitcoin
			 */
			chain?: string | null;
			/**
			 * network
			 * @description Filter logs by network
			 * @example mainnet
			 */
			network?: string | null;
		};
		/** ListEventLogsResponse */
		"public.event_manager.v1.ListEventLogsResponse": {
			/** data */
			data?: components["schemas"]["public.event_manager.v1.EventLog"][];
		};
		/** ListTriggersRequest */
		"public.event_manager.v1.ListTriggersRequest": Record<string, never>;
		/** ListTriggersResponse */
		"public.event_manager.v1.ListTriggersResponse": {
			/** data */
			data?: components["schemas"]["public.event_manager.v1.Trigger"][];
		};
		/** Trigger */
		"public.event_manager.v1.Trigger": {
			/** id */
			id?: string;
			/** name */
			name?: string;
			/**
			 * chain
			 * @description Blockchain to listen on (bitcoin)
			 * @example bitcoin
			 * @enum {string}
			 */
			chain?: "bitcoin";
			/**
			 * network
			 * @description Network environment to listen on (mainnet)
			 * @example mainnet
			 * @enum {string}
			 */
			network?: "mainnet" | "testnet";
			/**
			 * type
			 * @description Trigger type, e.g., transaction
			 * @example transaction
			 * @enum {string}
			 */
			type?: "transaction";
			/**
			 * webhook_url
			 * Format: uri
			 * @description Webhook URL to receive events
			 * @example https://webhook.site/your-endpoint
			 */
			webhook_url?: string;
			/** filters */
			filters?: components["schemas"]["public.event_manager.v1.Filter"][];
			/**
			 * status
			 * @description Status of the trigger, either active or inactive
			 * @example active
			 * @enum {string}
			 */
			status?: "active" | "paused";
			/**
			 * event_count
			 * Format: int64
			 * @description Number of events triggered by this trigger
			 * @example 40
			 */
			event_count?: number | string;
			/**
			 * confirmations
			 * Format: int32
			 * @description Number of confirmations required for the transaction to be matched by this trigger
			 * @example 5
			 */
			confirmations?: number;
		};
		/** TriggerConditionOption */
		"public.event_manager.v1.TriggerConditionOption": {
			/** trigger_type */
			trigger_type?: string;
			/** name */
			name?: string;
			/** display_name */
			display_name?: string;
			/** values */
			values?: string[];
			/**
			 * sort_order
			 * Format: int32
			 */
			sort_order?: number;
		};
		/** UpdateTriggerRequest */
		"public.event_manager.v1.UpdateTriggerRequest": {
			/** id */
			id?: string;
			/** name */
			name?: string;
			/**
			 * chain
			 * @description Blockchain to listen on (bitcoin)
			 * @example bitcoin
			 * @enum {string}
			 */
			chain?: "bitcoin";
			/**
			 * network
			 * @description Network environment to listen on (mainnet)
			 * @example mainnet
			 * @enum {string}
			 */
			network?: "mainnet" | "testnet";
			/**
			 * type
			 * @description Trigger type, e.g., transaction
			 * @example transaction
			 * @enum {string}
			 */
			type?: "transaction";
			/**
			 * webhook_url
			 * Format: uri
			 * @description Webhook URL to receive events
			 * @example https://webhook.site/your-endpoint
			 */
			webhook_url?: string;
			/** filters */
			filters?: components["schemas"]["public.event_manager.v1.Filter"][];
			/**
			 * confirmations
			 * Format: int32
			 * @description Number of confirmations required for the transaction to be matched by this trigger
			 * @example 5
			 */
			confirmations?: number;
			/**
			 * status
			 * @description Status of the trigger, either active or inactive
			 * @example active
			 * @enum {string}
			 */
			status?: "active" | "paused";
		};
		/** UpdateTriggerResponse */
		"public.event_manager.v1.UpdateTriggerResponse": {
			/** data */
			data?: components["schemas"]["public.event_manager.v1.Trigger"];
		};
		/**
		 * Connect-Protocol-Version
		 * @description Define the version of the Connect protocol
		 * @constant
		 * @enum {number}
		 */
		"connect-protocol-version": 1;
		/**
		 * Connect-Timeout-Ms
		 * @description Define the timeout, in ms
		 */
		"connect-timeout-header": number;
		/**
		 * Connect Error
		 * @description Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation
		 */
		"connect.error": {
			/**
			 * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
			 * @example not_found
			 * @enum {string}
			 */
			code?:
				| "canceled"
				| "unknown"
				| "invalid_argument"
				| "deadline_exceeded"
				| "not_found"
				| "already_exists"
				| "permission_denied"
				| "resource_exhausted"
				| "failed_precondition"
				| "aborted"
				| "out_of_range"
				| "unimplemented"
				| "internal"
				| "unavailable"
				| "data_loss"
				| "unauthenticated";
			/** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
			message?: string;
			detail?: components["schemas"]["google.protobuf.Any"];
		} & {
			[key: string]: unknown;
		};
		/** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
		"google.protobuf.Any": {
			type?: string;
			/** Format: binary */
			value?: string;
			debug?: {
				[key: string]: unknown;
			};
		} & {
			[key: string]: unknown;
		};
		"bitcoin_api.APIError": {
			/**
			 * @description Error returned from the API request
			 * @example Bad Request
			 */
			error?: string;
		};
		"bitcoin_api.PriceTimestamp": {
			price?: number;
			timestamp?: number;
		};
		"bitcoin_api.PricesByTimestampsParams": {
			timestamps: number[];
		};
		"bitcoin_api.PricesByTimestampsResponse": {
			data?: components["schemas"]["bitcoin_api.PriceTimestamp"][];
		};
		"bitcoin_api.RunePriceRequest": {
			/** @example BTC-840000:1 */
			rune_id: string;
			/** @example 1746109820 */
			timestamp: number;
		};
		"bitcoin_api.RunePriceResponse": {
			/** @example 1654.98 */
			price_satoshi?: number;
			/** @example 2.46 */
			price_usd?: number;
			/** @example BTC-840000:28 */
			rune_id?: string;
			/** @example 1746109820 */
			timestamp?: number;
		};
		"bitcoin_api.RunePricesByTimestampsResponse": {
			data?: components["schemas"]["bitcoin_api.RunePriceResponse"][];
		};
		"bitcoin_api.RunePricesParams": {
			data: components["schemas"]["bitcoin_api.RunePriceRequest"][];
		};
		"models.Candle": {
			/**
			 * @description Start time of the candle interval
			 * @example 2024-03-25T14:00:00Z
			 */
			bucket?: string;
			/**
			 * @description Price at the end of the interval (in satoshis)
			 * @example 19.75
			 */
			close?: number;
			/**
			 * @description Highest price during the interval (in satoshis)
			 * @example 20
			 */
			high?: number;
			/**
			 * @description Lowest price during the interval (in satoshis)
			 * @example 19.25
			 */
			low?: number;
			/**
			 * @description Price at the start of the interval (in satoshis)
			 * @example 19.5
			 */
			open?: number;
			/**
			 * @description Symbol of the Rune asset trading pair (BTC-Rune ID)
			 * @example BTC-840000:28
			 */
			symbol?: string;
			/**
			 * @description Total traded amount during the interval. Volume=0 for backfilled, synthetic candles (queried with carry=true)
			 * @example 3780
			 */
			volume?: number;
		};
		"models.CandleList": {
			data?: components["schemas"]["models.Candle"][];
		};
		"models.RuneRegistry": {
			/**
			 * @description Number of decimal places supported
			 * @example 8
			 */
			divisibility?: number;
			/**
			 * @description Transaction hash where the Rune was etched
			 * @example 2bebfc71ac93f02de19b28a8b438ed40413676f4c4c2609401a9a08ea508fd58
			 */
			etched_tx_hash?: string;
			/**
			 * @description Human-readable name of the Rune
			 * @example DOGGOTOTHEMOON
			 */
			name?: string;
			/**
			 * @description Symbol of the Rune asset trading pair (BTC-Rune ID)
			 * @example BTC-840000:28
			 */
			rune_id?: string;
			/**
			 * @description Spacer value associated with the Rune
			 * @example 0
			 */
			spacer?: number;
			/**
			 * @description Ticker symbol of the Rune
			 * @example DOGGO
			 */
			symbol?: string;
		};
		"models.RuneRegistryList": {
			data?: components["schemas"]["models.RuneRegistry"][];
		};
		"models.SupportedDexList": {
			/** @example [
			 *       "all",
			 *       "magiceden",
			 *       "dotswap"
			 *     ] */
			data?: string[];
		};
		"models.Trade": {
			/**
			 * @description Amount of the asset traded
			 * @example 3780
			 */
			amount?: number;
			/**
			 * @description Block height where the trade was included
			 * @example 840000
			 */
			block?: number;
			/**
			 * @description Name of the DEX
			 * @example magiceden
			 */
			dex?: string;
			/**
			 * @description Mempool status of the trade
			 * @example false
			 */
			mempool?: boolean;
			/**
			 * @description Price of the asset in satoshis
			 * @example 19.75
			 */
			price?: number;
			/**
			 * @description Price of the asset in usd
			 * @example 0.0575
			 */
			price_usd?: number;
			/**
			 * @description Trade direction: buy or sell
			 * @example buy
			 * @enum {string}
			 */
			side?: "buy" | "sell";
			/**
			 * @description Symbol of the Rune asset trading pair (BTC-Rune ID)
			 * @example BTC-840000:28
			 */
			symbol?: string;
			/**
			 * @description Time of the block in which trade occurred
			 * @example 2024-05-03T15:04:05Z
			 */
			timestamp?: string;
			/**
			 * @description Transaction hash of the trade
			 * @example 2bebfc71ac93f02de19b28a8b438ed40413676f4c4c2609401a9a08ea508fd58
			 */
			tx_hash?: string;
			/**
			 * @description Index of the trade within the block, 0-based (first trade is 0, second trade is 1, not transaction index)
			 * @example 1
			 */
			tx_index?: number;
		};
		"models.TradeList": {
			data?: components["schemas"]["models.Trade"][];
		};
		AddressInfo: {
			address: string;
			chain_stats: components["schemas"]["AddressStats"];
			mempool_stats: components["schemas"]["AddressStats"];
		};
		AddressStats: {
			tx_count: number;
			funded_txo_count: number;
			funded_txo_sum: number;
			spent_txo_count: number;
			spent_txo_sum: number;
		};
		AddressValidation: {
			isvalid: boolean;
			address?: string;
			scriptPubKey?: string;
			isscript?: boolean;
			iswitness?: boolean;
			type?: string;
		};
		Block: {
			/** @description Block hash */
			id: string;
			height: number;
			version: number;
			timestamp: number;
			mediantime?: number;
			bits: number;
			nonce: number;
			difficulty?: number;
			merkle_root: string;
			tx_count: number;
			size: number;
			weight: number;
			previousblockhash: string;
			/** @description Optional explorer-specific metadata */
			extras?: Record<string, never>;
		};
		BlockV1: {
			id: string;
			height: number;
			version?: number;
			timestamp: number;
			mediantime?: number;
			bits: number;
			nonce: number;
			difficulty?: number;
			merkle_root?: string;
			tx_count: number;
			size: number;
			weight: number;
			previousblockhash: string;
			extras?: {
				pool?: {
					name?: string;
					url?: string;
				};
			};
		};
		/** @description SHA-256 hash of the latest block */
		BlockHash: string;
		/** @description Hex-encoded string representing the block header (80 bytes, 160 hex characters) */
		BlockHeader: string;
		/**
		 * @description Height of the latest block on the best blockchain tip
		 * @example 850302
		 */
		BlockHeight: number;
		BlockStatus: {
			/** @description Whether the block is part of the best (main) chain */
			in_best_chain: boolean;
			/** @description Hash of the next block, if available */
			next_best?: string;
		};
		/** @example [
		 *       "5a7a9fe2c911c482c89a7ea1dbf35a7c9b68892ec5b2d92e93858a9f4a85b08e",
		 *       "b1fea5241d34b276c3f8a5a934ae9e5e2bb23ecad1c7426ec1dfde3e07aa55a9"
		 *     ] */
		BlockTxids: string[];
		RbfTransaction: {
			txid: string;
			fee: number;
			vsize: number;
			value: number;
			rate: number;
			rbf: boolean;
			fullRbf?: boolean;
		};
		RbfReplacedTx: {
			tx: components["schemas"]["RbfTransaction"];
			time: number;
			interval?: number;
			fullRbf: boolean;
			replaces: components["schemas"]["RbfReplacedTx"][];
		};
		RbfReplacementRoot: {
			replacements: {
				tx: components["schemas"]["RbfTransaction"];
				time: number;
				fullRbf: boolean;
				replaces: components["schemas"]["RbfReplacedTx"][];
			};
			replaces: string[];
		};
		FullRbfStats: {
			/** @description Total number of transactions in the mempool. */
			total: number;
			/** @description Number of transactions marked as full-RBF. */
			fullRBF: number;
			/** @description Number of transactions marked as opt-in RBF (BIP125). */
			optInRBF: number;
			/** @description Number of transactions that are not RBF. */
			nonRBF: number;
		};
		CpfpRecommendation: {
			/** @description Virtual size of the child transaction in vbytes. */
			vsize: number;
			/** @description Required fee for the child transaction in satoshis. */
			fee: number;
			/** @description Total virtual size of parent + child transaction. */
			totalVsize: number;
			/** @description Total required fee for parent + child. */
			totalFee: number;
			/** @description Effective fee rate (sat/vB) for parent + child. */
			rate: number;
			/** @description Minimum relay fee required for the transaction to be accepted into the mempool. */
			minRelayFee: number;
			/** @description Error message if CPFP recommendation could not be provided. */
			error: string;
		};
		Transaction: {
			txid: string;
			version?: number;
			locktime?: number;
			size?: number;
			weight?: number;
			fee?: number;
			vin: {
				txid?: string;
				vout?: number;
				is_coinbase?: boolean;
				scriptsig?: string;
				scriptsig_asm?: string;
				sequence?: number;
				witness?: string[];
				prevout?: {
					scriptpubkey?: string;
					scriptpubkey_asm?: string;
					scriptpubkey_type?: string;
					scriptpubkey_address?: string;
					value?: number;
				};
			}[];
			vout: {
				scriptpubkey?: string;
				scriptpubkey_asm?: string;
				scriptpubkey_type?: string;
				scriptpubkey_address?: string;
				value?: number;
			}[];
			status: {
				confirmed?: boolean;
				block_height?: number;
				block_hash?: string;
				block_time?: number;
			};
		};
		/** @description Raw hexadecimal representation of the Bitcoin transaction. */
		TransactionHex: string;
		TransactionStatus: {
			confirmed?: boolean;
			block_height?: number;
			block_hash?: string;
		};
		/** @description A Bitcoin transaction ID (txid) */
		TransactionId: string;
		MempoolStats: {
			/** @description Number of transactions in the mempool */
			count: number;
			/** @description Total size of mempool transactions in virtual bytes */
			vsize: number;
			/** @description Total fees paid by mempool transactions in satoshis */
			total_fee: number;
			/** @description Mempool fee-rate distribution histogram as (feerate, vsize) tuples */
			fee_histogram: number[][];
		};
		/** @description Array of transaction IDs currently in the mempool */
		MempoolTxids: string[];
		MempoolRecentTx: {
			/** @description Transaction ID */
			txid: string;
			/** @description Total fee paid in satoshis */
			fee: number;
			/** @description Virtual size of the transaction in vbytes */
			vsize: number;
			/** @description Total value transferred in satoshis */
			value: number;
		};
		MerkleProof: {
			/** @description Block height where the transaction was included. */
			block_height: number;
			/** @description Merkle branch hashes proving the inclusion of the transaction. */
			merkle: string[];
			/** @description Position of the transaction in the block's merkle tree. */
			pos: number;
		};
		TxOutspend: {
			/** @description Whether the output has been spent. */
			spent: boolean;
			/** @description Transaction ID of the spending transaction. */
			txid?: string | null;
			/** @description Index of the input in the spending transaction. */
			vin?: number | null;
			/** @description Confirmation status of the spending transaction. */
			status?: {
				confirmed?: boolean;
				block_height?: number;
				block_hash?: string;
				block_time?: number;
			} | null;
		};
		Outspend: {
			/** @description Indicates whether this output has been spent. */
			spent: boolean;
			/** @description The transaction ID that spent this output, if any. */
			txid?: string | null;
			/** @description The input index in the spending transaction. */
			vin?: number | null;
			/** @description Status of the spending transaction. */
			status?: {
				confirmed?: boolean;
				block_height?: number;
				block_hash?: string;
				block_time?: number;
			} | null;
		};
		TransactionTimes: {
			/** @description Unix timestamp when the transaction was first observed */
			firstSeen: number;
			/** @description Unix timestamp when the transaction entered the mempool */
			addedToMempool: number;
			/** @description Unix timestamp when the transaction was confirmed in a block (null if unconfirmed) */
			blockTime?: number;
		};
		TxStatus: {
			/** @description Whether the transaction is confirmed */
			confirmed: boolean;
			/** @description Height of the block containing the transaction (if confirmed) */
			block_height?: number;
			/** @description Hash of the block containing the transaction (if confirmed) */
			block_hash?: string;
		};
		BroadcastResponse: {
			/** @description Transaction ID of the broadcast transaction. */
			txid: string;
		};
		Utxo1: {
			/** @description Transaction ID where the UTXO originates. */
			txid: string;
			/** @description Index of the output in the transaction. */
			vout: number;
			/** @description Value of the UTXO in satoshis. */
			value: number;
			status: {
				confirmed: boolean;
				block_height?: number;
				block_hash?: string;
				block_time?: number;
			};
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	satoshi_activity_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only transactions included on or after a specific height */
				from?: number | null;
				/** @description Return only transactions included on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/** @description Only return transactions of a specific activity kind. Supported values: "increase" for transactions where satoshi balance increases, "decrease" for decrease, and "self_transfer" for transactions where satoshi balance remained the same. */
				activity_kind?: components["schemas"]["ActivityKindByAddress"] | null;
				/** @description Do not return self-transfer transactions - transactions in which satoshi balance did not increase or decrease. */
				exclude_self_transfers?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1qcx7ys0ahvtfqcc63sfn6axls0qrhkadnslpd94
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "amount": "4456732",
					 *           "confirmations": 48,
					 *           "height": 892671,
					 *           "kind": "increase",
					 *           "tx_hash": "9f2d17f672ebb9962940aba94daef140cc876f32edba5e9325c18ca17534120e"
					 *         },
					 *         {
					 *           "amount": "4456732",
					 *           "confirmations": 43,
					 *           "height": 892676,
					 *           "kind": "decrease",
					 *           "tx_hash": "2c34dbe0d8dcbf4faba291e50cda1d9b6f70cccdbb2fcd23a9341d2791845998"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000c7f19aca70cdeab9d7f04a79d1c8283b66dce78796e8",
					 *         "block_height": 892719
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedActivityByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	satoshi_balance_by_address: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": "695100",
					 *       "last_updated": {
					 *         "block_hash": "000000000000000000005075404edd6edc806976389a9f7e2ff71db1c2cf9b83",
					 *         "block_height": 884991
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedSatoshis"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	historical_satoshi_balance_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only blocks included on or after a specific height or timestamps. If this parameter is not provided, the starting point will be the first block where the address has seen its balance increase or decrease. */
				from?: number | null;
				/** @description Return only blocks included on or before a specific height or timestamp */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/** @description Whether the from and to integer query params should be read as timestamps or as block heights. True (the default) means from and to params should be read as block heights. */
				height_params?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1qcx7ys0ahvtfqcc63sfn6axls0qrhkadnslpd94
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 932,
					 *           "height": 899903,
					 *           "sat_balance": "155191",
					 *           "timestamp": "2025-06-05 12:34:23",
					 *           "unix_timestamp": 1749126863,
					 *           "usd_balance": "163.59"
					 *         },
					 *         {
					 *           "confirmations": 931,
					 *           "height": 899904,
					 *           "sat_balance": "155191",
					 *           "timestamp": "2025-06-05 12:34:52",
					 *           "unix_timestamp": 1749126892,
					 *           "usd_balance": "163.59"
					 *         },
					 *         {
					 *           "confirmations": 930,
					 *           "height": 899905,
					 *           "sat_balance": "155191",
					 *           "timestamp": "2025-06-05 12:35:24",
					 *           "unix_timestamp": 1749126924,
					 *           "usd_balance": "163.56"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "000000000000000000014ba9b2d30d9c737423c753c5b6a27989815ed50afe04",
					 *         "block_height": 900834
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedHistoricalSatBalanceByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	brc20_by_address: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "ABCD": {
					 *           "available": "0.123",
					 *           "total": "312000.000"
					 *         }
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "000000009ed3f5385c1807ca04630b9b2273398670726f93282fd41ba88dc6b8",
					 *         "block_height": 2413542
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedBrc20Quantities"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	brc20_transfer_inscriptions_by_address: {
		parameters: {
			query?: {
				/**
				 * @description BRC20 ticker string
				 * @example oxbt
				 */
				ticker?: string | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description The order in which the results are sorted */
				order?: ("asc" | "desc") | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1p98p4wj9y5ppa4rkal59vrnp56tf8v6hggymud6awkf9rhdyvvc2s9jp0m3
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "inscription_id": "1da6ca5f0c07634d3e233197997a21091f10907c942b2a8e77a4d77381ca96b8i0",
					 *           "satoshis": "546",
					 *           "ticker": "oxbt",
					 *           "token_amount": "10000000.000000000000",
					 *           "utxo_block_height": 851440,
					 *           "utxo_confirmations": 481,
					 *           "utxo_sat_offset": 0,
					 *           "utxo_txid": "1da6ca5f0c07634d3e233197997a21091f10907c942b2a8e77a4d77381ca96b8",
					 *           "utxo_vout": 0
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000023f7c4b362352c7948fb6ed7775bcd558ef1c7966c0",
					 *         "block_height": 851921
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedTransferInscriptionByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	inscriptions_by_address: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "inscription_id": "f02da3d6bebab13d5d604be1ed73d9a9c677dadf6ca71bc5fff7d99cdead11b0i0",
					 *           "satoshis": 546,
					 *           "utxo_block_height": 843010,
					 *           "utxo_confirmations": 23701,
					 *           "utxo_sat_offset": 0,
					 *           "utxo_txid": "e2283e7c915ef074806136e0002cbc69f5fdd2e9f70f14b0eab48cdcbe867cc1",
					 *           "utxo_vout": 0
					 *         },
					 *         {
					 *           "inscription_id": "7d0a2dd897222913d58fc957b0429526117a0a61c964642fe93b077f328ccec1i0",
					 *           "satoshis": 546,
					 *           "utxo_block_height": 850976,
					 *           "utxo_confirmations": 15735,
					 *           "utxo_sat_offset": 0,
					 *           "utxo_txid": "3c7c0f5c6a0d3f0ab5c8bcef0adf3be56f5aeed8b2dd1504b7a950fc4fee1f46",
					 *           "utxo_vout": 1
					 *         },
					 *         {
					 *           "inscription_id": "360550a31c9510ed5052c4351619bf68d5ae3f218bf2e9c1092090dbcf86acb3i0",
					 *           "satoshis": 546,
					 *           "utxo_block_height": 850976,
					 *           "utxo_confirmations": 15735,
					 *           "utxo_sat_offset": 0,
					 *           "utxo_txid": "3c7c0f5c6a0d3f0ab5c8bcef0adf3be56f5aeed8b2dd1504b7a950fc4fee1f46",
					 *           "utxo_vout": 1
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000ec10254178fe52253f40c1fad252e892d9aa22ee8fa7",
					 *         "block_height": 866710
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedInscriptionByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	inscription_activity_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only transactions created on or after a specific height */
				from?: number | null;
				/** @description Return only transactions created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/**
				 * @description Return only transactions containing a specific inscription, specified by an inscription ID. In presence of activity_kind, it relates to this specific inscription. In presence of exclude_self_transfers, it is this specific inscription that should be sent or received but not self-transferred.
				 * @example 6fb976ab49dcec017f1e201e84395983204ae1a7c2abf7ced0a85d692e442799i0
				 */
				inscription_id?: string | null;
				/** @description Filter txs by presence of specific activity kind. Supported values: send, receive, self_transfer. In presence of inscription filter, the activity kind relates to that specific inscription. In presence of exclude_self_transfers, this activity kind cannot be self_transfer. */
				activity_kind?:
					| components["schemas"]["InscriptionActivityKindByAddress"]
					| null;
				/** @description Exclude txs only containing inscriptions self-transfers. In presence of activity_kind, it cannot be self_transfer. In presence of inscription filter, that specific inscription should be sent or received, not self-transferred. */
				exclude_self_transfers?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1p27j3fa2mr3d50m3uaavr0ntyzr0v2a27n48lc9gxpkzd4xye6dgs2tzx6p
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 60911,
					 *           "height": 836717,
					 *           "received": [
					 *             {
					 *               "from": {
					 *                 "address": "bc1p4at29alvmmtunc5ffcpm9n5e4rvz63hlrjcrgd2zh7d7jy24xgns2g7rw7",
					 *                 "input_index": 0,
					 *                 "sat_offset": 0,
					 *                 "script_pubkey": "5120af56a2f7ecded7c9e2894e03b2ce99a8d82d46ff1cb0343542bf9be911553227"
					 *               },
					 *               "inscription_id": "696936486c96124784d46dec66dd9e806280a182d1addf9763ff4bb92d0bc918i64",
					 *               "to": {
					 *                 "address": "bc1p27j3fa2mr3d50m3uaavr0ntyzr0v2a27n48lc9gxpkzd4xye6dgs2tzx6p",
					 *                 "output_txid": "a977a36055ba3d26203c82e6ee585539cadd12c3d17b236ffb67c051320b8991",
					 *                 "output_vout": 0,
					 *                 "sat_offset": 0,
					 *                 "script_pubkey": "512057a514f55b1c5b47ee3cef5837cd6410dec5755e9d4ffc15060d84da9899d351"
					 *               }
					 *             }
					 *           ],
					 *           "self_transferred": [],
					 *           "sent": [],
					 *           "tx_hash": "a977a36055ba3d26203c82e6ee585539cadd12c3d17b236ffb67c051320b8991"
					 *         },
					 *         {
					 *           "confirmations": 60910,
					 *           "height": 836718,
					 *           "received": [],
					 *           "self_transferred": [],
					 *           "sent": [
					 *             {
					 *               "from": {
					 *                 "address": "bc1pjuewj3dd4kpjen4zaqxd354jnwdjunewu7ncuaqqgsr0xa4cczzseg9066",
					 *                 "input_index": 2,
					 *                 "sat_offset": 0,
					 *                 "script_pubkey": "51209732e945adad832ccea2e80cd8d2b29b9b2e4f2ee7a78e74004406f376b8c085"
					 *               },
					 *               "inscription_id": "696936486c96124784d46dec66dd9e806280a182d1addf9763ff4bb92d0bc918i64",
					 *               "to": {
					 *                 "address": "bc1pjuewj3dd4kpjen4zaqxd354jnwdjunewu7ncuaqqgsr0xa4cczzseg9066",
					 *                 "output_txid": "7647d53756d6f03b5191baaca26d84dbe2715406912eb2543c9d19c892a29c73",
					 *                 "output_vout": 1,
					 *                 "sat_offset": 0,
					 *                 "script_pubkey": "51209732e945adad832ccea2e80cd8d2b29b9b2e4f2ee7a78e74004406f376b8c085"
					 *               }
					 *             }
					 *           ],
					 *           "tx_hash": "7647d53756d6f03b5191baaca26d84dbe2715406912eb2543c9d19c892a29c73"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "0000000000000000000119bd8dffd7d8285a69744011aa98f0d9091b0555ca46",
					 *         "block_height": 897627
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedInscriptionActivityByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	runes_by_address: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "2584333:39": "100000.00",
					 *         "2585186:140": "100000.000000000000"
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "0000000088bee3b517745636443c8f11aff45209449300a5d8461c336e467925",
					 *         "block_height": 2815520
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedRuneQuantities"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rune_activity_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only transactions created on or after a specific height */
				from?: number | null;
				/** @description Return only transactions created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/**
				 * @description Return only transactions containing a specific rune, specified either by the rune ID (etching block number and transaction index) or name (spaced or un-spaced). In presence of activity_kind, it relates to this specific rune. In presence of exclude_self_transfers, it is this specific rune that the queried address should see increase or decrease in balance in the tx, not just being self-transferred.
				 * @example 840000:3
				 */
				rune?: string | null;
				/** @description Filter txs by presence specific activity kind. Supported values: increased, decreased, self_transfer. In presence of rune filter, the activity kind relates to that specific rune. In presence of exclude_self_transfers, this activity kind cannot be self_transfer. */
				activity_kind?:
					| components["schemas"]["RuneActivityKindByAddress"]
					| null;
				/** @description Exclude txs only containing runes self-transfers. In presence of activity_kind, it cannot be self_transfer. In presence of rune filter, that specific rune should be sent or received, not self-transferred. */
				exclude_self_transfers?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1p27j3fa2mr3d50m3uaavr0ntyzr0v2a27n48lc9gxpkzd4xye6dgs2tzx6p
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 21684,
					 *           "decreased_balances": [],
					 *           "etched_rune": null,
					 *           "height": 875944,
					 *           "increased_balances": [
					 *             {
					 *               "amount": "1453573",
					 *               "rune_id": "840000:28"
					 *             }
					 *           ],
					 *           "minted": null,
					 *           "self_transfers": [],
					 *           "tx_hash": "6a4237d43719e0766a8333eb8531b3bae9b20e7484e6962a731773b883315da1"
					 *         },
					 *         {
					 *           "confirmations": 21558,
					 *           "decreased_balances": [],
					 *           "etched_rune": null,
					 *           "height": 876070,
					 *           "increased_balances": [],
					 *           "minted": null,
					 *           "self_transfers": [
					 *             {
					 *               "amount": "1453573",
					 *               "rune_id": "840000:28"
					 *             }
					 *           ],
					 *           "tx_hash": "1c2c45980432108fda7b4eb2a390bd1cae7aac62b9309f5ef3911960e50b8501"
					 *         },
					 *         {
					 *           "confirmations": 21525,
					 *           "decreased_balances": [
					 *             {
					 *               "amount": "207654",
					 *               "rune_id": "840000:28"
					 *             }
					 *           ],
					 *           "etched_rune": null,
					 *           "height": 876103,
					 *           "increased_balances": [],
					 *           "minted": null,
					 *           "self_transfers": [],
					 *           "tx_hash": "cbcbac069d142c303b062dda88635e4939d69120f66d89a9da17ebd0ff806a1f"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "0000000000000000000119bd8dffd7d8285a69744011aa98f0d9091b0555ca46",
					 *         "block_height": 897627
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedRuneActivityByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rune_utxos_by_address_v2: {
		parameters: {
			query?: {
				/**
				 * @description Return only UTxOs containing a specific Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 840000:3
				 */
				rune?: string | null;
				/** @description The property by which response items should be sorted. Supported values: height (height of block which produced the UTxO - default), amount (amount of runes in UTxO) */
				order_by?: components["schemas"]["OrderBy"] | null;
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page. */
				cursor?: string | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1p27j3fa2mr3d50m3uaavr0ntyzr0v2a27n48lc9gxpkzd4xye6dgs2tzx6p
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 13636,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 3
					 *         },
					 *         {
					 *           "confirmations": 13636,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 4
					 *         },
					 *         {
					 *           "confirmations": 13636,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 5
					 *         },
					 *         {
					 *           "confirmations": 13636,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 6
					 *         },
					 *         {
					 *           "confirmations": 13636,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 7
					 *         },
					 *         {
					 *           "confirmations": 13636,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 8
					 *         },
					 *         {
					 *           "confirmations": 13636,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 9
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000e0b35ac5973cb61e9994c78b83d20f75f4b8f8d54fff",
					 *         "block_height": 890589
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedRuneUtxoByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rune_utxos_by_address: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description The order in which the results are sorted (by height at which UTxO was produced) */
				order?: ("asc" | "desc") | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1p27j3fa2mr3d50m3uaavr0ntyzr0v2a27n48lc9gxpkzd4xye6dgs2tzx6p
				 */
				address: string;
				/**
				 * @description Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 876947:7
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 13634,
					 *           "height": 876954,
					 *           "rune_amount": "2500000",
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 3
					 *         },
					 *         {
					 *           "confirmations": 13634,
					 *           "height": 876954,
					 *           "rune_amount": "2500000",
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 4
					 *         },
					 *         {
					 *           "confirmations": 13634,
					 *           "height": 876954,
					 *           "rune_amount": "2500000",
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 5
					 *         },
					 *         {
					 *           "confirmations": 13634,
					 *           "height": 876954,
					 *           "rune_amount": "2500000",
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 6
					 *         },
					 *         {
					 *           "confirmations": 13634,
					 *           "height": 876954,
					 *           "rune_amount": "2500000",
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 7
					 *         },
					 *         {
					 *           "confirmations": 13634,
					 *           "height": 876954,
					 *           "rune_amount": "2500000",
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 8
					 *         },
					 *         {
					 *           "confirmations": 13634,
					 *           "height": 876954,
					 *           "rune_amount": "2500000",
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 9
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "0000000000000000000210d44d102ab68eaa052ce03fbe216d313294725bdfaf",
					 *         "block_height": 890587
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedDeprecatedRuneUtxoByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	address_statistics: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1qcx7ys0ahvtfqcc63sfn6axls0qrhkadnslpd94
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "runes": false,
					 *         "sat_balance": "209258",
					 *         "total_inputs": 0,
					 *         "total_inscriptions": 0,
					 *         "total_outputs": 3,
					 *         "total_sat_in_inputs": 0,
					 *         "total_sat_in_outputs": 209258,
					 *         "total_txs": 3,
					 *         "total_utxos": 3
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "000000000000000000017e71733448d2c8e2f4c08105d97f7c1868acb4acc7ba",
					 *         "block_height": 903881
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedAddressStatistics"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	txs_by_address: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Only return transactions with at least a certain amount of confirmations */
				confirmations?: number | null;
				/** @description The order in which the results are sorted (by height at which transaction was included in a block) */
				order?: ("asc" | "desc") | null;
				/** @description Return only transactions included on or after a specific height */
				from?: number | null;
				/** @description Return only transactions included on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "height": 5277680,
					 *           "input": true,
					 *           "output": true,
					 *           "tx_hash": "1cd3a819876660e98d3d5d9e4d36ddbd1ae6f96e58de0d3977f0ef2ce6e4194a"
					 *         },
					 *         {
					 *           "height": 5277682,
					 *           "input": true,
					 *           "output": true,
					 *           "tx_hash": "ad7b8037fc7551fd9e644ddd39bc0501bc6aac865284fd79dde8b732af45acd9"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "8ac9689a7901531013c3cd621eae8b8e75b1994f477d616a4faa2a10afd9be58",
					 *         "block_height": 5277710
					 *       },
					 *       "next_cursor": "AAAAAABQh_JgAAlg2axFrzK36N15_YRShqxqvAEFvDndTWSe_VF1_DeAe60"
					 *     } */
					"application/json": components["schemas"]["PaginatedInvolvedTransaction"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	utxos_by_address: {
		parameters: {
			query?: {
				/** @description Ignore UTxOs containing less than 100000 sats */
				filter_dust?: boolean | null;
				/** @description Ignore UTxOs containing less than specified satoshis */
				filter_dust_threshold?: number | null;
				/** @description Exclude UTxOs involved in metaprotocols (currently only runes and inscriptions will be discovered, more metaprotocols may be supported in future) */
				exclude_metaprotocols?: boolean | null;
				/** @description When used with exclude_metaprotocols=true, still include UTXOs which only contain used BRC20 inscriptions */
				ignore_used_brc20?: boolean | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description The order in which the results are sorted (by height at which UTxO was produced) */
				order?: ("asc" | "desc") | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8",
					 *           "confirmations": 23,
					 *           "height": 2815497,
					 *           "inscriptions": [],
					 *           "runes": [],
					 *           "satoshis": "546",
					 *           "script_pubkey": "00140df0d276eacd58b09a74d5e0288756e8505787f5",
					 *           "txid": "cb9532641412a6fa6f329e8728a8f7554dcaa6cdaec1355bd2bd2903cd61c6eb",
					 *           "vout": 1
					 *         },
					 *         {
					 *           "address": "bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8",
					 *           "confirmations": 20,
					 *           "height": 2815500,
					 *           "inscriptions": [
					 *             {
					 *               "inscription_id": "47bb5438d366863b25b4b1782af0d0cf0a89a922adce5da81253790d3e651501i0",
					 *               "offset": 0
					 *             }
					 *           ],
					 *           "runes": [
					 *             {
					 *               "amount": "1.00",
					 *               "rune_id": "840000:1"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "script_pubkey": "00140df0d276eacd58b09a74d5e0288756e8505787f5",
					 *           "txid": "6312095baa2a42dec6aa41888c01fd74ecce2ab139c17a0a6d01d42a89b67953",
					 *           "vout": 1
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "0000000088bee3b517745636443c8f11aff45209449300a5d8461c336e467925",
					 *         "block_height": 2815520
					 *       },
					 *       "next_cursor": "AAAAAAAq9gxgU3m2iSrUAW0KesE5sSrO7HT9AYyIQarG3kIqqlsJEmNgAAAAAQ"
					 *     } */
					"application/json": components["schemas"]["PaginatedUtxo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_brc20s: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         "aosi",
					 *         "ap'q",
					 *         "fctb"
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "0000000000000000000235c5edb5c89ef52715452a2aca610949194b3361ef7d",
					 *         "block_height": 850368
					 *       },
					 *       "next_cursor": "BGZjdGI"
					 *     } */
					"application/json": components["schemas"]["PaginatedBrc20Ticker"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	brc20_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description BRC20 ticker string
				 * @example FCTB
				 */
				ticker: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "deploy_inscription": "3d983a724310f511cfca0031ee2b980b474a0abe1e7e995b7e6d2873e2cbfd5fi0",
					 *         "holders": 7,
					 *         "minted_supply": "19420000.000000000000000000",
					 *         "terms": {
					 *           "dec": 18,
					 *           "limit": "1000000.000000000000000000",
					 *           "max": "21000000.000000000000000000",
					 *           "self_mint": false
					 *         },
					 *         "ticker": "fctb",
					 *         "ticker_hex": "66637462"
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "0000000000000000000214bfa0a73e1cc7663917a933bfb1c66a6613f88dabdd",
					 *         "block_height": 851556
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedBrc20Info"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	brc20_holders_by_ticker: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description BRC20 ticker string
				 * @example TUAH
				 */
				ticker: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1q764zfcx3uw0dcvcdh7nnwm5fvsml0c2tgn942v",
					 *           "balance": "9000000.000000000000000000",
					 *           "script_pubkey": "0014f6aa24e0d1e39edc330dbfa7376e896437f7e14b"
					 *         },
					 *         {
					 *           "address": "bc1pqfhj6tlxgpvc72mvn9hh0z666k45fpxgsej92d9q08sfe572mhlqca68ld",
					 *           "balance": "420000.000000000000000000",
					 *           "script_pubkey": "5120026f2d2fe640598f2b6c996f778b5ad5ab4484c886645534a079e09cd3caddfe"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000002747b9e3c0097172bc23489d686e8b885a6fa89c2c4da",
					 *         "block_height": 850534
					 *       },
					 *       "next_cursor": "19FwuaejD9hE1R4ckTQKaqe0ecA"
					 *     } */
					"application/json": components["schemas"]["PaginatedBrc20Holder"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	inscriptions_by_collection_symbol: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Collection symbol (UTF-8)
				 * @example twick
				 */
				collection_symbol: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         "85a4c2531f149cd8c69a34a9139cace0bdce99e906ee5ad5a4620cdef6adfc6ci0",
					 *         "7d75fe5bea7f11823050d029d281a8b23e9660c5cc133ad3f8b36fef8c8329c0i0",
					 *         "0c80a14912bf35b9303de0758eee6e91532f539104db7f34e760ed1574170d88i0",
					 *         "7fc5d6c9ffffe461b31dc96570134b3d658da767b51225d1771ba7ccffcf6201i0",
					 *         "3204df2e4908f47939878a0681733852ed3ddffca425f25bf67746fd099c78b8i0",
					 *         "491b5144bb2b67a05360e8cbd8ff0beba2a5e3823944796aa7e2680583403184i0",
					 *         "23fa74866576bd731b69fdc900d14b4d9ce904a9be16790d7dd76ac9cf652862i0",
					 *         "70abb5f531adf694438f3b14167f885336c280277f329d6c5fe720b8f5bb20aai0",
					 *         "793a7423c399c87de15f98499656df8bdffabf452879185f452ca33a5943bfb6i0",
					 *         "ced74edbbeb7ccac032a8a218a2ee6a7068963a1c4ae9a403969cc621ffe4f2ei0"
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001998e2059bcbb25f76fd0ef39db8ddfc5c31c5ea95f1f",
					 *         "block_height": 876644
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedInscriptionsByCollectionSymbol"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	collection_metadata_by_collection_symbol: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Collection symbol (UTF-8)
				 * @example twick
				 */
				collection_symbol: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "chain": "btc",
					 *         "createdAt": "Sun, 17 Sep 2023 06:38:15 GMT",
					 *         "description": "A collection of 1/1 art inscribed forever on the Bitcoin Blockchain. All 1/1s are inscribed on special sats.",
					 *         "discordLink": "",
					 *         "imageURI": "https://creator-hub-prod.s3.us-east-2.amazonaws.com/ord-twick_pfp_1705357607896.jpeg",
					 *         "inscriptionIcon": "736d7692fb2b405f7efdd05b57787a10bb0385b7dd394aa67654d62119e9d825i0",
					 *         "labels": [],
					 *         "max_inscription_number": "63111093",
					 *         "min_inscription_number": "31921195",
					 *         "name": "1/1 ART BY TWICK",
					 *         "supply": 10,
					 *         "symbol": "twick",
					 *         "twitterLink": "https://twitter.com/Twickert_",
					 *         "websiteLink": "https://www.artbytwick.com/"
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001998e2059bcbb25f76fd0ef39db8ddfc5c31c5ea95f1f",
					 *         "block_height": 876644
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedCollectionMetadataBySymbol"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	collection_stats_by_collection_symbol: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Collection symbol (UTF-8)
				 * @example twick
				 */
				collection_symbol: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "floorPrice": "0.05",
					 *         "inscriptionNumberMax": "200000",
					 *         "inscriptionNumberMin": "100000",
					 *         "owners": "42",
					 *         "pendingTransactions": "3",
					 *         "supply": "1000",
					 *         "symbol": "twick",
					 *         "totalListed": "150",
					 *         "totalVolume": "123456789"
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001998e2059bcbb25f76fd0ef39db8ddfc5c31c5ea95f1f",
					 *         "block_height": 876644
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedCollectionStatsBySymbol"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	inscription_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Inscription ID
				 * @example 43cb5e2d66f5af8eb04391ef3d4048edc30a1f9edad594f83609fd7861a0f5e1i0
				 */
				inscription_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "collection_symbol": "kikalepuppete",
					 *         "content_body_preview": null,
					 *         "content_length": 934,
					 *         "content_type": "text/html",
					 *         "created_at": 867795,
					 *         "current_location": {
					 *           "address": "bc1pyae5wn0hxwestrxg4vmwrw58stwzkhp64le0uulahj8xzp5ruz8s3m6xh7",
					 *           "script_pubkey": "51202773474df733b3058cc8ab36e1ba8782dc2b5c3aaff2fe73fdbc8e610683e08f",
					 *           "utxo_sat_offset": 0,
					 *           "utxo_txid": "471852c0dff23a9d345a4550db8a5ff1a9cd0c1ff8e91f344762fba9a1bf000f",
					 *           "utxo_vout": 1
					 *         },
					 *         "inscription_id": "43cb5e2d66f5af8eb04391ef3d4048edc30a1f9edad594f83609fd7861a0f5e1i0",
					 *         "inscription_number": 76800550
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "000000000000000000018ebea33e7361bc4059eb6ff35d0a80836717accfc4a9",
					 *         "block_height": 888637
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedInscriptionInfo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	activity_by_inscription: {
		parameters: {
			query?: {
				/** @description The max number of transactions per page */
				count?: number | null;
				/** @description The order in which the results are sorted (by block height and tx index in the block) */
				order?: ("asc" | "desc") | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Inscription ID
				 * @example 6fb976ab49dcec017f1e201e84395983204ae1a7c2abf7ced0a85d692e442799i0
				 */
				inscription_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "from": {
					 *             "address": "bc1pjzf5qmmzt57mtxgrgh42aazhnzwk7ge59e89dl6rde5zwg8he02q9u4xrr",
					 *             "input_index": 0,
					 *             "sat_offset": 0,
					 *             "script_pubkey": "51209093406f625d3db5990345eaaef457989d6f23342e4e56ff436e682720f7cbd4"
					 *           },
					 *           "height": 839418,
					 *           "to": {
					 *             "address": "bc1p5u4y8vdhn46adxhfv5scfv4c8myykw6r5uyzlavm42k4wgjewktq7xqcyr",
					 *             "output_vout": 0,
					 *             "sat_offset": 0,
					 *             "script_pubkey": "5120a72a43b1b79d75d69ae9652184b2b83ec84b3b43a7082ff59baaad5722597596"
					 *           },
					 *           "tx_hash": "b1ef66c2d1a047cbaa6260b74daac43813924378fe08ef8545da4cb79e8fcf00",
					 *           "tx_index": 1257,
					 *           "type": "transfer"
					 *         },
					 *         {
					 *           "from": {
					 *             "address": "bc1p5u4y8vdhn46adxhfv5scfv4c8myykw6r5uyzlavm42k4wgjewktq7xqcyr",
					 *             "input_index": 0,
					 *             "sat_offset": 0,
					 *             "script_pubkey": "5120a72a43b1b79d75d69ae9652184b2b83ec84b3b43a7082ff59baaad5722597596"
					 *           },
					 *           "height": 839876,
					 *           "to": {
					 *             "address": "bc1ppth27qnr74qhusy9pmcyeaelgvsfky6qzquv9nf56gqmte59vfhqwkqguh",
					 *             "output_vout": 0,
					 *             "sat_offset": 0,
					 *             "script_pubkey": "51200aeeaf0263f5417e40850ef04cf73f43209b13401038c2cd34d201b5e685626e"
					 *           },
					 *           "tx_hash": "47c7260764af2ee17aa584d9c035f2e5429aefd96b8016cfe0e3f0bcf04869a3",
					 *           "tx_index": 887,
					 *           "type": "transfer"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "000000000000000000001d3fb5743dcb30e12af7b0cd9c8d95c8b1a1fdd5c8d8",
					 *         "block_height": 839908
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedTxByInscription"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	collection_metadata_by_inscription: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Inscription ID
				 * @example 0001a5f7af47c79fa8acfb4fb4d4588d561a86b9f45dd1cf9120663dc74c0a08i0
				 */
				inscription_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "chain": "btc",
					 *         "createdAt": "Fri, 26 May 2023 04:23:17 GMT",
					 *         "description": "Ordinal #99999 has 50 alien friends. Would you like to join his Action Alien Club?",
					 *         "discordLink": "",
					 *         "imageURI": "https://bafkreihillpn43rubd2wffzot5ccungccpen6btcofn2kylutexkpkaymq.ipfs.nftstorage.link/",
					 *         "inscriptionIcon": "46b576bc669c03227f273103654c46fa9b516374ed6a2b8d03cc786e95fd50f3i0",
					 *         "labels": [],
					 *         "max_inscription_number": "114274",
					 *         "min_inscription_number": "90551",
					 *         "name": "99999 Action Alien Club",
					 *         "supply": 50,
					 *         "symbol": "aaclub",
					 *         "twitterLink": "http://www.twitter.com/oxfordyazuka",
					 *         "websiteLink": ""
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001998e2059bcbb25f76fd0ef39db8ddfc5c31c5ea95f1f",
					 *         "block_height": 876644
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedCollectionMetadataByInscription"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	content_by_inscription_id: {
		parameters: {
			query?: {
				/** @description The max number of bytes per page */
				count?: number | null;
				/** @description Pagination cursor string: the offset in the content body, in the form of an integer. Use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Inscription ID
				 * @example 7d0a2dd897222913d58fc957b0429526117a0a61c964642fe93b077f328ccec1i0
				 */
				inscription_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "content_body_page": "AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiYw==",
					 *         "remaining_bytes": 2935,
					 *         "total_length": 3035
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000ec10254178fe52253f40c1fad252e892d9aa22ee8fa7",
					 *         "block_height": 866710
					 *       },
					 *       "next_cursor": "AAAAAAAAAGQ"
					 *     } */
					"application/json": components["schemas"]["PaginatedContentBody"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	token_metadata_by_inscription: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Inscription ID
				 * @example 0001a5f7af47c79fa8acfb4fb4d4588d561a86b9f45dd1cf9120663dc74c0a08i0
				 */
				inscription_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "chain": "btc",
					 *         "collection": {
					 *           "chain": "btc",
					 *           "createdAt": "Fri, 26 May 2023 04:23:17 GMT",
					 *           "creatorTipsAddress": "",
					 *           "description": "Ordinal #99999 has 50 alien friends. Would you like to join his Action Alien Club?",
					 *           "disableRichThumbnailGeneration": false,
					 *           "discordLink": "",
					 *           "enableCollectionOffer": true,
					 *           "imageURI": "https://bafkreihillpn43rubd2wffzot5ccungccpen6btcofn2kylutexkpkaymq.ipfs.nftstorage.link/",
					 *           "inscriptionIcon": "46b576bc669c03227f273103654c46fa9b516374ed6a2b8d03cc786e95fd50f3i0",
					 *           "labels": [],
					 *           "name": "99999 Action Alien Club",
					 *           "overrideContentType": "",
					 *           "supply": 50,
					 *           "symbol": "aaclub",
					 *           "twitterLink": "http://www.twitter.com/oxfordyazuka",
					 *           "websiteLink": ""
					 *         },
					 *         "collectionSymbol": "aaclub",
					 *         "contentPreviewURI": "https://ord-mirror.magiceden.dev/preview/0001a5f7af47c79fa8acfb4fb4d4588d561a86b9f45dd1cf9120663dc74c0a08i0",
					 *         "contentType": "image/gif",
					 *         "contentURI": "https://ord-mirror.magiceden.dev/content/0001a5f7af47c79fa8acfb4fb4d4588d561a86b9f45dd1cf9120663dc74c0a08i0",
					 *         "displayName": "Action Alien #22",
					 *         "genesisTransaction": "0001a5f7af47c79fa8acfb4fb4d4588d561a86b9f45dd1cf9120663dc74c0a08",
					 *         "genesisTransactionBlockHash": "00000000000000000006548ee473a9237f601bae4e968d04cf273089306a6ebf",
					 *         "genesisTransactionBlockHeight": 776602,
					 *         "genesisTransactionBlockTime": "Wed, 15 Feb 2023 04:54:08 GMT",
					 *         "id": "0001a5f7af47c79fa8acfb4fb4d4588d561a86b9f45dd1cf9120663dc74c0a08i0",
					 *         "inscriptionNumber": 100198,
					 *         "itemType": "Inscription",
					 *         "lastSalePrice": 200000,
					 *         "listed": true,
					 *         "listedAt": "Wed, 15 Nov 2023 13:52:21 GMT",
					 *         "listedForMint": false,
					 *         "listedMakerFeeBp": 50,
					 *         "listedPrice": 4400000,
					 *         "listedSellerReceiveAddress": "bc1pw57nwvp0g4uz053v7z404zyqn4xykjxsxffh2tga095w5kmdtelsjh656y",
					 *         "location": "f75f3de0977213530dfea6ba4869f5229e778a549ba8f47247c6503e663adda4:1:0",
					 *         "locationBlockHash": "000000000000000000016206f6ad6b8989ae590f0b5cb5727ba786dc4f7b15ac",
					 *         "locationBlockHeight": 791716,
					 *         "locationBlockTime": "Sun, 28 May 2023 02:33:26 GMT",
					 *         "meta": {
					 *           "attributes": null,
					 *           "name": "Action Alien #22"
					 *         },
					 *         "output": "f75f3de0977213530dfea6ba4869f5229e778a549ba8f47247c6503e663adda4:1",
					 *         "outputValue": 10000,
					 *         "owner": "bc1pw57nwvp0g4uz053v7z404zyqn4xykjxsxffh2tga095w5kmdtelsjh656y",
					 *         "sacAddress": "",
					 *         "sat": 1916312270479035,
					 *         "satBlockHeight": 756099,
					 *         "satBlockTime": "Wed, 28 Sep 2022 17:20:31 GMT",
					 *         "satName": "aguozseyvuc",
					 *         "satRarity": "common",
					 *         "satributes": [
					 *           "Common"
					 *         ],
					 *         "updatedAt": "Tue, 11 Jun 2024 20:09:56 GMT"
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001998e2059bcbb25f76fd0ef39db8ddfc5c31c5ea95f1f",
					 *         "block_height": 876644
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedTokenMetadataByInscription"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_runes: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "id": "840000:1",
					 *           "spaced_name": "Zâ€¢Zâ€¢Zâ€¢Zâ€¢Zâ€¢FEHUâ€¢Zâ€¢Zâ€¢Zâ€¢Zâ€¢Z"
					 *         },
					 *         {
					 *           "id": "840000:2",
					 *           "spaced_name": "DECENTRALIZED"
					 *         },
					 *         {
					 *           "id": "840000:3",
					 *           "spaced_name": "DOGâ€¢GOâ€¢TOâ€¢THEâ€¢MOON"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000002c0cc73626b56fb3ee1ce605b0ce125cc4fb58775a0a9",
					 *         "block_height": 840002
					 *       },
					 *       "next_cursor": "AAAAAAAM0UAAAAAD"
					 *     } */
					"application/json": components["schemas"]["PaginatedRuneIdAndName"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	info_by_rune: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 2519999:31
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "divisibility": 2,
					 *         "etching_cenotaph": false,
					 *         "etching_height": 840000,
					 *         "etching_tx": "2bb85f4b004be6da54f766c17c1e855187327112c231ef2ff35ebad0ea67c69e",
					 *         "id": "840000:1",
					 *         "max_supply": "111111111.00",
					 *         "mints": 5226,
					 *         "name": "ZZZZZFEHUZZZZZ",
					 *         "premine": "110000000.00",
					 *         "spaced_name": "Zâ€¢Zâ€¢Zâ€¢Zâ€¢Zâ€¢FEHUâ€¢Zâ€¢Zâ€¢Zâ€¢Zâ€¢Z",
					 *         "symbol": "áš ",
					 *         "terms": {
					 *           "amount_per_mint": "1.00",
					 *           "end_height": null,
					 *           "end_offset": null,
					 *           "mint_txs_cap": "1111111",
					 *           "start_height": null,
					 *           "start_offset": null
					 *         },
					 *         "unique_holders": 1568
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001332b3017e2b72bdd063145bbf808b3c1722a0fd60859",
					 *         "block_height": 840051
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedRuneInfo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	activity_by_rune: {
		parameters: {
			query?: {
				/** @description The max number of transactions per page */
				count?: number | null;
				/** @description The order in which the results are sorted (by block height and tx index in the block) */
				order?: ("asc" | "desc") | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/** @description Return only transactions created on or after a specific height */
				from?: number | null;
				/** @description Return only transactions created on or before a specific height */
				to?: number | null;
			};
			header?: never;
			path: {
				/**
				 * @description Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 840110:2698
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "burned": null,
					 *           "confirmations": 361,
					 *           "etching_tx": true,
					 *           "height": 840110,
					 *           "minted": null,
					 *           "receivers": [
					 *             {
					 *               "address": "bc1plr56q0q4pyj8u7khys2ju8xnscp2y304u83gr06aq8ryt2uf82hq0hzm8z",
					 *               "amount": "777777777777.77",
					 *               "script_pubkey": "5120f8e9a03c1509247e7ad724152e1cd38602a245f5e1e281bf5d01c645ab893aae"
					 *             }
					 *           ],
					 *           "self_transfers": [],
					 *           "senders": [],
					 *           "tx_hash": "5a072b4619077bd2f718dc58784eeb22211aa867a82a523e282df11b0b234a14"
					 *         },
					 *         {
					 *           "burned": null,
					 *           "confirmations": 359,
					 *           "etching_tx": false,
					 *           "height": 840112,
					 *           "minted": "888888888888.88",
					 *           "receivers": [
					 *             {
					 *               "address": "bc1pc9mhstm0sggvtz0afla0f6mm3jevm3dwq2m5c5sckj4w2y3gsgxs456833",
					 *               "amount": "888888888888.88",
					 *               "script_pubkey": "5120c177782f6f8210c589fd4ffaf4eb7b8cb2cdc5ae02b74c5218b4aae51228820d"
					 *             }
					 *           ],
					 *           "self_transfers": [],
					 *           "senders": [],
					 *           "tx_hash": "0477cd84732d4fd0aad0dc5fad14f09b0ad985c4184c0d0de9202637cc67ce9b"
					 *         },
					 *         {
					 *           "burned": null,
					 *           "confirmations": 359,
					 *           "etching_tx": false,
					 *           "height": 840112,
					 *           "minted": null,
					 *           "receivers": [
					 *             {
					 *               "address": "bc1pc9mhstm0sggvtz0afla0f6mm3jevm3dwq2m5c5sckj4w2y3gsgxs456833",
					 *               "amount": "100000.00",
					 *               "script_pubkey": "5120c177782f6f8210c589fd4ffaf4eb7b8cb2cdc5ae02b74c5218b4aae51228820d"
					 *             }
					 *           ],
					 *           "self_transfers": [],
					 *           "senders": [
					 *             {
					 *               "address": "bc1plr56q0q4pyj8u7khys2ju8xnscp2y304u83gr06aq8ryt2uf82hq0hzm8z",
					 *               "amount": "100000.00",
					 *               "script_pubkey": "5120f8e9a03c1509247e7ad724152e1cd38602a245f5e1e281bf5d01c645ab893aae"
					 *             }
					 *           ],
					 *           "tx_hash": "f4ce17a5859a720aa77647d19c24c06e556bfffbb5409e8a270eec0e363a7cab"
					 *         },
					 *         {
					 *           "burned": null,
					 *           "confirmations": 357,
					 *           "etching_tx": false,
					 *           "height": 840114,
					 *           "minted": null,
					 *           "receivers": [
					 *             {
					 *               "address": "bc1p99uy665vtcnxu9e2hsz4d9lx2tvr59lfaqcsg5na3czqq2hgqw7s4l0937",
					 *               "amount": "200000.00",
					 *               "script_pubkey": "512029784d6a8c5e266e172abc055697e652d83a17e9e83104527d8e04002ae803bd"
					 *             }
					 *           ],
					 *           "self_transfers": [],
					 *           "senders": [
					 *             {
					 *               "address": "bc1plr56q0q4pyj8u7khys2ju8xnscp2y304u83gr06aq8ryt2uf82hq0hzm8z",
					 *               "amount": "200000.00",
					 *               "script_pubkey": "5120f8e9a03c1509247e7ad724152e1cd38602a245f5e1e281bf5d01c645ab893aae"
					 *             }
					 *           ],
					 *           "tx_hash": "e366c55626dbde705361df497c2257853a08068edf3e5ab85daad35b1f70ee2c"
					 *         },
					 *         {
					 *           "burned": null,
					 *           "confirmations": 357,
					 *           "etching_tx": false,
					 *           "height": 840114,
					 *           "minted": null,
					 *           "receivers": [
					 *             {
					 *               "address": "bc1qr4cymlscpespfghnkuxqhwmey674fas8uzvrxp",
					 *               "amount": "300000.00",
					 *               "script_pubkey": "00141d704dfe180e6014a2f3b70c0bbb7926bd54f607"
					 *             }
					 *           ],
					 *           "self_transfers": [],
					 *           "senders": [
					 *             {
					 *               "address": "bc1pc9mhstm0sggvtz0afla0f6mm3jevm3dwq2m5c5sckj4w2y3gsgxs456833",
					 *               "amount": "300000.00",
					 *               "script_pubkey": "5120c177782f6f8210c589fd4ffaf4eb7b8cb2cdc5ae02b74c5218b4aae51228820d"
					 *             }
					 *           ],
					 *           "tx_hash": "358ce9038a14becdce89231709db29b2b23c744e10aef2995b62094830481828"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001901beb6d0ded42e731327a95e9c81a3d29336cc79402",
					 *         "block_height": 840470
					 *       },
					 *       "next_cursor": "AAAAAAAM0bJgAQFgKBhIMEgJYluZ8q4QTnQ8srIp2wkXI4nOzb4UigPpjDU"
					 *     } */
					"application/json": components["schemas"]["PaginatedTxsByRune"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	holders_by_rune: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 2519999:31
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1q764zfcx3uw0dcvcdh7nnwm5fvsml0c2tgn942v",
					 *           "balance": "9000000.000000000000000000",
					 *           "script_pubkey": "0014f6aa24e0d1e39edc330dbfa7376e896437f7e14b"
					 *         },
					 *         {
					 *           "address": "bc1pqfhj6tlxgpvc72mvn9hh0z666k45fpxgsej92d9q08sfe572mhlqca68ld",
					 *           "balance": "420000.000000000000000000",
					 *           "script_pubkey": "5120026f2d2fe640598f2b6c996f778b5ad5ab4484c886645534a079e09cd3caddfe"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000002747b9e3c0097172bc23489d686e8b885a6fa89c2c4da",
					 *         "block_height": 850534
					 *       },
					 *       "next_cursor": "19FwuaejD9hE1R4ckTQKaqe0ecA"
					 *     } */
					"application/json": components["schemas"]["PaginatedRuneHolder"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	utxos_by_rune: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description The order in which the results are sorted (by height at which UTxO was produced) */
				order?: ("asc" | "desc") | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 2519999:31
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1ql8k89mfzqwjaqnq0y9uxummllp6v92fkykkv78",
					 *           "confirmations": 50,
					 *           "height": 840001,
					 *           "rune_amount": "1.00",
					 *           "satoshis": "546",
					 *           "script_pubkey": "0014f9ec72ed2203a5d04c0f21786e6f7ff874c2a936",
					 *           "txid": "fa2fa7ea017e9e8eaf701b26bb57c0ed3f550428b59df17bd789ad98f6bf5a2b",
					 *           "vout": 0
					 *         },
					 *         {
					 *           "address": "bc1qdkzx0dnzuyzjlu7qk86mc7rgkpwwms6zg5y5gd",
					 *           "confirmations": 50,
					 *           "height": 840001,
					 *           "rune_amount": "1.00",
					 *           "satoshis": "546",
					 *           "script_pubkey": "00146d8467b662e1052ff3c0b1f5bc7868b05cedc342",
					 *           "txid": "452378b6ef2bd45dbd1bada84b9468b57fcccbfef67777dfb99f5e8f3a7cfd80",
					 *           "vout": 0
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001332b3017e2b72bdd063145bbf808b3c1722a0fd60859",
					 *         "block_height": 840051
					 *       },
					 *       "next_cursor": "AAAAAAAM0UFggP18Oo9en7nfd3f2_svMf7VolEuorRu9XdQr77Z4I0VgAAAAAA"
					 *     } */
					"application/json": components["schemas"]["PaginatedRuneUtxo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	block_info: {
		parameters: {
			query?: {
				/** @description Whether numeric path param should be taken as timestamp instead of block height. Default: false. */
				from_timestamp?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Block height or block hash
				 * @example 000000000000000000004fe9dc835b41f2da749287c4d1fca9055d83b2e06fa4
				 */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "coinbase_tag": "A8tlDQgvVmlhQlRDLyz6vm1tPXaDOuJgXZs6zuF9J7o+V55Fu/UWyF9S+hZG5d/z+c8QAAAAAAAAABDThC4BY8HxNM7fc9SQsQ8AAAAAAA==",
					 *         "hash": "000000000000000000004fe9dc835b41f2da749287c4d1fca9055d83b2e06fa4",
					 *         "height": 878027,
					 *         "metaprotocols": [
					 *           "inscriptions",
					 *           "runes",
					 *           "brc20"
					 *         ],
					 *         "miner_name": "ViaBTC",
					 *         "size": 1865672,
					 *         "timestamp": "2025-01-06 02:09:37",
					 *         "total_fees": "2110512",
					 *         "total_txs": 1849,
					 *         "total_volume": "240371600038",
					 *         "unix_timestamp": 1736129377,
					 *         "weight_units": 3993329
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000002467d678b845978ef175b424cff2985860bb156280c53",
					 *         "block_height": 878064
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedBlock"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	inscription_activity_by_block: {
		parameters: {
			query?: {
				/** @description The max number of transactions (with inscription activity) per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Block height or block hash
				 * @example 00000000000000000000a7d0a1dac50a909601c93774d55bebdcd4000a2af5d1
				 */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "from": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "input_index": 0,
					 *             "sat_offset": 100409840,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           },
					 *           "inscription_id": "56f1eebc4cfc437cffc47caa5c08f2d4f5989ed8a8c5dd6cdec77996b0e055fdi0",
					 *           "to": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "output_vout": 20,
					 *             "sat_offset": 84345292,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           },
					 *           "tx_hash": "12fe2ce2d98aa43bb6184d095e8a64b9362c2fe1fee52cb5ba43f9623ef4c72b"
					 *         },
					 *         {
					 *           "from": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "input_index": 0,
					 *             "sat_offset": 100639840,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           },
					 *           "inscription_id": "196378911c21ee6eaac767be609106ad2efce6d36af822d54d9583a2256cb9c2i0",
					 *           "to": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "output_vout": 20,
					 *             "sat_offset": 84575292,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           },
					 *           "tx_hash": "12fe2ce2d98aa43bb6184d095e8a64b9362c2fe1fee52cb5ba43f9623ef4c72b"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000380fb362a3ad3dc257cc28daadfc83fffd0c10eb3b82",
					 *         "block_height": 811063
					 *       },
					 *       "next_cursor": "ARxgAQE"
					 *     } */
					"application/json": components["schemas"]["PaginatedInscriptionActivityByBlock"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	txs_by_block: {
		parameters: {
			query?: {
				/** @description The max number of transactions per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Block height or block hash
				 * @example 878011
				 */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "fees": "0",
					 *           "inputs": [],
					 *           "metaprotocols": [
					 *             "inscriptions"
					 *           ],
					 *           "outputs": [
					 *             {
					 *               "address": "bc1p8k4v4xuz55dv49svzjg43qjxq2whur7ync9tm0xgl5t4wjl9ca9snxgmlt",
					 *               "inscriptions": 0,
					 *               "runes": 0,
					 *               "satoshis": "546",
					 *               "script_pubkey": "51203daaca9b82a51aca960c1491588246029d7e0fc49e0abdbcc8fd17574be5c74b",
					 *               "spending_tx": null,
					 *               "vout": 0
					 *             },
					 *             {
					 *               "address": "bc1qwzrryqr3ja8w7hnja2spmkgfdcgvqwp5swz4af4ngsjecfz0w0pqud7k38",
					 *               "inscriptions": 3519,
					 *               "runes": 0,
					 *               "satoshis": "314010406",
					 *               "script_pubkey": "00207086320071974eef5e72eaa01dd9096e10c0383483855ea6b344259c244f73c2",
					 *               "spending_tx": "1179ebbad0019e5743f25c86148f51b70bc705e76392ce1195205b7fb0d3f8d5",
					 *               "vout": 1
					 *             },
					 *             {
					 *               "address": null,
					 *               "inscriptions": 0,
					 *               "runes": 0,
					 *               "satoshis": "0",
					 *               "script_pubkey": "6a24aa21a9edf17f948f3b2f268b144bd8677617399ea639a55f0e849ba5e6f35af26cc39904",
					 *               "spending_tx": null,
					 *               "vout": 2
					 *             },
					 *             {
					 *               "address": null,
					 *               "inscriptions": 0,
					 *               "runes": 0,
					 *               "satoshis": "0",
					 *               "script_pubkey": "6a2d434f5245012e50087fb834747606ed01ad67ad0f32129ab431e6d18fda214e5b9f350ffc7b6cf3058b9026e765",
					 *               "spending_tx": null,
					 *               "vout": 3
					 *             }
					 *           ],
					 *           "sats_per_vb": 0,
					 *           "total_inputs": 0,
					 *           "total_outputs": 4,
					 *           "tx_hash": "a306a1cb42f0e703219e0c2abb8cca08c85c8a3a55d4c0a119d62156a4cf435e",
					 *           "tx_index": 0,
					 *           "volume": "314010952"
					 *         },
					 *         {
					 *           "fees": "30300",
					 *           "inputs": [
					 *             {
					 *               "address": "bc1q5yw0e7hq42zwshvvq3sy2z07n7lg72elhdt8s577egxe2agm3xnq9nekyr",
					 *               "inscriptions": 0,
					 *               "runes": 0,
					 *               "satoshis": "94253892",
					 *               "script_pubkey": "0020a11cfcfae0aa84e85d8c04604509fe9fbe8f2b3fbb567853deca0d95751b89a6",
					 *               "txid": "65ff8bb5ab3feeeb1cdd47a200fc3d54ac70e4e4b1ca1c7e33f56207db7ddf86",
					 *               "vout": 1
					 *             }
					 *           ],
					 *           "metaprotocols": [],
					 *           "outputs": [
					 *             {
					 *               "address": "bc1q0wu0tqp2u3rtunjl0h0rsl9pvf86acy6sep63st0lp7lgg67ykzqeq89pn",
					 *               "inscriptions": 0,
					 *               "runes": 0,
					 *               "satoshis": "9790000",
					 *               "script_pubkey": "00207bb8f5802ae446be4e5f7dde387ca1624faee09a8643a8c16ff87df4235e2584",
					 *               "spending_tx": "0c135cbd187ef5ed2ab266f02910cabfd6fa0993d1dbf6627a33363fba38181d",
					 *               "vout": 0
					 *             },
					 *             {
					 *               "address": "bc1qnq7td9m6xex4gqeu2d3t6j8tqkpwfxwt2dn2t07m6hnl9svcn54qu5hax4",
					 *               "inscriptions": 0,
					 *               "runes": 0,
					 *               "satoshis": "84433592",
					 *               "script_pubkey": "0020983cb6977a364d54033c5362bd48eb0582e499cb5366a5bfdbd5e7f2c1989d2a",
					 *               "spending_tx": "4075db2355cdcac155657c55a24a46e2fd083fc88dedd54bc900288a61a688e7",
					 *               "vout": 1
					 *             }
					 *           ],
					 *           "sats_per_vb": 151,
					 *           "total_inputs": 1,
					 *           "total_outputs": 2,
					 *           "tx_hash": "04ac1f8968de3d1db8a6fc6504005e391ab8a85bb4a48b3d7f3e66e747d559ea",
					 *           "tx_index": 1,
					 *           "volume": "94223592"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "0000000000000000000122b2c240af790ee979f6e96175c00045cf54aa5a7001",
					 *         "block_height": 878055
					 *       },
					 *       "next_cursor": "AQE"
					 *     } */
					"application/json": components["schemas"]["PaginatedTxsByBlock"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	tx_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example 123828d4f3afe397a9e512b910c54fa3ea6288b7c26796e601be6be8bc2d572b
				 */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "block_hash": "0000000000000000000224d324bbb5df0e74e202d9ccf752d76341046fab3ec0",
					 *         "confirmations": 20035,
					 *         "fees": "8000",
					 *         "height": 855413,
					 *         "inputs": [
					 *           {
					 *             "address": "bc1qtlvtyurmupvg0g0a9tg0799hp3uwncj0wlg429",
					 *             "satoshis": "546",
					 *             "script_pubkey": "00145fd8b2707be05887a1fd2ad0ff14b70c78e9e24f",
					 *             "txid": "54f5c0dba6874d5d7305e108cba2c903145886bccb35e964f2a9b5063dd28f11",
					 *             "vout": 1
					 *           },
					 *           {
					 *             "address": "bc1q6kxj39dwva5xfv5278vcp3uhmql567qlpldtcr",
					 *             "satoshis": "291872",
					 *             "script_pubkey": "0014d58d2895ae676864b28af1d980c797d83f4d781f",
					 *             "txid": "d4c93d92f6704bf48dc693b92efa9b0675a6f6d171bdedb90cbf0f64f50749bb",
					 *             "vout": 3
					 *           }
					 *         ],
					 *         "metaprotocols": [
					 *           "inscriptions",
					 *           "runes",
					 *           "brc20"
					 *         ],
					 *         "outputs": [
					 *           {
					 *             "address": null,
					 *             "satoshis": "0",
					 *             "script_pubkey": "6a5d0b00c0a23303a9878cc30d01",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1qj7dam98j6ktjcp320qu77y2vrylv49c2k2hkmu",
					 *             "satoshis": "546",
					 *             "script_pubkey": "0014979bdd94f2d5972c062a7839ef114c193eca970a",
					 *             "spending_tx": "794c74fcf67db3a2bf5c517a5fbc073f087b476c6c5bc7e25f01178aca739451"
					 *           },
					 *           {
					 *             "address": "bc1q6kxj39dwva5xfv5278vcp3uhmql567qlpldtcr",
					 *             "satoshis": "283872",
					 *             "script_pubkey": "0014d58d2895ae676864b28af1d980c797d83f4d781f",
					 *             "spending_tx": "68337ace84eb959c98139aa6b43b642539622fa58d45d4362464edc2df26ea82"
					 *           }
					 *         ],
					 *         "sats_per_vb": 35,
					 *         "timestamp": "2024-08-04 23:38:20",
					 *         "tx_index": 18,
					 *         "unix_timestamp": 1722814700,
					 *         "volume": "284418"
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000c0ab8525c3e1839e991ff6e06665d206370133ca2c96",
					 *         "block_height": 875448
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedTxInfo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	inscription_activity_by_tx: {
		parameters: {
			query?: {
				/** @description The max number of inscriptions per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example 06244b1eb209becb440c924c62e0290c210e749d0491ad6cf134c98d23082025
				 */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "from": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "input_index": 0,
					 *             "sat_offset": 100409840,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           },
					 *           "inscription_id": "56f1eebc4cfc437cffc47caa5c08f2d4f5989ed8a8c5dd6cdec77996b0e055fdi0",
					 *           "to": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "output_vout": 20,
					 *             "sat_offset": 84345292,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           }
					 *         },
					 *         {
					 *           "from": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "input_index": 0,
					 *             "sat_offset": 100639840,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           },
					 *           "inscription_id": "196378911c21ee6eaac767be609106ad2efce6d36af822d54d9583a2256cb9c2i0",
					 *           "to": {
					 *             "address": "bc1qprdf80adfz7aekh5nejjfrp3jksc8r929svpxk",
					 *             "output_vout": 20,
					 *             "sat_offset": 84575292,
					 *             "script_pubkey": "001408da93bfad48bddcdaf49e65248c3195a1838caa"
					 *           }
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000380fb362a3ad3dc257cc28daadfc83fffd0c10eb3b82",
					 *         "block_height": 811063
					 *       },
					 *       "next_cursor": "AAAAAAAAAAI"
					 *     } */
					"application/json": components["schemas"]["PaginatedInscriptionActivityByTx"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	tx_info_with_metaprotocols: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example 1b07f02356aed6ddca37db8226c6292f2953d55ea741d7f58d44427976e7d4ee
				 */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "block_hash": "000000000000000000011c58d06536d2c1453a4742274efc2d4456921f027e98",
					 *         "confirmations": 95,
					 *         "fees": "1548800",
					 *         "height": 866807,
					 *         "inputs": [
					 *           {
					 *             "address": "bc1ppth27qnr74qhusy9pmcyeaelgvsfky6qzquv9nf56gqmte59vfhqwkqguh",
					 *             "inscriptions": [
					 *               {
					 *                 "inscription_id": "6fb976ab49dcec017f1e201e84395983204ae1a7c2abf7ced0a85d692e442799i0",
					 *                 "offset": 0
					 *               }
					 *             ],
					 *             "runes": [],
					 *             "satoshis": "606",
					 *             "script_pubkey": "51200aeeaf0263f5417e40850ef04cf73f43209b13401038c2cd34d201b5e685626e",
					 *             "txid": "47c7260764af2ee17aa584d9c035f2e5429aefd96b8016cfe0e3f0bcf04869a3",
					 *             "vout": 0
					 *           },
					 *           {
					 *             "address": "bc1pfqgphdlagqahqe5yf5a4yja9nz4hdeycvcmk3j0r3kr79ltetfvqhnlguu",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "10000",
					 *             "script_pubkey": "512048101bb7fd403b7066844d3b524ba598ab76e498663768c9e38d87e2fd795a58",
					 *             "txid": "fbf8ccedf64109568cb69485b28de876547a8c51bbf8f623c1906a69fdf16be4",
					 *             "vout": 0
					 *           },
					 *           {
					 *             "address": "bc1paefyrryx8j75fe2njzd7flnss9vgse0f9njewm7qpxaaypafhjasjn7qgw",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "1558800",
					 *             "script_pubkey": "5120ee52418c863cbd44e553909be4fe7081588865e92ce5976fc009bbd207a9bcbb",
					 *             "txid": "42d82813e9fb16bcf14b75bd78a1e16983e40d2e04f6c7087dde83e1d93c509b",
					 *             "vout": 0
					 *           }
					 *         ],
					 *         "metaprotocols": [
					 *           "inscriptions",
					 *           "brc20"
					 *         ],
					 *         "outputs": [
					 *           {
					 *             "address": "bc1p6ka80aqd57wjskxknnfzmswl27tegkejcsfa0v600s6rxle5lagqg38e88",
					 *             "inscriptions": [
					 *               {
					 *                 "inscription_id": "6fb976ab49dcec017f1e201e84395983204ae1a7c2abf7ced0a85d692e442799i0",
					 *                 "offset": 0
					 *               }
					 *             ],
					 *             "runes": [],
					 *             "satoshis": "606",
					 *             "script_pubkey": "5120d5ba77f40da79d2858d69cd22dc1df5797945b32c413d7b34f7c34337f34ff50",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1p5kjec5vl67yydqqljy4t97hdxq05s62qyqmmgzxhmqcd628ecuqs8c9w97",
					 *             "inscriptions": [
					 *               {
					 *                 "inscription_id": "1b07f02356aed6ddca37db8226c6292f2953d55ea741d7f58d44427976e7d4eei0",
					 *                 "offset": 0
					 *               }
					 *             ],
					 *             "runes": [],
					 *             "satoshis": "10000",
					 *             "script_pubkey": "5120a5a59c519fd78846801f912ab2faed301f4869402037b408d7d830dd28f9c701",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1p6uzgus82tyx8d4xt7eh0f6kxqn53a03529cyh9wmqcwchm6uvmtqkt5sdv",
					 *             "inscriptions": [],
					 *             "runes": [
					 *               {
					 *                 "amount": "50000000",
					 *                 "rune_id": "866807:12"
					 *               }
					 *             ],
					 *             "satoshis": "10000",
					 *             "script_pubkey": "5120d7048e40ea590c76d4cbf66ef4eac604e91ebe3451704b95db061d8bef5c66d6",
					 *             "spending_tx": "72b6ccd9289cc2aac7c9e55b3fa9185115313702e10bee31c79c87fd5ef5fff6"
					 *           },
					 *           {
					 *             "address": null,
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "0",
					 *             "script_pubkey": "6a5d23020704f0daddcdf988a80303400580e9070680e1eb170ae80708d086030cdafe341602",
					 *             "spending_tx": null
					 *           }
					 *         ],
					 *         "sats_per_vb": 1600,
					 *         "timestamp": "2024-10-22 06:16:34",
					 *         "tx_index": 12,
					 *         "unix_timestamp": 1729577794,
					 *         "volume": "20606"
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000001676a1898b7804be18303e68e8ceacc00c713011b0ef4",
					 *         "block_height": 866902
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedTxInfoMetaprotocols"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	tx_output_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example 1b07f02356aed6ddca37db8226c6292f2953d55ea741d7f58d44427976e7d4ee
				 */
				tx_hash: string;
				/**
				 * @description Transaction output index
				 * @example 1
				 */
				output_index: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "address": "3G7gSaxPY7BhbEASd2pnZY5cg7uEQMQvd8",
					 *         "inscriptions": [],
					 *         "runes": [
					 *           {
					 *             "amount": "88980600000",
					 *             "rune_id": "840000:3"
					 *           }
					 *         ],
					 *         "satoshis": "564",
					 *         "script_pubkey": "a9149e3be5b19b788c2eb2d590a779c06b9b7a09782e87",
					 *         "spending_tx": null
					 *       },
					 *       "last_updated": {
					 *         "block_hash": "00000000000000000000f2e6c4af3271ca47435d5178eca0bd6d86612d96d4b3",
					 *         "block_height": 884469
					 *       }
					 *     } */
					"application/json": components["schemas"]["TimestampedTxOutMetaprotocols"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_satoshi_balance_by_address: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": "695100",
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "000000000000000000012c80ffd2f0bd17f1f92a0bb4c098236d7108f727bfe5",
					 *           "block_height": 874584
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 874585,
					 *             "sats_per_vb": {
					 *               "max": 504,
					 *               "median": 8,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedSatoshis"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_runes_by_address: {
		parameters: {
			query?: {
				/** @description Limit the number of estimated mempool blocks to be reflected in the data (default: as many as available) */
				mempool_blocks_limit?: number | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "867138:1861": "230000"
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000002da06787fe86324e1cc1421861d899b7bd1e340aa1930",
					 *           "block_height": 867154
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 867155,
					 *             "sats_per_vb": {
					 *               "max": 16,
					 *               "median": 14,
					 *               "min": 12
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedRuneQuantities"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_rune_utxos_by_address: {
		parameters: {
			query?: {
				/**
				 * @description Return only UTxOs containing a specific Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 840000:3
				 */
				rune?: string | null;
				/** @description The property by which response items should be sorted. Supported values: height (height of block which produced the UTxO - default), amount (amount of runes in UTxO) */
				order_by?: components["schemas"]["OrderBy"] | null;
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page. */
				cursor?: string | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 20674,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 3
					 *         },
					 *         {
					 *           "confirmations": 20674,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 4
					 *         },
					 *         {
					 *           "confirmations": 20674,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 5
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "0000000000000000000119bd8dffd7d8285a69744011aa98f0d9091b0555ca46",
					 *           "block_height": 897627
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 897628,
					 *             "sats_per_vb": {
					 *               "max": 202,
					 *               "median": 5,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-05-21 00:47:53"
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolPaginatedRuneUtxoByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_utxos_by_address: {
		parameters: {
			query?: {
				/** @description Ignore UTxOs containing less than 100000 sats */
				filter_dust?: boolean | null;
				/** @description Ignore UTxOs containing less than specified satoshis */
				filter_dust_threshold?: number | null;
				/** @description Exclude UTxOs involved in metaprotocols (currently only runes and inscriptions will be discovered, more metaprotocols may be supported in future) */
				exclude_metaprotocols?: boolean | null;
				/** @description When used with exclude_metaprotocols=true, still include UTXOs which only contain used BRC20 inscriptions */
				ignore_used_brc20?: boolean | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description The order in which the results are sorted (by height at which UTxO was produced) */
				order?: ("asc" | "desc") | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
				/** @description Limit the number of estimated mempool blocks to be reflected in the data (default: as many as available) */
				mempool_blocks_limit?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1pkh05juaxqc3d388klrjq8msszzzfr33nnn5kt2na00jja3mue89q5wxvew",
					 *           "height": 867154,
					 *           "inscriptions": [],
					 *           "mempool": false,
					 *           "runes": [
					 *             {
					 *               "amount": "2000",
					 *               "rune_id": "867138:1861"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "script_pubkey": "5120b5df4973a60622d89cf6f8e403ee10108491c6339ce965aa7d7be52ec77cc9ca",
					 *           "txid": "e60e70271cce70df4cc1f9d0217d7cc9cbced26f0526c6ba946945cd155b49e4",
					 *           "vout": 0
					 *         },
					 *         {
					 *           "address": "bc1pkh05juaxqc3d388klrjq8msszzzfr33nnn5kt2na00jja3mue89q5wxvew",
					 *           "height": 867155,
					 *           "inscriptions": [
					 *             {
					 *               "inscription_id": "47bb5438d366863b25b4b1782af0d0cf0a89a922adce5da81253790d3e651501i0",
					 *               "offset": 0
					 *             }
					 *           ],
					 *           "mempool": true,
					 *           "runes": [
					 *             {
					 *               "amount": "44000",
					 *               "rune_id": "867138:1861"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "script_pubkey": "5120b5df4973a60622d89cf6f8e403ee10108491c6339ce965aa7d7be52ec77cc9ca",
					 *           "txid": "9f00f52bc6e9d95797e5597ea50427258ba873df059b13a319f0868ca9da1265",
					 *           "vout": 0
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000002da06787fe86324e1cc1421861d899b7bd1e340aa1930",
					 *           "block_height": 867154
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 867155,
					 *             "sats_per_vb": {
					 *               "max": 16,
					 *               "median": 14,
					 *               "min": 12
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolPaginatedUtxo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_holders_by_rune: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 2519999:31
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1q764zfcx3uw0dcvcdh7nnwm5fvsml0c2tgn942v",
					 *           "balance": "9000000.000000000000000000",
					 *           "script_pubkey": "0014f6aa24e0d1e39edc330dbfa7376e896437f7e14b"
					 *         },
					 *         {
					 *           "address": "bc1pqfhj6tlxgpvc72mvn9hh0z666k45fpxgsej92d9q08sfe572mhlqca68ld",
					 *           "balance": "420000.000000000000000000",
					 *           "script_pubkey": "5120026f2d2fe640598f2b6c996f778b5ad5ab4484c886645534a079e09cd3caddfe"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000002da06787fe86324e1cc1421861d899b7bd1e340aa1930",
					 *           "block_height": 867154
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 867155,
					 *             "sats_per_vb": {
					 *               "max": 16,
					 *               "median": 14,
					 *               "min": 12
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolPaginatedRuneHolder"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	fee_rates: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "block_height": 874585,
					 *           "sats_per_vb": {
					 *             "max": 504,
					 *             "median": 8,
					 *             "min": 1
					 *           }
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "000000000000000000012c80ffd2f0bd17f1f92a0bb4c098236d7108f727bfe5",
					 *           "block_height": 874584
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 874585,
					 *             "sats_per_vb": {
					 *               "max": 504,
					 *               "median": 8,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedFeeRates"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	tx_info_with_metaprotocols1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example 1b07f02356aed6ddca37db8226c6292f2953d55ea741d7f58d44427976e7d4ee
				 */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "fees": "508",
					 *         "height": 900962,
					 *         "inputs": [
					 *           {
					 *             "address": "bc1qyvtvxfyz60mmudgsmtxxpf22jl040ejmpj5mqnwv9lwr30jzmygqhr9tv8",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "3666696",
					 *             "script_pubkey": "00202316c32482d3f7be3510dacc60a54a97df57e65b0ca9b04dcc2fdc38be42d910",
					 *             "txid": "ed6273c6ff9259ec6a68dff0b21ddc4499e2e6d9837981f8c5089ac4935f6cf5",
					 *             "vout": 0
					 *           },
					 *           {
					 *             "address": "bc1pn2w92qyh7mwpf9rzmnvjnc0whswft243n0ntj50lurpnsjwwfy9sjur75v",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "600",
					 *             "script_pubkey": "51209a9c550097f6dc149462dcd929e1eebc1c95aab19be6b951ffe0c33849ce490b",
					 *             "txid": "a115a1818805fa06a80eaa57287c0c3f57d5993c1f0d3f771523b4d11711d31f",
					 *             "vout": 1
					 *           }
					 *         ],
					 *         "metaprotocols": [
					 *           "runes"
					 *         ],
					 *         "outputs": [
					 *           {
					 *             "address": null,
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "0",
					 *             "script_pubkey": "6a5d0b00c0a23303ffbedbb50201",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1pdruptufwh9awfepzq506kh03392lk074n4a5cy3v8zu0ma0sjvtqhwdu85",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "546",
					 *             "script_pubkey": "512068f815f12eb97ae4e422051fab5df18955fb3fd59d7b4c122c38b8fdf5f09316",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1qyvtvxfyz60mmudgsmtxxpf22jl040ejmpj5mqnwv9lwr30jzmygqhr9tv8",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "3641305",
					 *             "script_pubkey": "00202316c32482d3f7be3510dacc60a54a97df57e65b0ca9b04dcc2fdc38be42d910",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1qp8j9sx6609h7llqufurxjgrwsqwt020tqzn0gs",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "580",
					 *             "script_pubkey": "001409e4581b5a796feffc1c4f0669206e801cb7a9eb",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1qqx7h6wrl52hxwqnp8v8k072ahnr3sq8huzynww",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "24357",
					 *             "script_pubkey": "001401bd7d387fa2ae6702613b0f67f95dbcc71800f7",
					 *             "spending_tx": null
					 *           }
					 *         ],
					 *         "sats_per_vb": 2,
					 *         "volume": "3666788"
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "0000000000000000000148c7dbf4f8721db8912485cc6860e5b22f9b62e09870",
					 *           "block_height": 900961
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 900962,
					 *             "sats_per_vb": {
					 *               "max": 101,
					 *               "median": 4,
					 *               "min": 2
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-06-12 17:27:29"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedTxInfoMetaprotocols"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_tx_output_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example b077b8d829004197c5d71bbb755cf23914891db4768d642458c8ef245b3af7fe
				 */
				tx_hash: string;
				/**
				 * @description Transaction output index
				 * @example 0
				 */
				output_index: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "address": "bc1qr46dacxy28zz5apsjrvs5jdgvs5sdcf2ed4tvl",
					 *         "inscriptions": [],
					 *         "runes": [],
					 *         "satoshis": "85000",
					 *         "script_pubkey": "00141d74dee0c451c42a743090d90a49a8642906e12a",
					 *         "spending_tx": null
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "0000000000000000000085563bb7da463844c02d6c82bca13e3eec5411f8c8ed",
					 *           "block_height": 897991
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 897992,
					 *             "sats_per_vb": {
					 *               "max": 210,
					 *               "median": 4,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-05-23 11:43:08"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedTxOutMetaprotocols"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	wallet_satoshi_activity_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only transactions included on or after a specific height */
				from?: number | null;
				/** @description Return only transactions included on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/** @description Only return transactions of a specific activity kind. Supported values: "increase" for transactions where satoshi balance increases, "decrease" for decrease, and "self_transfer" for transactions where satoshi balance remained the same. */
				activity_kind?: components["schemas"]["ActivityKindByAddress"] | null;
				/** @description Do not return self-transfer transactions - transactions in which satoshi balance did not increase or decrease. */
				exclude_self_transfers?: boolean | null;
				/** @description Include mempool data. Default: true. */
				mempool?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1qcx7ys0ahvtfqcc63sfn6axls0qrhkadnslpd94
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 1,
					 *           "height": 901937,
					 *           "mempool": false,
					 *           "sat_activity": {
					 *             "amount": "603733",
					 *             "kind": "increase",
					 *             "usd_amount": "629.17"
					 *           },
					 *           "tx_hash": "7032180634bc691471b92099250b9370e07a0c8c8ca1420e518806404c7b6cf3"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000001ae26ce7b25ef2bd13f4c0069b634a233b1472f0c0a17",
					 *           "block_height": 901937
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 901938,
					 *             "sats_per_vb": {
					 *               "max": 99,
					 *               "median": 4,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-06-19 19:57:37"
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolWalletPaginatedActivityByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	wallet_metaprotocol_activity_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/** @description Include mempool data. Default: true. */
				mempool?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1qcx7ys0ahvtfqcc63sfn6axls0qrhkadnslpd94
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 53,
					 *           "height": 902843,
					 *           "inscription_activity": null,
					 *           "mempool": false,
					 *           "rune_activity": {
					 *             "decreased_balances": [
					 *               {
					 *                 "amount": "209938.14943",
					 *                 "rune_id": "840000:3",
					 *                 "usd_amount": "863.26"
					 *               }
					 *             ],
					 *             "etched_rune": null,
					 *             "increased_balances": [],
					 *             "minted": null,
					 *             "self_transfers": []
					 *           },
					 *           "sat_activity": {
					 *             "amount": "546",
					 *             "kind": "decrease",
					 *             "usd_amount": "0.59"
					 *           },
					 *           "tx_hash": "4717042047235b65fa7cf7d7a5fe2f0b9d51398f5c84676b65bde053edbac418"
					 *         },
					 *         {
					 *           "confirmations": 49,
					 *           "height": 902847,
					 *           "inscription_activity": {
					 *             "received": [
					 *               {
					 *                 "from": {
					 *                   "address": "bc1pqqeyklpuh5kx6yg3zqwy0tn9ysxtg6un0y7dl0hp6wz5y5xwvsvs6due29",
					 *                   "input_index": 0,
					 *                   "sat_offset": 0,
					 *                   "script_pubkey": "512000324b7c3cbd2c6d1111101c47ae65240cb46b93793cdfbee1d3854250ce6419"
					 *                 },
					 *                 "inscription_id": "e484a11516b74a06f5d104a83b1974db8d26e7a38cbb495d29bf5ed6b1f4e156i277",
					 *                 "to": {
					 *                   "address": "bc1px7ff6446jwmh79uu9df6dejvqayn9d6tlvwe5tudehj4j0cz58xsfr0dw9",
					 *                   "output_txid": "fe9cc01f0a2446da2bb71474652643d7b3d1d0c41fd05358373e0df921024575",
					 *                   "output_vout": 0,
					 *                   "sat_offset": 0,
					 *                   "script_pubkey": "512037929d56ba93b77f179c2b53a6e64c074932b74bfb1d9a2f8dcde5593f02a1cd"
					 *                 }
					 *               }
					 *             ],
					 *             "self_transferred": [],
					 *             "sent": []
					 *           },
					 *           "mempool": false,
					 *           "rune_activity": null,
					 *           "sat_activity": {
					 *             "amount": "546",
					 *             "kind": "increase",
					 *             "usd_amount": "0.59"
					 *           },
					 *           "tx_hash": "fe9cc01f0a2446da2bb71474652643d7b3d1d0c41fd05358373e0df921024575"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000001929ab2c8fa214ccb7f025c9b591514adfc39c8d18fdd",
					 *           "block_height": 902895
					 *         },
					 *         "estimated_blocks": [],
					 *         "mempool_timestamp": null
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolWalletPaginatedActivityByAddressWithMetaprotocols"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	wallet_historical_satoshi_balance_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only blocks included on or after a specific height or timestamps. If this parameter is not provided, the starting point will be the first block where the address has seen its balance increase or decrease. */
				from?: number | null;
				/** @description Return only blocks included on or before a specific height or timestamp */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/** @description Whether the from and to integer query params should be read as timestamps or as block heights. True (the default) means from and to params should be read as block heights. */
				height_params?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 932,
					 *           "height": 899903,
					 *           "sat_balance": "155191",
					 *           "timestamp": "2025-06-05 12:34:23",
					 *           "unix_timestamp": 1749126863,
					 *           "usd_balance": "163.59"
					 *         },
					 *         {
					 *           "confirmations": 931,
					 *           "height": 899904,
					 *           "sat_balance": "155191",
					 *           "timestamp": "2025-06-05 12:34:52",
					 *           "unix_timestamp": 1749126892,
					 *           "usd_balance": "163.59"
					 *         },
					 *         {
					 *           "confirmations": 930,
					 *           "height": 899905,
					 *           "sat_balance": "155191",
					 *           "timestamp": "2025-06-05 12:35:24",
					 *           "unix_timestamp": 1749126924,
					 *           "usd_balance": "163.56"
					 *         }
					 *       ],
					 *       "last_updated": {
					 *         "block_hash": "000000000000000000014ba9b2d30d9c737423c753c5b6a27989815ed50afe04",
					 *         "block_height": 900834
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["PaginatedHistoricalSatBalanceByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	wallet_inscription_activity_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only transactions created on or after a specific height */
				from?: number | null;
				/** @description Return only transactions created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/**
				 * @description Return only transactions containing a specific inscription, specified by an inscription ID. In presence of activity_kind, it relates to this specific inscription. In presence of exclude_self_transfers, it is this specific inscription that should be sent or received but not self-transferred.
				 * @example 6fb976ab49dcec017f1e201e84395983204ae1a7c2abf7ced0a85d692e442799i0
				 */
				inscription_id?: string | null;
				/** @description Filter txs by presence of specific activity kind. Supported values: send, receive, self_transfer. In presence of inscription filter, the activity kind relates to that specific inscription. In presence of exclude_self_transfers, this activity kind cannot be self_transfer. */
				activity_kind?:
					| components["schemas"]["InscriptionActivityKindByAddress"]
					| null;
				/** @description Exclude txs only containing inscriptions self-transfers. In presence of activity_kind, it cannot be self_transfer. In presence of inscription filter, that specific inscription should be sent or received, not self-transferred. */
				exclude_self_transfers?: boolean | null;
				/** @description Include mempool data. Default: true. */
				mempool?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1p27j3fa2mr3d50m3uaavr0ntyzr0v2a27n48lc9gxpkzd4xye6dgs2tzx6p
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 0,
					 *           "height": 901787,
					 *           "inscription_activity": {
					 *             "received": [
					 *               {
					 *                 "from": {
					 *                   "address": "bc1q8jtuypcd0p9v7eu8zq9uhd42tvy6gwh89zuchh",
					 *                   "input_index": 0,
					 *                   "sat_offset": 0,
					 *                   "script_pubkey": "00143c97c2070d784acf6787100bcbb6aa5b09a43ae7"
					 *                 },
					 *                 "inscription_id": "1e6f91f13fe9a4359e1b9d6e7723cacb815d250337dab921f7b90fca62913e73i577",
					 *                 "to": {
					 *                   "address": "bc1pck742mdgmrd473upp553jj5x2w62q6mzd3enxjdegrxx2sc7rcmqnndp86",
					 *                   "output_txid": "cf5caab63c40314fdd2f421b19541f9b25926d2a6318845ad8bc3266b4b8a8be",
					 *                   "output_vout": 0,
					 *                   "sat_offset": 0,
					 *                   "script_pubkey": "5120c5bd556da8d8db5f47810d29194a8653b4a06b626c733349b940cc65431e1e36"
					 *                 }
					 *               }
					 *             ],
					 *             "self_transferred": [],
					 *             "sent": []
					 *           },
					 *           "mempool": true,
					 *           "tx_hash": "cf5caab63c40314fdd2f421b19541f9b25926d2a6318845ad8bc3266b4b8a8be"
					 *         },
					 *         {
					 *           "confirmations": 7,
					 *           "height": 901780,
					 *           "inscription_activity": {
					 *             "received": [
					 *               {
					 *                 "from": {
					 *                   "address": "bc1p7jwyezderr5qxepw57fepw9dmdetn9pqkj2e3m7ufffthspdj5aqdxsdw5",
					 *                   "input_index": 0,
					 *                   "sat_offset": 0,
					 *                   "script_pubkey": "5120f49c4c89b918e803642ea79390b8addb72b99420b49598efdc4a52bbc02d953a"
					 *                 },
					 *                 "inscription_id": "a8a3f114d24e0e270a4d66457ff1ca1d11eb21d4daa02ffcd1b643a1c6731a2ci1388",
					 *                 "to": {
					 *                   "address": "bc1pck742mdgmrd473upp553jj5x2w62q6mzd3enxjdegrxx2sc7rcmqnndp86",
					 *                   "output_txid": "09b6730e0f11f87c31f8d4977785292e9c741b16834d59a0b2f352ee01a43e91",
					 *                   "output_vout": 0,
					 *                   "sat_offset": 0,
					 *                   "script_pubkey": "5120c5bd556da8d8db5f47810d29194a8653b4a06b626c733349b940cc65431e1e36"
					 *                 }
					 *               }
					 *             ],
					 *             "self_transferred": [],
					 *             "sent": []
					 *           },
					 *           "mempool": false,
					 *           "tx_hash": "09b6730e0f11f87c31f8d4977785292e9c741b16834d59a0b2f352ee01a43e91"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000000d7398966d32c809e5acad484574547150c97d39eea91",
					 *           "block_height": 901786
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 901787,
					 *             "sats_per_vb": {
					 *               "max": 991,
					 *               "median": 5,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-06-18 16:28:43"
					 *       },
					 *       "next_cursor": "Aw3ClAEBkT6kAe5S87KgWU2DFht0nC4phXeX1PgxfPgRDw5ztgk"
					 *     } */
					"application/json": components["schemas"]["MempoolWalletPaginatedInscriptionActivityByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	wallet_rune_activity_by_address: {
		parameters: {
			query?: {
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Return only transactions created on or after a specific height */
				from?: number | null;
				/** @description Return only transactions created on or before a specific height */
				to?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
				/**
				 * @description Return only transactions containing a specific rune, specified either by the rune ID (etching block number and transaction index) or name (spaced or un-spaced). In presence of activity_kind, it relates to this specific rune. In presence of exclude_self_transfers, it is this specific rune that the queried address should see increase or decrease in balance in the tx, not just being self-transferred.
				 * @example 840000:3
				 */
				rune?: string | null;
				/** @description Filter txs by presence specific activity kind. Supported values: increased, decreased, self_transfer. In presence of rune filter, the activity kind relates to that specific rune. In presence of exclude_self_transfers, this activity kind cannot be self_transfer. */
				activity_kind?:
					| components["schemas"]["RuneActivityKindByAddress"]
					| null;
				/** @description Exclude txs only containing runes self-transfers. In presence of activity_kind, it cannot be self_transfer. In presence of rune filter, that specific rune should be sent or received, not self-transferred. */
				exclude_self_transfers?: boolean | null;
				/** @description Include mempool data. Default: true. */
				mempool?: boolean | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1p27j3fa2mr3d50m3uaavr0ntyzr0v2a27n48lc9gxpkzd4xye6dgs2tzx6p
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 0,
					 *           "height": 901674,
					 *           "mempool": true,
					 *           "rune_activity": {
					 *             "decreased_balances": [
					 *               {
					 *                 "amount": "20000",
					 *                 "rune_id": "845764:84"
					 *               }
					 *             ],
					 *             "etched_rune": null,
					 *             "increased_balances": [],
					 *             "minted": null,
					 *             "self_transfers": []
					 *           },
					 *           "tx_hash": "2264aa2f8ec653067a98f35c7e762cff248410dbb13408629ce0ed4ca6444dd1"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000000a30d9d5025c11b17b2c44b176de0e284c84f59dacebb",
					 *           "block_height": 901673
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 901674,
					 *             "sats_per_vb": {
					 *               "max": 300,
					 *               "median": 4,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-06-17 21:38:09"
					 *       },
					 *       "next_cursor": "Aw3CKgEl0U1Epkzt4JxiCDSx2xCEJP8sdn5c85h6BlPGji-qZCI"
					 *     } */
					"application/json": components["schemas"]["MempoolWalletPaginatedRuneActivityByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	wallet_address_statistics: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1qcx7ys0ahvtfqcc63sfn6axls0qrhkadnslpd94
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "pending": {
					 *           "inputs": 1,
					 *           "outputs": 1,
					 *           "sat_balance": "0",
					 *           "sat_in_inputs": 89692768,
					 *           "sat_in_outputs": 89582068,
					 *           "txs": 1,
					 *           "usd_balance": "0.00",
					 *           "utxos": 0
					 *         },
					 *         "runes": false,
					 *         "sat_balance": "0",
					 *         "total_inputs": 6,
					 *         "total_inscriptions": 0,
					 *         "total_outputs": 6,
					 *         "total_sat_in_inputs": 540481308,
					 *         "total_sat_in_outputs": 539817108,
					 *         "total_txs": 6,
					 *         "total_utxos": 0,
					 *         "usd_balance": "0.00"
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "000000000000000000019f3ff6e0e9b59a5f13e9514c21c8912c92d7592de88c",
					 *           "block_height": 903987
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 903988,
					 *             "sats_per_vb": {
					 *               "max": 120,
					 *               "median": 1,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-07-04 15:26:13"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolWalletTimestampedAddressStatistics"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rpc_latest_block: {
		parameters: {
			query?: {
				/**
				 * @description Page number for block transactions.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Max number of block transactions per page.
				 * @example 100
				 */
				count?: number;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.BitcoinBlockResponseBody"]
						| components["schemas"]["api_bitcoin.BitcoinBlockVerboseResponseBody"];
				};
			};
			/** @description Error getting block. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_range_info: {
		parameters: {
			query?: {
				/**
				 * @description Page number.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Number of blocks.
				 * @example 10
				 */
				count?: number;
				/**
				 * @description Order blocks by descending (desc) or ascending (asc).
				 * @example asc
				 */
				order?: string;
			};
			header?: never;
			path: {
				/** @description Start height. */
				start_height: string;
				/** @description End height. */
				end_height: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinBlocksResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Error getting blocks. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_recent_blocks_info: {
		parameters: {
			query?: {
				/**
				 * @description Page number.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Number of blocks.
				 * @example 5
				 */
				count?: number;
				/**
				 * @description Order blocks by descending (desc) or ascending (asc).
				 * @example desc
				 */
				order?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinBlocksResponseBody"];
				};
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting blocks. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_recent_blocks_info_count: {
		parameters: {
			query?: {
				/**
				 * @description Order blocks by descending (desc) or ascending (asc).
				 * @example desc
				 */
				order?: string;
			};
			header?: never;
			path: {
				/**
				 * @description Number of blocks.
				 * @example 5
				 */
				count: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinBlocksResponseBody"];
				};
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting blocks. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_info: {
		parameters: {
			query?: {
				/**
				 * @description Page number for block transactions.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Max number of block transactions per page.
				 * @example 100
				 */
				count?: number;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path: {
				/** @description Block height or hash. */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.BitcoinBlockResponseBody"]
						| components["schemas"]["api_bitcoin.BitcoinBlockVerboseResponseBody"];
				};
			};
			/** @description Invalid height. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting block. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_miner_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Block height or hash. */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BlockMinerResponseBody"];
				};
			};
			/** @description Error getting block miner. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_volume: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Block height or hash. */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BlockVolumeResponseBody"];
				};
			};
			/** @description Error getting block volume. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_chain_info: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BlockchainInfoResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Error getting blockchain info. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_info: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolInfoResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Error getting mempool info. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transactions: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transactions. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transaction_details: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxDetailsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transaction info. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transaction_ancestors: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxAncestorsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transaction ancestors. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transaction_descendants: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxDescendantsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transaction descendants. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_info_batch: {
		parameters: {
			query?: {
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Transaction hash array. */
		requestBody: {
			content: {
				"application/json": components["schemas"]["api_bitcoin.BatchTxsRequest"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionsBatchResponseBody"];
				};
			};
			/** @description Invalid request: too many transactions. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_decode: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Raw Transaction Hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinDecodedTransactionResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_estimate_smart_fee: {
		parameters: {
			query?: {
				/**
				 * @description Whether to return a more conservative estimate which also satisfies a longer history. A conservative estimate potentially returns a higher feerate and is more likely to be sufficient for the desired target, but is not as responsive to short term drops in the prevailing fee market. Must be one of: 'unset' 'economical' 'conservative'.
				 * @example economical
				 */
				mode?: string;
			};
			header?: never;
			path: {
				/**
				 * @description Confirmation target in blocks.
				 * @example 50
				 */
				blocks: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.EstimateSmartFeeResponseBody"];
				};
			};
			/** @description Invalid request. Ensure one of the following estimate modes is used: conservative, economical, unset. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing fee estimate response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_info_hex: {
		parameters: {
			query?: {
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Transaction hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionVerboseResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_psbt_decode: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Signed PSBT Hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.PSBTResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Internal server error. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_recent: {
		parameters: {
			query?: {
				/**
				 * @description Page number.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Number of blocks.
				 * @example 50
				 */
				count?: number;
				/**
				 * @description Order of transactions.
				 * @example desc
				 */
				order?: string;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionsVerboseResponseBody"];
				};
			};
			/** @description No transactions in the last 10 blocks. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transactions response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_recent_count: {
		parameters: {
			query?: {
				/**
				 * @description Order transactions by descending (desc) or ascending (asc).
				 * @example desc
				 */
				order?: string;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Number of transactions.
				 * @example 5
				 */
				count: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionsVerboseResponseBody"];
				};
			};
			/** @description No transactions in the last 10 blocks. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transactions response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_submit_transaction: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Signed Tx Hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_info: {
		parameters: {
			query?: {
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionVerboseResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	EventManagerService_Healthcheck: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.HealthcheckResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_ListTriggers: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.ListTriggersResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_CreateTrigger: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["public.event_manager.v1.CreateTriggerRequest"];
			};
		};
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.CreateTriggerResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_GetTrigger: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.GetTriggerResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_UpdateTrigger: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/** name */
					name?: string;
					/**
					 * chain
					 * @description Blockchain to listen on (bitcoin)
					 * @example bitcoin
					 * @enum {string}
					 */
					chain?: "bitcoin";
					/**
					 * network
					 * @description Network environment to listen on (mainnet)
					 * @example mainnet
					 * @enum {string}
					 */
					network?: "mainnet" | "testnet";
					/**
					 * type
					 * @description Trigger type, e.g., transaction
					 * @example transaction
					 * @enum {string}
					 */
					type?: "transaction";
					/**
					 * webhook_url
					 * Format: uri
					 * @description Webhook URL to receive events
					 * @example https://webhook.site/your-endpoint
					 */
					webhook_url?: string;
					/** filters */
					filters?: components["schemas"]["public.event_manager.v1.Filter"][];
					/**
					 * confirmations
					 * Format: int32
					 * @description Number of confirmations required for the transaction to be matched by this trigger
					 * @example 5
					 */
					confirmations?: number;
					/**
					 * status
					 * @description Status of the trigger, either active or inactive
					 * @example active
					 * @enum {string}
					 */
					status?: "active" | "paused";
				};
			};
		};
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.UpdateTriggerResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_DeleteTrigger: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.DeleteTriggerResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_GetTriggerConditionOptions: {
		parameters: {
			query?: {
				trigger_type?: "transaction";
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.GetTriggerConditionOptionsResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_GetEventLog: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.GetEventLogResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	EventManagerService_ListEventLogs: {
		parameters: {
			query?: {
				page?: number;
				limit?: number;
				trigger_id?: string;
				chain?: string;
				network?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["public.event_manager.v1.ListEventLogsResponse"];
				};
			};
			/** @description Error */
			default: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["connect.error"];
				};
			};
		};
	};
	"mkt-dexs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["models.SupportedDexList"];
				};
			};
			/** @description Bad Request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	"mkt-dex-ohlc": {
		parameters: {
			query: {
				/**
				 * @description Mempool mode
				 * @example included
				 */
				mempool?: "included" | "excluded" | "only";
				/**
				 * @description Time resolution (1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w, 1M)
				 * @example 1h
				 */
				resolution:
					| "1m"
					| "5m"
					| "15m"
					| "30m"
					| "1h"
					| "4h"
					| "1d"
					| "1w"
					| "1M";
				/**
				 * @description Start timestamp in Unix
				 * @example 1735689600
				 */
				from?: string;
				/**
				 * @description End timestamp in Unix
				 * @example 1742428800
				 */
				to?: string;
				/**
				 * @description Limit number of Runes returned (min: 1, max: 50000)
				 * @example 10000
				 */
				limit?: number;
				/**
				 * @description Sort by descending (desc) or ascending (asc)
				 * @example asc
				 */
				sort?: "asc" | "desc";
				/**
				 * @description Fill candles with no trades with synthetic data (OHLC filled with previous closing price, volume=0)
				 * @example false
				 */
				carry?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Name of the DEX
				 * @example magiceden
				 */
				dex: "all" | "magiceden" | "dotswap";
				/**
				 * @description Symbol of the Rune asset trading pair (BTC-Rune ID)
				 * @example BTC-840000:28
				 */
				symbol: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["models.CandleList"];
				};
			};
			/** @description Bad Request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	"mkt-dex-trades": {
		parameters: {
			query?: {
				/**
				 * @description Mempool mode
				 * @example included
				 */
				mempool?: "included" | "excluded" | "only";
				/**
				 * @description Start timestamp in Unix
				 * @example 1735689600
				 */
				from?: string;
				/**
				 * @description End timestamp in Unix
				 * @example 1742428800
				 */
				to?: string;
				/**
				 * @description Limit number of Runes returned (min: 1, max: 50000)
				 * @example 10000
				 */
				limit?: number;
				/**
				 * @description Sort by descending (desc) or ascending (asc)
				 * @example desc
				 */
				sort?: "asc" | "desc";
			};
			header?: never;
			path: {
				/**
				 * @description Name of the DEX
				 * @example magiceden
				 */
				dex: "all" | "magiceden" | "dotswap";
				/**
				 * @description Symbol of the Rune asset trading pair (BTC-Rune ID)
				 * @example BTC-840000:28
				 */
				symbol: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["models.TradeList"];
				};
			};
			/** @description Bad Request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	"mkt-btc-prices-by-timestamps": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Array of UTC timestamps */
		requestBody: {
			content: {
				"application/json":
					| Record<string, never>
					| components["schemas"]["bitcoin_api.PricesByTimestampsParams"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.PricesByTimestampsResponse"][];
				};
			};
			/** @description Bad Request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	"mkt-rune-prices-by-timestamps": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Array of RuneID <> UTC timestamp pairs */
		requestBody: {
			content: {
				"application/json":
					| Record<string, never>
					| components["schemas"]["bitcoin_api.RunePricesParams"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.RunePricesByTimestampsResponse"][];
				};
			};
			/** @description Bad Request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	"mkt-rune-price-by-timestamp": {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Rune ID in the format <etching_block>:<etching_tx>
				 * @example BTC-840000:28
				 */
				rune_id: string;
				/**
				 * @description Unix timestamp in seconds
				 * @example 1746109820
				 */
				timestamp: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.RunePriceResponse"][];
				};
			};
			/** @description Invalid timestamp */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["bitcoin_api.APIError"]
						| components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	"mkt-btc-price-by-timestamp": {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Unix timestamp in seconds */
				timestamp: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.PriceTimestamp"][];
				};
			};
			/** @description Invalid timestamp */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["bitcoin_api.APIError"]
						| components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	"mkt-dex": {
		parameters: {
			query?: {
				/**
				 * @description Bitcoin Rune ID
				 * @example 840000:28
				 */
				rune_id?: string;
				/**
				 * @description Limit number of Runes returned (min: 1, max: 50000)
				 * @example 10000
				 */
				limit?: number;
				/**
				 * @description Sort by descending (desc) or ascending (asc)
				 * @example desc
				 */
				sort?: "asc" | "desc";
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["models.RuneRegistryList"];
				};
			};
			/** @description Bad Request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
			/** @description Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["bitcoin_api.APIError"];
				};
			};
		};
	};
	esplora_address_details: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Bitcoin address to query */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Address information returned successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AddressInfo"];
				};
			};
			/** @description Address not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_address_transactions: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The Bitcoin address to query. */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of transactions related to the address. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Transaction"][];
				};
			};
			/** @description Invalid address */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Address not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_address_transactions_chain: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The Bitcoin address to query. */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A paginated list of confirmed transactions for the given address. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Transaction"][];
				};
			};
			/** @description Invalid address or txid */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Address not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_address_transactions_mempool: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The Bitcoin address whose unconfirmed transactions should be retrieved. */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Array of mempool transactions associated with the address. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Transaction"][];
				};
			};
			/** @description Invalid address format. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Address not found or no unconfirmed transactions. */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_address_utxos: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The Bitcoin address to query. */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of UTXOs for the address. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Utxo1"][];
				};
			};
			/** @description Invalid address */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Address not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_details: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The block hash to retrieve information for. */
				hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Block metadata */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Block"];
				};
			};
			/** @description Block not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_header: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The hash of the block to retrieve the header for. */
				hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Raw block header as hex */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": components["schemas"]["BlockHeader"];
				};
			};
			/** @description Invalid block hash */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Block not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_status: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The block hash to query */
				hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Block status response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["BlockStatus"];
				};
			};
			/** @description Invalid block hash */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Block not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_transactions: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The block hash. */
				hash: string;
				/** @description Index to start fetching transactions from (pagination). */
				start_index: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of transactions in the block. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Transaction"][];
				};
			};
			/** @description Block not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_txids: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The hash of the block to query. */
				hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Array of transaction IDs in the block. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["BlockTxids"];
				};
			};
			/** @description Invalid block hash. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Block not found. */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_txid_by_index: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The block hash. */
				hash: string;
				/** @description The transaction index within the block. */
				index: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Transaction ID at the specified index */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TransactionId"];
				};
			};
			/** @description Invalid block hash or index */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Block or transaction not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_raw: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The hash of the block */
				hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Raw block data in binary format */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
			/** @description Invalid block hash */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Block not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_blocks: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The block height to start from. */
				start_height: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of 10 blocks starting from the given height */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Block"][];
				};
			};
			/** @description Invalid block height */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_hash_by_height: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The height of the block. */
				height: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Block hash as plain text. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Invalid block height supplied. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Block not found for the given height. */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_block_tip_height: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Block height of the latest block */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["BlockHeight"];
				};
			};
		};
	};
	esplora_block_tip_hash: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Block hash string of the latest block */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": components["schemas"]["BlockHash"];
				};
			};
		};
	};
	esplora_mempool_stats: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Aggregated mempool data. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["MempoolStats"];
				};
			};
		};
	};
	esplora_mempool_txids: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of transaction IDs currently in the mempool. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["MempoolTxids"];
				};
			};
		};
	};
	esplora_mempool_recent: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of recent mempool transactions. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["MempoolRecentTx"][];
				};
			};
		};
	};
	esplora_transaction_details: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The transaction ID to look up. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Transaction details retrieved successfully. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Transaction"];
				};
			};
			/** @description Transaction not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_hex: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction ID of the transaction to fetch. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Raw transaction hex string. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example 02000000000101ad0c...00000000 */
					"text/plain": components["schemas"]["TransactionHex"];
				};
			};
			/** @description Transaction not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_merkleblock_proof: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The transaction ID to retrieve the merkleblock proof for. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Merkleblock proof in binary format (as raw hex string) */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
			/** @description Invalid txid format */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Transaction not found or not confirmed */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_merkle_proof: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The transaction ID to get the merkle proof for. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Merkle inclusion proof data. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["MerkleProof"];
				};
			};
			/** @description Transaction not found or not confirmed. */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_outspend: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction ID of the parent transaction. */
				txid: string;
				/** @description The output index within the transaction. */
				vout: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Spending status of the transaction output. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TxOutspend"];
				};
			};
			/** @description Transaction or output not found. */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_outspends: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The transaction ID (txid) to query. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Spending status for each output in the transaction. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Outspend"][];
				};
			};
			/** @description Transaction not found. */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_raw: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The transaction ID. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Raw transaction hex string. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Transaction not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_rbf_timeline: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The transaction ID to trace RBF replacements for. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description RBF replacement timeline for the transaction. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RbfReplacementRoot"];
				};
			};
			/** @description Transaction not found or no RBF history available */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_transaction_status: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction ID to query. */
				txid: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Transaction confirmation status. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TransactionStatus"];
				};
			};
			/** @description Transaction not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	esplora_broadcast_transaction: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Hex-encoded raw transaction data. */
		requestBody: {
			content: {
				"text/plain": string;
			};
		};
		responses: {
			/** @description Returns the transaction ID (txid) if successfully broadcast. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["BroadcastResponse"];
				};
			};
			/** @description Invalid transaction format or missing body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error while processing the transaction. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
