/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/block/latest": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Latest Block
		 * @description Returns the most recent block on the Bitcoin blockchain.
		 *     Useful for syncing frontends, indexing latest chain state, or watching for new block activity. Set `verbose=true` for full TX data without need for separate calls.
		 */
		get: operations["rpc_latest_block"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/block/range/{start_height}/{end_height}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Range Info
		 * @description Fetches basic info for a contiguous block range (start and end height).
		 */
		get: operations["rpc_block_range_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/block/recent": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Block Info
		 * @description Returns the most recent blocks from the tip going backward. Useful to view or stream recent blockchain activity.
		 */
		get: operations["rpc_recent_blocks_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/block/recent/{count}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Block Info Count
		 * @description Returns a list of the most recently mined blocks, limited by count. It provides a snapshot of the latest blockchain activity, starting from the current chain tip and going backward.
		 */
		get: operations["rpc_recent_blocks_info_count"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/block/{height_or_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Info
		 * @description Retrieve full or summary information for a specific block.
		 *     Useful for analyzing individual blocks or resolving TX data inline.
		 */
		get: operations["rpc_block_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/block/{height_or_hash}/miner": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Miner Info
		 * @description Returns metadata about the miner for a specific block.
		 *     Includes name, known addresses, icon, and associated tags.
		 *     Useful for research or visual analytics on pool distribution.
		 */
		get: operations["rpc_block_miner_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/block/{height_or_hash}/volume": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block Volume
		 * @description Returns total transaction output volume (in satoshis) for a block.
		 *     This provides insight into economic activity, not just block size.
		 */
		get: operations["rpc_block_volume"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/general/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Blockchain Info
		 * @description Returns global node and chain info: block count, difficulty, pruning, fork status, etc.
		 *     Useful for diagnostics, UI status panels, or infrastructure monitoring.
		 */
		get: operations["rpc_chain_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Info
		 * @description Returns size, memory usage, fee thresholds, and Replace-By-Fee (RBF) state.
		 *     Useful for gauging current congestion and planning fees accordingly.
		 */
		get: operations["rpc_mempool_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transactions
		 * @description Returns a list of transaction IDs currently in the mempool.
		 */
		get: operations["rpc_mempool_transactions"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions/{tx_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transaction Info
		 * @description Returns full information for a mempool transaction: fees, inputs, Replace-By-Fee (RBF) flags, unconfirmed descendants, etc.
		 *     Useful for inspecting transactions or verifying status.
		 */
		get: operations["rpc_mempool_transaction_details"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions/{tx_hash}/ancestors": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transaction Ancestors
		 * @description Lists ancestor TXs for a mempool TX, by a TX hash.
		 *     Useful for evaluating chains of unconfirmed transactions and replacability via Replace-By-Fee (RBF).
		 */
		get: operations["rpc_mempool_transaction_ancestors"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions/{tx_hash}/descendants": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Transaction Descendants
		 * @description Lists descendant TXs for a mempool TX, by a TX hash.
		 *     Useful for evaluating chains of unconfirmed transactions and replacability via Replace-By-Fee (RBF).
		 */
		get: operations["rpc_mempool_transaction_descendants"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/batch": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Transaction Info Batch
		 * @description Takes up to 50 TX hashes and returns verbose TX data in a single call. Useful for dashboards or syncing nodes without hitting rate limits.
		 */
		post: operations["rpc_transaction_info_batch"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/decode": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Decode Transaction
		 * @description Takes a raw TX hex and returns structured JSON.
		 *     Useful when building or validating raw transactions.
		 */
		post: operations["rpc_transaction_decode"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/estimatefee/{blocks}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Estimate Fee
		 * @description Estimate approximate fee per kilobyte (kB) needed for a transaction.
		 *     Useful for setting dynamic fee rates in wallets or broadcast tools.
		 */
		get: operations["rpc_estimate_smart_fee"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/hex": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Transaction Info Hex
		 * @description Same as `/transaction/decode` in that it takes a raw TX hex and returns structured JSON, but it also fetches blockchain metadata such as confirmations and block height.
		 */
		post: operations["rpc_transaction_info_hex"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/psbt/decode": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Decode PSBT
		 * @description Takes a signed PSBT hex and returns the internal structure. Covers UTXO metadata, BIP32 deriv paths, inputs/outputs, etc.
		 *     Useful for hardware wallet or multisig integrations.
		 */
		post: operations["rpc_psbt_decode"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/recent": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Transactions
		 * @description Returns a list of recent on-chain transactions.
		 *     Useful for retrieving lastest transactions or monitoring new, on-chain activity by block height.
		 */
		get: operations["rpc_transaction_recent"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/recent/{count}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Recent Transactions Count
		 * @description Returns a list of recent on-chain transactions, specified by count.
		 *     Useful for retrieving lastest transactions or monitoring new, on-chain activity by block height.
		 */
		get: operations["rpc_transaction_recent_count"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/submit": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Send Transaction
		 * @description Pushes a signed raw transaction to the network.
		 */
		post: operations["rpc_submit_transaction"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/transaction/{tx_hash}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Info
		 * @description This endpoint returns detailed information for a specific Bitcoin transaction, by its unique transaction hash.
		 */
		get: operations["rpc_transaction_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		"api_bitcoin.APIError": {
			/**
			 * @description Error returned from the API request
			 * @example Bad Request
			 */
			error?: string;
		};
		"api_bitcoin.BatchTxsRequest": {
			tx_ids: string[];
		};
		"api_bitcoin.Bip9": {
			bit?: number;
			since?: number;
			start_time?: number;
			statistics?: components["schemas"]["api_bitcoin.Statistics"];
			status?: string;
			timeout?: number;
		};
		"api_bitcoin.BitcoinBlock": {
			bits?: string;
			chainwork?: string;
			confirmations?: number;
			difficulty?: number;
			hash?: string;
			height?: number;
			mediantime?: number;
			merkleroot?: string;
			miner?: components["schemas"]["api_bitcoin.MinerInfo"];
			nTx?: number;
			nonce?: number;
			previousblockhash?: string;
			size?: number;
			strippedsize?: number;
			time?: number;
			tx?: string[];
			version?: number;
			versionHex?: string;
			weight?: number;
		};
		"api_bitcoin.BitcoinBlockResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinBlock"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinBlockVerbose": {
			bits?: string;
			chainwork?: string;
			confirmations?: number;
			difficulty?: number;
			hash?: string;
			height?: number;
			mediantime?: number;
			merkleroot?: string;
			miner?: components["schemas"]["api_bitcoin.MinerInfo"];
			nTx?: number;
			nonce?: number;
			previousblockhash?: string;
			size?: number;
			strippedsize?: number;
			time?: number;
			tx?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"][];
			version?: number;
			versionHex?: string;
			weight?: number;
		};
		"api_bitcoin.BitcoinBlockVerboseResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinBlockVerbose"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinBlocksResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinBlock"][];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinDecodedTransaction": {
			hash?: string;
			hex?: string;
			locktime?: number;
			size?: number;
			txid?: string;
			version?: number;
			vin?: components["schemas"]["api_bitcoin.Vin"][];
			vout?: components["schemas"]["api_bitcoin.Vout"][];
			vsize?: number;
			weight?: number;
		};
		"api_bitcoin.BitcoinDecodedTransactionResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinDecodedTransaction"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinTransactionVerbose": {
			blockhash?: string;
			blockheight?: number;
			blocktime?: number;
			confirmations?: number;
			hash?: string;
			hex?: string;
			input_addresses?: string[];
			locktime?: number;
			output_addresses?: string[];
			size?: number;
			time?: number;
			total_fees?: number;
			total_input_volume?: number;
			total_output_volume?: number;
			txid?: string;
			version?: number;
			vin?: components["schemas"]["api_bitcoin.VinVerbose"][];
			vout?: components["schemas"]["api_bitcoin.VoutVerbose"][];
			vsize?: number;
			weight?: number;
		};
		"api_bitcoin.BitcoinTransactionVerboseResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinTransactionsBatchResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"][];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BitcoinTransactionsVerboseResponseBody": {
			data?: components["schemas"]["api_bitcoin.BitcoinTransactionVerbose"][];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BlockMinerResponseBody": {
			data?: components["schemas"]["api_bitcoin.MinerInfo"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BlockVolume": {
			total_output_satoshis?: number;
		};
		"api_bitcoin.BlockVolumeResponseBody": {
			data?: components["schemas"]["api_bitcoin.BlockVolume"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.BlockchainInfo": {
			automatic_pruning?: boolean;
			bestblockhash?: string;
			blocks?: number;
			chain?: string;
			chainwork?: string;
			difficulty?: number;
			headers?: number;
			initialblockdownload?: boolean;
			mediantime?: number;
			prune_target_size?: number;
			pruned?: boolean;
			pruneheight?: number;
			size_on_disk?: number;
			softforks?: {
				[key: string]: components["schemas"]["api_bitcoin.Softfork"];
			};
			verificationprogress?: number;
			warnings?: string;
		};
		"api_bitcoin.BlockchainInfoResponseBody": {
			data?: components["schemas"]["api_bitcoin.BlockchainInfo"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.EstimateSmartFee": {
			blocks?: number;
			feerate?: number;
		};
		"api_bitcoin.EstimateSmartFeeResponseBody": {
			data?: components["schemas"]["api_bitcoin.EstimateSmartFee"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.LastUpdatedBlock": {
			block_hash?: string;
			block_height?: number;
		};
		"api_bitcoin.MempoolInfoResponseBody": {
			data?: components["schemas"]["api_bitcoin.MempoolInfoResult"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolInfoResult": {
			/** @description Total memory usage for the mempool (in bytes) */
			bytes?: number;
			/** @description Whether full replace-by-fee (RBF) is enabled */
			fullrbf?: boolean;
			/** @description The incremental relay fee setting (in BTC) */
			incrementalrelayfee?: number;
			/** @description Whether the mempool is fully loaded */
			loaded?: boolean;
			/** @description Maximum memory usage for the mempool (in bytes) */
			maxmempool?: number;
			/** @description The minimum fee rate (in BTC/kB) for mempool transactions */
			mempoolminfee?: number;
			/** @description The minimum fee rate (in BTC/kB) for relaying transactions */
			minrelaytxfee?: number;
			/** @description Number of transactions in the mempool */
			size?: number;
			/** @description The total fees (in BTC) in the mempool */
			total_fee?: number;
			/** @description Number of transactions that have not been broadcast */
			unbroadcastcount?: number;
			/** @description Total usage of the mempool (in bytes) */
			usage?: number;
		};
		"api_bitcoin.MempoolTxAncestorsResponseBody": {
			data?: string[];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxDescendantsResponseBody": {
			data?: string[];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxDetailsResponseBody": {
			data?: components["schemas"]["api_bitcoin.MempoolTxDetailsResult"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxDetailsResult": {
			ancestorcount?: number;
			ancestorsize?: number;
			"bip125-replaceable"?: boolean;
			depends?: string[];
			descendantcount?: number;
			descendantsize?: number;
			fees?: components["schemas"]["api_bitcoin.TxFees"];
			height?: number;
			spentby?: string[];
			time?: number;
			unbroadcast?: boolean;
			vsize?: number;
			weight?: number;
			wtxid?: string;
		};
		"api_bitcoin.MempoolTxsResponseBody": {
			data?: components["schemas"]["api_bitcoin.MempoolTxsResult"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.MempoolTxsResult": {
			/** @description Sequence number of the mempool */
			mempool_sequence?: number;
			/** @description List of transaction IDs */
			txids?: string[];
		};
		"api_bitcoin.MinerInfo": {
			addresses?: string[];
			icon_url?: string;
			name?: string;
			tags?: string[];
			url?: string;
		};
		"api_bitcoin.NodeRPCError": {
			/**
			 * @description Error code returned from the API request
			 * @example 0
			 */
			code?: number;
			/**
			 * @description Error returned from the API request
			 * @example node rpc error
			 */
			"node rpc error"?: string;
		};
		"api_bitcoin.PSBT": {
			fee?: number;
			global_xpubs?: unknown[];
			inputs?: {
				bip32_derivs?: {
					master_fingerprint?: string;
					path?: string;
					pubkey?: string;
				}[];
				non_witness_utxo?: {
					hash?: string;
					locktime?: number;
					size?: number;
					txid?: string;
					version?: number;
					vin?: {
						scriptSig?: {
							asm?: string;
							hex?: string;
						};
						sequence?: number;
						txid?: string;
						vout?: number;
					}[];
					vout?: {
						n?: number;
						scriptPubKey?: {
							address?: string;
							asm?: string;
							desc?: string;
							hex?: string;
							type?: string;
						};
						value?: number;
					}[];
					vsize?: number;
					weight?: number;
				};
				witness_utxo?: {
					amount?: number;
					scriptPubKey?: {
						address?: string;
						asm?: string;
						desc?: string;
						hex?: string;
						type?: string;
					};
				};
			}[];
			outputs?: {
				bip32_derivs?: {
					master_fingerprint?: string;
					path?: string;
					pubkey?: string;
				}[];
			}[];
			proprietary?: unknown[];
			psbt_version?: number;
			tx?: {
				hash?: string;
				locktime?: number;
				size?: number;
				txid?: string;
				version?: number;
				vin?: {
					scriptSig?: {
						asm?: string;
						hex?: string;
					};
					sequence?: number;
					txid?: string;
					vout?: number;
				}[];
				vout?: {
					n?: number;
					scriptPubKey?: {
						address?: string;
						asm?: string;
						desc?: string;
						hex?: string;
						type?: string;
					};
					value?: number;
				}[];
				vsize?: number;
				weight?: number;
			};
			unknown?: Record<string, never>;
		};
		"api_bitcoin.PSBTResponseBody": {
			data?: components["schemas"]["api_bitcoin.PSBT"];
			last_updated?: components["schemas"]["api_bitcoin.LastUpdatedBlock"];
		};
		"api_bitcoin.Softfork": {
			active?: boolean;
			bip9?: components["schemas"]["api_bitcoin.Bip9"];
			height?: number;
			type?: string;
		};
		"api_bitcoin.Statistics": {
			count?: number;
			elapsed?: number;
			period?: number;
			possible?: boolean;
			threshold?: number;
		};
		"api_bitcoin.TxFees": {
			ancestor?: number;
			base?: number;
			descendant?: number;
			modified?: number;
		};
		"api_bitcoin.Vin": {
			coinbase?: string;
			scriptSig?: {
				asm?: string;
				hex?: string;
			};
			sequence?: number;
			txid?: string;
			txinwitness?: string[];
			vout?: number;
		};
		"api_bitcoin.VinVerbose": {
			address?: string;
			coinbase?: string;
			scriptSig?: {
				asm?: string;
				hex?: string;
			};
			script_type?: string;
			sequence?: number;
			txid?: string;
			txinwitness?: string[];
			value?: number;
			vout?: number;
		};
		"api_bitcoin.Vout": {
			n?: number;
			scriptPubKey?: {
				address?: string;
				asm?: string;
				desc?: string;
				hex?: string;
				type?: string;
			};
			value?: number;
		};
		"api_bitcoin.VoutVerbose": {
			address?: string;
			n?: number;
			scriptPubKey?: {
				address?: string;
				asm?: string;
				desc?: string;
				hex?: string;
				type?: string;
			};
			script_type?: string;
			value?: number;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	rpc_latest_block: {
		parameters: {
			query?: {
				/**
				 * @description Page number for block transactions.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Max number of block transactions per page.
				 * @example 100
				 */
				count?: number;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.BitcoinBlockResponseBody"]
						| components["schemas"]["api_bitcoin.BitcoinBlockVerboseResponseBody"];
				};
			};
			/** @description Error getting block. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_range_info: {
		parameters: {
			query?: {
				/**
				 * @description Page number.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Number of blocks.
				 * @example 10
				 */
				count?: number;
				/**
				 * @description Order blocks by descending (desc) or ascending (asc).
				 * @example asc
				 */
				order?: string;
			};
			header?: never;
			path: {
				/** @description Start height. */
				start_height: string;
				/** @description End height. */
				end_height: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinBlocksResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Error getting blocks. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_recent_blocks_info: {
		parameters: {
			query?: {
				/**
				 * @description Page number.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Number of blocks.
				 * @example 5
				 */
				count?: number;
				/**
				 * @description Order blocks by descending (desc) or ascending (asc).
				 * @example desc
				 */
				order?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinBlocksResponseBody"];
				};
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting blocks. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_recent_blocks_info_count: {
		parameters: {
			query?: {
				/**
				 * @description Order blocks by descending (desc) or ascending (asc).
				 * @example desc
				 */
				order?: string;
			};
			header?: never;
			path: {
				/**
				 * @description Number of blocks.
				 * @example 5
				 */
				count: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinBlocksResponseBody"];
				};
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting blocks. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_info: {
		parameters: {
			query?: {
				/**
				 * @description Page number for block transactions.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Max number of block transactions per page.
				 * @example 100
				 */
				count?: number;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path: {
				/** @description Block height or hash. */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.BitcoinBlockResponseBody"]
						| components["schemas"]["api_bitcoin.BitcoinBlockVerboseResponseBody"];
				};
			};
			/** @description Invalid height. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting block. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_miner_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Block height or hash. */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BlockMinerResponseBody"];
				};
			};
			/** @description Error getting block miner. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_block_volume: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Block height or hash. */
				height_or_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BlockVolumeResponseBody"];
				};
			};
			/** @description Error getting block volume. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_chain_info: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BlockchainInfoResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Error getting blockchain info. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_info: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolInfoResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Error getting mempool info. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transactions: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transactions. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transaction_details: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxDetailsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transaction info. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transaction_ancestors: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxAncestorsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transaction ancestors. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_mempool_transaction_descendants: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.MempoolTxDescendantsResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error getting mempool transaction descendants. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_info_batch: {
		parameters: {
			query?: {
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Transaction hash array. */
		requestBody: {
			content: {
				"application/json": components["schemas"]["api_bitcoin.BatchTxsRequest"];
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionsBatchResponseBody"];
				};
			};
			/** @description Invalid request: too many transactions. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_decode: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Raw Transaction Hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinDecodedTransactionResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_estimate_smart_fee: {
		parameters: {
			query?: {
				/**
				 * @description Whether to return a more conservative estimate which also satisfies a longer history. A conservative estimate potentially returns a higher feerate and is more likely to be sufficient for the desired target, but is not as responsive to short term drops in the prevailing fee market. Must be one of: 'unset' 'economical' 'conservative'.
				 * @example economical
				 */
				mode?: string;
			};
			header?: never;
			path: {
				/**
				 * @description Confirmation target in blocks.
				 * @example 50
				 */
				blocks: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.EstimateSmartFeeResponseBody"];
				};
			};
			/** @description Invalid request. Ensure one of the following estimate modes is used: conservative, economical, unset. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing fee estimate response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_info_hex: {
		parameters: {
			query?: {
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Transaction hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionVerboseResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_psbt_decode: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Signed PSBT Hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.PSBTResponseBody"];
				};
			};
			/** @description Node RPC error. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.NodeRPCError"];
				};
			};
			/** @description Internal server error. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_recent: {
		parameters: {
			query?: {
				/**
				 * @description Page number.
				 * @example 1
				 */
				page?: number;
				/**
				 * @description Number of blocks.
				 * @example 50
				 */
				count?: number;
				/**
				 * @description Order of transactions.
				 * @example desc
				 */
				order?: string;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionsVerboseResponseBody"];
				};
			};
			/** @description No transactions in the last 10 blocks. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transactions response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_recent_count: {
		parameters: {
			query?: {
				/**
				 * @description Order transactions by descending (desc) or ascending (asc).
				 * @example desc
				 */
				order?: string;
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path: {
				/**
				 * @description Number of transactions.
				 * @example 5
				 */
				count: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionsVerboseResponseBody"];
				};
			};
			/** @description No transactions in the last 10 blocks. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid count number. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transactions response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_submit_transaction: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Signed Tx Hex. */
		requestBody: {
			content: {
				"application/json": string;
			};
		};
		responses: {
			/** @description OK */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
	rpc_transaction_info: {
		parameters: {
			query?: {
				/**
				 * @description Verbose.
				 * @example false
				 */
				verbose?: boolean;
			};
			header?: never;
			path: {
				/** @description Transaction hash. */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["api_bitcoin.BitcoinTransactionVerboseResponseBody"];
				};
			};
			/** @description Invalid request. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.NodeRPCError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
			/** @description Error processing transaction response. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| components["schemas"]["api_bitcoin.APIError"]
						| components["schemas"]["api_bitcoin.APIError"];
				};
			};
		};
	};
}
