/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/mempool/addresses/{address}/balance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Satoshi Balance by Address (Mempool-aware)
		 * @description Returns the total balance in satoshis held at the specified address or script pubkey by summing all unspent outputs (UTXOs).
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_satoshi_balance_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/addresses/{address}/runes": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Runes by Address (Mempool-aware)
		 * @description Provides a list of all Rune assets held by the specified address. It returns both total and available balances, allowing for token inventory management and portfolio tracking.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_runes_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/addresses/{address}/runes/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Rune UTxOs by Address (mempool-aware)
		 * @description Lists all UTXOs at the address or script pubkey that contains Rune tokens, with optional refinement based on Rune type or metadata. Helpful for spend analysis or wallet state audits.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_rune_utxos_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/addresses/{address}/utxos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * UTxOs by Address (Mempool-aware)
		 * @description Retrieves all UTXOs associated with a Bitcoin address or script pubkey. Ideal for wallet views, dust filtering, or balance calculations. Can be tailored to exclude certain categories of UTXOs such as those used in metaprotocols.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_utxos_by_address"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/assets/runes/{rune}/holders": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Holders by Rune (Mempool-aware)
		 * @description Lists all addresses currently holding a given Rune, with corresponding balances. Helps visualize token distribution and adoption.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_holders_by_rune"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/fee_rates": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Mempool Block Fee Rates
		 * @description Statistics regarding fee rates of transactions within estimated mempool blocks.
		 */
		get: operations["fee_rates"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions/{tx_hash}/metaprotocols": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Info with Metaprotocols (Mempool-aware)
		 * @description Returns an enhanced view of the transaction, including info about metaprotocols in both inputs and outputs. Useful for deep inspection tools.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["tx_info_with_metaprotocols"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/mempool/transactions/{tx_hash}/outputs/{output_index}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Transaction Output Info (Mempool-aware)
		 * @description Provides detailed information for a single transaction output, including its value, spend status, and any attached metadata such as Ordinal inscriptions, Runes, or BRC20 data.
		 *
		 *     In addition to confirmed transactions, mempool endpoints return data which reflects pending transactions in some number of "estimated" blocks - predicted blocks containing transactions which have been propagated around the network but not yet included in a mined block, with transactions with a higher sat/vB value being prioritised. The response details how many of these estimated blocks were considered when fetching the data.
		 */
		get: operations["mempool_tx_output_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** @description For transactions within a block, these are the lowest, median and highest
		 *     satoshis per virtual-byte values. */
		BlockSatsPerVb: {
			/**
			 * Format: int64
			 * @description Highest sat/vB value of the transactions within the block
			 * @example 255
			 */
			max: number;
			/**
			 * Format: int64
			 * @description Median sat/vB value of the transactions within the block
			 * @example 15
			 */
			median: number;
			/**
			 * Format: int64
			 * @description Lowest sat/vB value of the transactions within the block
			 * @example 11
			 */
			min: number;
		};
		ChainTip: {
			/**
			 * @description The hash of the block
			 * @example 0000000000000000000a7f3b7b6b6e1d9a18db65a3b4a3f4f3bcb2e1f1b2d3e7
			 */
			block_hash: string;
			/**
			 * Format: int64
			 * @description The height of the block in the blockchain
			 * @example 707000
			 */
			block_height: number;
		};
		EstimatedBlock: {
			/**
			 * Format: int64
			 * @description Height of the estimated block
			 * @example 707001
			 */
			block_height: number;
			sats_per_vb: components["schemas"]["BlockSatsPerVb"];
		};
		InscriptionAndOffset: {
			inscription_id: string;
			/** Format: int64 */
			offset: number;
		};
		MempoolLastUpdated: {
			chain_tip: components["schemas"]["ChainTip"];
			/** @description Information about any estimated blocks from the mempool that were indexed in addition to the mainchain */
			estimated_blocks: components["schemas"]["EstimatedBlock"][];
			/** @description Timestamp of the indexed mempool snapshot, if any estimated blocks from the mempool have been indexed */
			mempool_timestamp?: string | null;
		};
		MempoolPaginatedRuneHolder: {
			data: components["schemas"]["RuneHolder"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolPaginatedRuneUtxoByAddress: {
			data: components["schemas"]["RuneUtxoByAddress"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolPaginatedUtxo: {
			data: components["schemas"]["MempoolUtxo"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
			next_cursor?: string | null;
		};
		MempoolTimestampedFeeRates: {
			data: components["schemas"]["EstimatedBlock"][];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedRuneQuantities: {
			data: {
				[key: string]: string;
			};
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedSatoshis: {
			data: string;
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedTxInfoMetaprotocols: {
			data: components["schemas"]["MempoolTxInfoMetaprotocols"];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTimestampedTxOutMetaprotocols: {
			data: components["schemas"]["TxOutMetaprotocols"];
			indexer_info: components["schemas"]["MempoolLastUpdated"];
		};
		MempoolTxInfoMetaprotocols: {
			/**
			 * @description Fees paid to the miner.
			 * @example 2504
			 */
			fees: string;
			/**
			 * Format: int64
			 * @description Block height.
			 * @example 875075
			 */
			height: number;
			/** @description List of inputs, in the same order as the transaction. */
			inputs: components["schemas"]["TxInMetaprotocols"][];
			/** @description Whether any of the transactions in the block involved metaprotocols. */
			metaprotocols: components["schemas"]["Metaprotocol"][];
			/** @description List of outputs, in the same order as the transaction. */
			outputs: components["schemas"]["TxOutMetaprotocols"][];
			/**
			 * Format: int64
			 * @description sats per vB of the transaction.
			 * @example 15
			 */
			sats_per_vb: number;
			/**
			 * @description Total number of satoshis that went through this transaction, minus fees.
			 * @example 12345678
			 */
			volume: string;
		};
		MempoolUtxo: {
			address?: string | null;
			/** Format: int64 */
			height: number;
			inscriptions: components["schemas"]["InscriptionAndOffset"][];
			mempool: boolean;
			runes: components["schemas"]["RuneAndAmount"][];
			satoshis: string;
			script_pubkey: string;
			txid: string;
			/** Format: int32 */
			vout: number;
		};
		/** @enum {string} */
		Metaprotocol: "inscriptions" | "runes" | "brc20";
		/**
		 * @default height
		 * @enum {string}
		 */
		OrderBy: "height" | "amount";
		/**
		 * @default asc
		 * @enum {string}
		 */
		OrderParam: "asc" | "desc";
		RuneAndAmount: {
			amount: string;
			rune_id: string;
		};
		RuneHolder: {
			address?: string | null;
			balance: string;
			script_pubkey: string;
		};
		RuneUtxoByAddress: {
			/** Format: int64 */
			confirmations: number;
			/** Format: int64 */
			height: number;
			runes: components["schemas"]["RuneAndAmount"][];
			satoshis: string;
			txid: string;
			/** Format: int32 */
			vout: number;
		};
		TxInMetaprotocols: {
			/**
			 * @description Address-encoding of the script pubkey at which the input resides.
			 * @example bc1p5u4y8vdhn46adxhfv5scfv4c8myykw6r5uyzlavm42k4wgjewktq7xqcyr
			 */
			address?: string | null;
			/** @description List of inscription IDs and their offsets in this input. */
			inscriptions: components["schemas"]["InscriptionAndOffset"][];
			/** @description List of rune IDs and their amount in this input. */
			runes: components["schemas"]["RuneAndAmount"][];
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the input resides.
			 * @example 5120a72a43b1b79d75d69ae9652184b2b83ec84b3b43a7082ff59baaad5722597596
			 */
			script_pubkey: string;
			/**
			 * @description Transaction hash of the UTxO.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			txid: string;
			/**
			 * Format: int32
			 * @description Output index of the UTxO.
			 * @example 0
			 */
			vout: number;
		};
		TxOutMetaprotocols: {
			/**
			 * @description Address-encoding of the script pubkey at which the output containing the inscription resides.
			 * @example bc1ppth27qnr74qhusy9pmcyeaelgvsfky6qzquv9nf56gqmte59vfhqwkqguh
			 */
			address?: string | null;
			/** @description List of inscription IDs and their offsets in this input. */
			inscriptions: components["schemas"]["InscriptionAndOffset"][];
			/** @description List of rune IDs and their amount in this input. */
			runes: components["schemas"]["RuneAndAmount"][];
			/**
			 * @description Total number of satoshis in the UTxO.
			 * @example 1234567
			 */
			satoshis: string;
			/**
			 * @description Script pubkey at which the output containing the inscription resides.
			 * @example 51200aeeaf0263f5417e40850ef04cf73f43209b13401038c2cd34d201b5e685626e
			 */
			script_pubkey: string;
			/**
			 * @description If this output is known to have been spent, hash of the transaction that spent it.
			 * @example 2ca28d42583fc5bace84fe024d3697969e06dd1cf769a2141286825b81773fd5
			 */
			spending_tx?: string | null;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	mempool_satoshi_balance_by_address: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": "695100",
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "000000000000000000012c80ffd2f0bd17f1f92a0bb4c098236d7108f727bfe5",
					 *           "block_height": 874584
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 874585,
					 *             "sats_per_vb": {
					 *               "max": 504,
					 *               "median": 8,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedSatoshis"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_runes_by_address: {
		parameters: {
			query?: {
				/** @description Limit the number of estimated mempool blocks to be reflected in the data (default: as many as available) */
				mempool_blocks_limit?: number | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "867138:1861": "230000"
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000002da06787fe86324e1cc1421861d899b7bd1e340aa1930",
					 *           "block_height": 867154
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 867155,
					 *             "sats_per_vb": {
					 *               "max": 16,
					 *               "median": 14,
					 *               "min": 12
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedRuneQuantities"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_rune_utxos_by_address: {
		parameters: {
			query?: {
				/**
				 * @description Return only UTxOs containing a specific Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 840000:3
				 */
				rune?: string | null;
				/** @description The property by which response items should be sorted. Supported values: height (height of block which produced the UTxO - default), amount (amount of runes in UTxO) */
				order_by?: components["schemas"]["OrderBy"] | null;
				/** @description The order in which the results are sorted. Supported values: asc, desc */
				order?: ("asc" | "desc") | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page. */
				cursor?: string | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "confirmations": 20674,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 3
					 *         },
					 *         {
					 *           "confirmations": 20674,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 4
					 *         },
					 *         {
					 *           "confirmations": 20674,
					 *           "height": 876954,
					 *           "runes": [
					 *             {
					 *               "amount": "2500000",
					 *               "rune_id": "876947:7"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "txid": "67715c2b42eaa053fc174c68ca4f393446986567ed0509fa78eb3aa9d0b8db0b",
					 *           "vout": 5
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "0000000000000000000119bd8dffd7d8285a69744011aa98f0d9091b0555ca46",
					 *           "block_height": 897627
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 897628,
					 *             "sats_per_vb": {
					 *               "max": 202,
					 *               "median": 5,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-05-21 00:47:53"
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolPaginatedRuneUtxoByAddress"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_utxos_by_address: {
		parameters: {
			query?: {
				/** @description Ignore UTxOs containing less than 100000 sats */
				filter_dust?: boolean | null;
				/** @description Ignore UTxOs containing less than specified satoshis */
				filter_dust_threshold?: number | null;
				/** @description Exclude UTxOs involved in metaprotocols (currently only runes and inscriptions will be discovered, more metaprotocols may be supported in future) */
				exclude_metaprotocols?: boolean | null;
				/** @description When used with exclude_metaprotocols=true, still include UTXOs which only contain used BRC20 inscriptions */
				ignore_used_brc20?: boolean | null;
				/** @description The max number of results per page */
				count?: number | null;
				/** @description The order in which the results are sorted (by height at which UTxO was produced) */
				order?: ("asc" | "desc") | null;
				/** @description Return only UTxOs created on or after a specific height */
				from?: number | null;
				/** @description Return only UTxOs created on or before a specific height */
				to?: number | null;
				/** @description Limit the number of estimated mempool blocks to be reflected in the data (default: as many as available) */
				mempool_blocks_limit?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Bitcoin address or hex encoded script pubkey
				 * @example bc1phyrmjs2jm5c98tldke2ykp0h66lsx3wy0ey8ug2fjj5mxsn8ftqsa24un8
				 */
				address: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1pkh05juaxqc3d388klrjq8msszzzfr33nnn5kt2na00jja3mue89q5wxvew",
					 *           "height": 867154,
					 *           "inscriptions": [],
					 *           "mempool": false,
					 *           "runes": [
					 *             {
					 *               "amount": "2000",
					 *               "rune_id": "867138:1861"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "script_pubkey": "5120b5df4973a60622d89cf6f8e403ee10108491c6339ce965aa7d7be52ec77cc9ca",
					 *           "txid": "e60e70271cce70df4cc1f9d0217d7cc9cbced26f0526c6ba946945cd155b49e4",
					 *           "vout": 0
					 *         },
					 *         {
					 *           "address": "bc1pkh05juaxqc3d388klrjq8msszzzfr33nnn5kt2na00jja3mue89q5wxvew",
					 *           "height": 867155,
					 *           "inscriptions": [
					 *             {
					 *               "inscription_id": "47bb5438d366863b25b4b1782af0d0cf0a89a922adce5da81253790d3e651501i0",
					 *               "offset": 0
					 *             }
					 *           ],
					 *           "mempool": true,
					 *           "runes": [
					 *             {
					 *               "amount": "44000",
					 *               "rune_id": "867138:1861"
					 *             }
					 *           ],
					 *           "satoshis": "546",
					 *           "script_pubkey": "5120b5df4973a60622d89cf6f8e403ee10108491c6339ce965aa7d7be52ec77cc9ca",
					 *           "txid": "9f00f52bc6e9d95797e5597ea50427258ba873df059b13a319f0868ca9da1265",
					 *           "vout": 0
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000002da06787fe86324e1cc1421861d899b7bd1e340aa1930",
					 *           "block_height": 867154
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 867155,
					 *             "sats_per_vb": {
					 *               "max": 16,
					 *               "median": 14,
					 *               "min": 12
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolPaginatedUtxo"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_holders_by_rune: {
		parameters: {
			query?: {
				/** @description The max number of results per page */
				count?: number | null;
				/** @description Pagination cursor string, use the cursor included in a page of results to fetch the next page */
				cursor?: string | null;
			};
			header?: never;
			path: {
				/**
				 * @description Rune, specified either by the Rune ID (etching block number and transaction index) or name (spaced or un-spaced)
				 * @example 2519999:31
				 */
				rune: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "address": "bc1q764zfcx3uw0dcvcdh7nnwm5fvsml0c2tgn942v",
					 *           "balance": "9000000.000000000000000000",
					 *           "script_pubkey": "0014f6aa24e0d1e39edc330dbfa7376e896437f7e14b"
					 *         },
					 *         {
					 *           "address": "bc1pqfhj6tlxgpvc72mvn9hh0z666k45fpxgsej92d9q08sfe572mhlqca68ld",
					 *           "balance": "420000.000000000000000000",
					 *           "script_pubkey": "5120026f2d2fe640598f2b6c996f778b5ad5ab4484c886645534a079e09cd3caddfe"
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "00000000000000000002da06787fe86324e1cc1421861d899b7bd1e340aa1930",
					 *           "block_height": 867154
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 867155,
					 *             "sats_per_vb": {
					 *               "max": 16,
					 *               "median": 14,
					 *               "min": 12
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       },
					 *       "next_cursor": null
					 *     } */
					"application/json": components["schemas"]["MempoolPaginatedRuneHolder"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	fee_rates: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "block_height": 874585,
					 *           "sats_per_vb": {
					 *             "max": 504,
					 *             "median": 8,
					 *             "min": 1
					 *           }
					 *         }
					 *       ],
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "000000000000000000012c80ffd2f0bd17f1f92a0bb4c098236d7108f727bfe5",
					 *           "block_height": 874584
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 874585,
					 *             "sats_per_vb": {
					 *               "max": 504,
					 *               "median": 8,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-01-06 16:43:32"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedFeeRates"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	tx_info_with_metaprotocols: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example 1b07f02356aed6ddca37db8226c6292f2953d55ea741d7f58d44427976e7d4ee
				 */
				tx_hash: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "fees": "508",
					 *         "height": 900962,
					 *         "inputs": [
					 *           {
					 *             "address": "bc1qyvtvxfyz60mmudgsmtxxpf22jl040ejmpj5mqnwv9lwr30jzmygqhr9tv8",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "3666696",
					 *             "script_pubkey": "00202316c32482d3f7be3510dacc60a54a97df57e65b0ca9b04dcc2fdc38be42d910",
					 *             "txid": "ed6273c6ff9259ec6a68dff0b21ddc4499e2e6d9837981f8c5089ac4935f6cf5",
					 *             "vout": 0
					 *           },
					 *           {
					 *             "address": "bc1pn2w92qyh7mwpf9rzmnvjnc0whswft243n0ntj50lurpnsjwwfy9sjur75v",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "600",
					 *             "script_pubkey": "51209a9c550097f6dc149462dcd929e1eebc1c95aab19be6b951ffe0c33849ce490b",
					 *             "txid": "a115a1818805fa06a80eaa57287c0c3f57d5993c1f0d3f771523b4d11711d31f",
					 *             "vout": 1
					 *           }
					 *         ],
					 *         "metaprotocols": [
					 *           "runes"
					 *         ],
					 *         "outputs": [
					 *           {
					 *             "address": null,
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "0",
					 *             "script_pubkey": "6a5d0b00c0a23303ffbedbb50201",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1pdruptufwh9awfepzq506kh03392lk074n4a5cy3v8zu0ma0sjvtqhwdu85",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "546",
					 *             "script_pubkey": "512068f815f12eb97ae4e422051fab5df18955fb3fd59d7b4c122c38b8fdf5f09316",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1qyvtvxfyz60mmudgsmtxxpf22jl040ejmpj5mqnwv9lwr30jzmygqhr9tv8",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "3641305",
					 *             "script_pubkey": "00202316c32482d3f7be3510dacc60a54a97df57e65b0ca9b04dcc2fdc38be42d910",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1qp8j9sx6609h7llqufurxjgrwsqwt020tqzn0gs",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "580",
					 *             "script_pubkey": "001409e4581b5a796feffc1c4f0669206e801cb7a9eb",
					 *             "spending_tx": null
					 *           },
					 *           {
					 *             "address": "bc1qqx7h6wrl52hxwqnp8v8k072ahnr3sq8huzynww",
					 *             "inscriptions": [],
					 *             "runes": [],
					 *             "satoshis": "24357",
					 *             "script_pubkey": "001401bd7d387fa2ae6702613b0f67f95dbcc71800f7",
					 *             "spending_tx": null
					 *           }
					 *         ],
					 *         "sats_per_vb": 2,
					 *         "volume": "3666788"
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "0000000000000000000148c7dbf4f8721db8912485cc6860e5b22f9b62e09870",
					 *           "block_height": 900961
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 900962,
					 *             "sats_per_vb": {
					 *               "max": 101,
					 *               "median": 4,
					 *               "min": 2
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-06-12 17:27:29"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedTxInfoMetaprotocols"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	mempool_tx_output_info: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Transaction hash
				 * @example b077b8d829004197c5d71bbb755cf23914891db4768d642458c8ef245b3af7fe
				 */
				tx_hash: string;
				/**
				 * @description Transaction output index
				 * @example 0
				 */
				output_index: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Requested data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": {
					 *         "address": "bc1qr46dacxy28zz5apsjrvs5jdgvs5sdcf2ed4tvl",
					 *         "inscriptions": [],
					 *         "runes": [],
					 *         "satoshis": "85000",
					 *         "script_pubkey": "00141d74dee0c451c42a743090d90a49a8642906e12a",
					 *         "spending_tx": null
					 *       },
					 *       "indexer_info": {
					 *         "chain_tip": {
					 *           "block_hash": "0000000000000000000085563bb7da463844c02d6c82bca13e3eec5411f8c8ed",
					 *           "block_height": 897991
					 *         },
					 *         "estimated_blocks": [
					 *           {
					 *             "block_height": 897992,
					 *             "sats_per_vb": {
					 *               "max": 210,
					 *               "median": 4,
					 *               "min": 1
					 *             }
					 *           }
					 *         ],
					 *         "mempool_timestamp": "2025-05-23 11:43:08"
					 *       }
					 *     } */
					"application/json": components["schemas"]["MempoolTimestampedTxOutMetaprotocols"];
				};
			};
			/** @description Malformed query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Requested entity not found on-chain */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
